{"version":3,"sources":["reportWebVitals.ts","store/storeHooks.ts","components/structure/ContentContainer.tsx","theme/themeConstants.ts","constants/constantAddresses.ts","services/lendingNetworksService/lendingNetworksParams.ts","components/header/Header.tsx","theme/commonClasses.ts","components/panel/Panel.tsx","components/icons/TokenIcon.tsx","pages/LendingNetworkPage/MarketsTab/markets/AssetPanelRow.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsPanel.tsx","pages/LendingNetworkPage/MarketsTab/markets/MarketsSection.tsx","components/AnimatedNumberText/AnimatedNumberText.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalanceHeadline.tsx","pages/LendingNetworkPage/MarketsTab/overview/NetApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesAndApy.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowLimitBar.tsx","pages/LendingNetworkPage/MarketsTab/overview/BalancesTotal.tsx","pages/LendingNetworkPage/MarketsTab/overview/BorrowOverview.tsx","pages/LendingNetworkPage/MarketsTab/MainLendingNetworkTab.tsx","components/modals/MarketInteractionModal/base/ModalActionButton.tsx","components/modals/MarketInteractionModal/base/rates/BaseRates.tsx","components/modals/MarketInteractionModal/base/rates/ActionRates.tsx","components/modals/MarketInteractionModal/base/rates/BorrowLimitRates.tsx","components/modals/txWaitingModal/TxWaitingModal.tsx","components/modals/MarketInteractionModal/base/MarketInteractionModal.tsx","constants/ethereumErrorCodes.ts","components/modals/txWaitingModal/txWaitingHooks.ts","components/modals/MarketInteractionModal/marketInteractionModalHooks.ts","components/modals/MarketInteractionModal/base/mainModalMessage/MainModalMessage.tsx","components/modals/MarketInteractionModal/SupplyModal.tsx","components/modals/MarketInteractionModal/BorrowModal.tsx","components/modals/collateralModal/CollateralModal.tsx","components/modals/collateralModal/ConnectedCollateralModal.tsx","components/modals/collateralModal/collateralModalHooks.ts","components/modals/incentiveModal/IncentiveModal.tsx","components/modals/incentiveModal/ConnectedIncentiveModal.tsx","components/modals/incentiveModal/incentiveModalHooks.ts","pages/LendingNetworkPage/LendingNetworkPage.tsx","pages/AllNetworksPage/NetworkListItem.tsx","pages/AllNetworksPage/NetworksList.tsx","pages/AllNetworksPage/AllNetworksPage.tsx","pages/Main.tsx","App.tsx","theme/Theme.tsx","services/cryptoWalletConnectionService/CryptoWalletConnectionService.ts","configs.ts","services/networkActions.ts","services/lendingNetworksService/LendingNetworksService.ts","services/contractsIntegration/contractsIntegrationUtils.ts","services/contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService.ts","ethereumConnection/ethereumConnection.ts","services/contractsIntegration/ComptrollerService/ComptrollerService.ts","services/contractsIntegration/erc20Service/Erc20Service.ts","services/contractsIntegration/erc20Service/Erc20BuilderService.ts","services/contractsIntegration/cTokensService/CErc20Service.ts","services/contractsIntegration/cTokensService/CEtherService.ts","services/contractsIntegration/cTokensService/CTokensBuilderService.ts","constants/supportedTokensPerChain.ts","store/CryptoWalletConnectionStore.ts","store/AccountStore.ts","services/lendingNetworksService/ILendingNetworksService.ts","store/multiInstanceStores/SingleCTokenStore.ts","store/multiInstanceStores/SingleLNStore.ts","store/LendingNetworksStore.ts","store/ModalsStore.ts","services/contractsIntegration/CompoundLensService/CompoundLensService.ts","constants/chainConstants.ts","store/SystemStore.ts","store/storesInitialization.ts","AppWrapper.tsx","services/Services.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStores","React","useContext","MobXProviderContext","useCryptoWalletIntegrationStore","cryptoWalletIntegrationStore","useAccountStore","accountStore","useLendingNetworksStore","lendingNetworksStore","useSystemStore","systemStore","useModalsStore","modalsStore","useActiveLendingNetworkStore","activeLNStore","useStyles","makeStyles","theme","contentContainer","margin","paddingRight","paddingLeft","maxWidth","ContentContainer","memo","props","children","rest","classes","className","BRAND_MAIN_COLOR","AFFIRMATIVE_GREEN_COLOR","BACKGROUND_DARK_COLOR","BACKGROUND_LIGHT_COLOR","TEXT_ON_DARK","TEXT_ON_LIGHT","GRAYISH_TEXT","ZERO_ADDRESS","NATIVE_COIN_ASSET_ADDRESS","LENDING_NETWORK_NAMES","LendingNetworksParam","name","lnHomePage","id","unitrollerAddress","maximillionAddress","chainId","assets","symbol","address","decimals","isNativeCoin","distributionAssetParameters","header","padding","backgroundColor","palette","background","default","minHeight","alignedRow","display","flexDirection","alignItems","logoLink","minWidth","height","backgroundRepeat","backgroundSize","transition","justifyContent","transform","logoSpan","width","backgroundImage","process","logoLinkText","fontWeight","color","Color","rgb","primary","main","darken","hex","textDecoration","fontSize","textAlign","borderColor","lnLinkText","actions","headerButtonLike","lighten","border","borderRadius","light","tokenBalance","cursor","letterSpacing","textTransform","account","marginLeft","tokenIcon","iconComp","icon","flexShrink","backgroundPosition","logoLetter","letterO","letterL","letterA","Header","observer","cryptoWalletConnectionStore","activeLn","walletText","isConnectedToWallet","mainAddress","substring","length","hasActiveLn","activeLnName","linkToLnPage","onlyIncentiveTokenBalance","compBalanceUnits","balanceToShow","useMemo","nativeCoinBalance","Grid","container","direction","style","item","xs","sm","to","target","href","fontFamily","Hidden","xsDown","clsx","onClick","showIncentiveModal","toFixed","toLocaleString","askToConnect","useCommonClasses","mobileHide","breakpoints","down","mobileOnly","up","label","fontStyle","textRight","textCenter","panel","boxShadow","Panel","token","TokenIcon","extraClasses","commonClasses","classesForSpan","safeExtraClasses","a","textRransform","asset","flexWrap","borderBottom","borderLeft","list_icon","identity","identity_icon","marginRight","identity_balance","flex","overflow","balance","whiteSpace","textOverflow","balanceSubtitle","marginTop","AssetPanelRow","marketType","assetSummary","onCollateralableChange","onAssetSelected","cTokenStore","baseAssetAddress","activeLN","cTokensStores","find","underlyingAssetAddress","useCTokenStoreByBaseAsset","isCollaterable","borrowApy","borrowApyInPercentages","supplyApy","supplyApyInPercentages","usdCashLiquidity","cTokenCashInUSD","walletBalanceInUnits","accountUnderlyingBalanceInUnits","liquidityUSDInScale","amount","scaleUnit","scaleDivider","units","amountToSumInScale","supplyInUnits","accountSupplyInUnits","borrowInUnits","accountBorrowInUnits","isSupply","ApyToDisplay","unitsToDisplay","unitsText","showActionUnits","onCollateralSwitch","useCallback","event","checked","onAssetInteractionRequested","hasBeenInitialized","console","log","numericalDisplay","value","parseFloat","undefined","maximumFractionDigits","collateralLiquidityOrLoading","collateralOrLiquidity","Switch","onChange","e","stopPropagation","Skeleton","animation","panelHeader","flexFlow","zeroMargin","assetsList","panelLabels","MarketsPanel","assetsInMarket","userBalancesInUnits","marketsUserIsIn","map","unitsInWallet","interfaceContainer","row","marketsColumn","flexBasis","MarketsSection","useState","error","lnStore","newCollaterableValue","showCollateralModal","onSupplyAssetSelected","cTokenMeta","assetParameters","baseAssetsToCTokenStore","get","assetsParams","assetParam","showSupplyModal","onBorrowAssetSelected","showBorrowModal","Typography","symbolsToUnits","standardSumFormat","n","AnimatedNumberText","formatValue","headline","textLeft","supply","borrow","BalanceHeadline","titleText","sum","alignLeft","netApyWrapper","position","left","netApy","netApyDescription","top","right","bottom","netApyDescription_Active","label_active","headline_inactive","headline_active","NetApy","totalYearlyChangeUsd","hoverTargetRef","useRef","isHovering","useHover","isEarning","apyDirectionMessage","earnedOrPaid","netApyStringified","totalYearlyChangeUsdStringified","labelText","headlineText","ref","viewBox","d","stroke","fill","content","alignMiddle","column","BalancesAndApy","borrowBalanceUsd","supplyBalanceUsd","smUp","limitBar","limitBarLabel","progressBarWrapper","progress_bar_green","progress","dark_clear","thin","progress_bar_percent_label","p","float","small","progress_bar_hover_space","BorrowLimitBar","usedBorrowPercentage","collateralPotentialInUSD","role","aria-valuemin","aria-valuemax","balancesTotal","BalancesTotal","hero","marginBottom","BorrowOverview","totalAccountSupplyBalanceUsd","totalAccountBorrowBalanceUsd","MainLendingNetworkTab","ModalActionButton","text","disabled","Button","variant","fullWidth","rateRow","bottomBorder","heavyBottomBorder","symbolIcon","valueText","BaseRates","title","subTitle","rateRows","index","isLast","predictedValue","tokenSymbol","displayPredictedValues","valueSuffix","ActionRates","actionName","assetSymbol","assetSupplyApy","distributionAssetSymbol","distributionAssetApy","BorrowLimitRates","limitOrBalance","borrowLimitUsd","borrowLimitUsedPercentage","predictedBorrowLimitUsd","predictedBorrowLimitPercentage","note","TOP_DISTANCE_REM","modal","txWaitingPanel","upperRightCorner","upperLeftCorner","messageContainer","paddingBottom","explorerLink","TxWaitingModal","open","closeModal","txWaitingStage","txHash","explorerUrlBaseForTx","explorerName","useTheme","isWaitingForUserApproval","message","Modal","onBackdropClick","Fade","in","IconButton","type","rel","marketInteractionPanel","tabBody","paddingTop","mix","MarketInteractionModal","messageOrInput","inputActionButtonText","onInputActionButtonPressed","showInputActionButton","inputActionButtonActive","actionAssetSymbol","actionAssetName","currentTabIndex","onTabIndexChange","tab0Title","tab1Title","actionApy","distributionApy","showBorrowLimit","showPredictedBorrowLimits","currentBorrowLimit","borrowLimitAfterChange","usedBorrowLimitPercentage","usedBorrowLimitPercentageAfterChange","borrowLimitNote","actionButtonActive","actionButtonText","actionButtonDisabledText","actionButtonOnClick","assetExplorerLink","footerMessagesPayloads","activeTxHash","waitingForUserApproval","waitingForTxConfirmation","isBorrow","maxHeight","JSON_RPC_ERROR_CODES","userRejectedRequest","unauthorized","unsupportedMethod","useTxWaitingStateExplicit","setActiveTxHash","setWaitingForUserApproval","setWaitingForTxConfirmation","useTxWaitingLogicExplicit","txCreatingFunction","closeModalOnSuccess","contractTx","hash","wait","receipt","code","useMarketInteractionModalBase","assetAddressToParamsMap","assetBaseAddressToParams","Map","assetBaseAddress","assetParams","nativeCoinSymbol","cToken","cTokenAddress","supplyTokenAddress","supplyTokenSymbol","supplyTokenName","distributionTokenSymbol","distributionAssetParams","walletBalance","hasWalletBalance","needToApprove","pricePerUnitUsd","underlyingUsdPrice","collateralFactorInUnits","currentLiquidityCashUsd","liquidityUsd","priceCalculationDecimals","currentLiquidityUsd","hasAvailableLiquidity","liquidityInAssetUnits","useMarketInteractionModalTabsState","activeTabIndex","setActiveTabIndex","useMarketInteractionActiveTabState","useOnEnableClicked","wrappedEnableTx","approveErc20Usage","ethers","constants","MaxUint256","useCalculateChangeInBorrowLimits","currentBorrowLimitUsd","actionInUnits","unitPriceInUsd","pricePrecision","priceSensitivizer","buildSensitivizer","actionEffectInUsd","collateralValueOfActionEffect","actionLeadsToShortfall","useCalculateChangeInBorrowBalance","borrowBalanceAfterChange","Math","abs","sensitivity","price","sensitivizePrice","largeIcon","fadeIn","MainModalMessage","subMessage","SupplyModal","isWithdraw","onEnableClicked","isAskingToWithdrawAll","setIsAskingToWithdrawAll","supplyInputValue","setSupplyInputValue","withdrawInputValue","setWithdrawInputValue","useEffect","clearStateBeforeClose","inputComponent","Input","inputProps","appearance","sanitizeNumericInput","hasApprovedERC20","hasAnyAllowance","currentSupplyBalanceInUnits","currentSupplyBalanceInOTokens","accountSupplyBalanceUsd","accountSupplyInOTokensRaw","BigNumber","from","hasSupplyBalance","hasBorrowBalance","onAskToWithdrawAllToggleClicked","createWithdrawAllTx","withdrawFromMarketByOTokens","underlyingDecimals","toString","wrappedSupplyTx","supplyToMarket","utils","parseUnits","wrappedWithdrawTx","withdrawFromMarket","wrappedWithdrawAllTx","onSupplyClicked","onWithdrawClicked","supplyTokenExplorerLink","explorerBaseAddressUrl","messageOrInputComponent","footerMessagePayloads","tokenAmount","canSupply","canWithdraw","commonPayloadPart","explorerBaseTxUrl","marketModalStatePayloadForSupplyTab","isSupplyInputValueValid","isOfferingMoreThanWalletBalance","actionButtonTextForSupply","activeButtonActive","actionButtonCbForSupply","reasonForNotBeingAbleToWithdraw","marketModalStatePayloadForWithdrawTab","withdrawButtonActive","withdrawInputValid","isRequestingMoreThanSuppliedBalance","statePerTabPayload","marketModalStatePayload","stringValueOfNumericInput","safeString","charAt","parsedAsFloat","isNaN","BorrowModal","isRepay","isRepayingMax","setIsRepayingMax","borrowInputValue","setBorrowInputValue","repayInputValue","setRepayInputValue","currentBorrowBalance","needsToButNotYetApproved","repayAmount","wrappedBorrowTx","borrowFromMarket","wrappedRepayTx","repayToMarket","onBorrowClicked","onBorrowMaxSafeClicked","amountLeftToSafe","safeAmountInUsd","safeBorrowInUnits","getUnitsForUsdValue","onRepayClicked","cTokenCashInUnits","cTokenCashInUsd","repayIsZero","hasEnoughToRepayAll","onSetRepayToMaxClicked","maxPossibleBorrow","max","marketModalStatePayloadForBorrowTab","isRequestingMoreThanCanBorrow","isRequestingMoreThanMarketLiquidity","reasonForNotBeingAbleToBorrow","SAFE_BORROW_FACTOR","marketModalStatePayloadForRepayTab","isOfferingMoreThanHasBorrowed","canRepay","actionButtonCbForRepay","reasonForNotBeingAbleToRepay","actionButtonTextForRepay","collateralInteractionPanel","CollateralModal","ConnectedCollateralModal","underlyingName","underlyingSymbol","useCollateralModalState","effectiveUnits","wrappedTxBuildingFunction","useTxWaitingLogic","enterMarketByCTokenAddress","exitMarketByCTokenAddress","onActionButtonClicked","balanceColumn","amountTitle","heroToken","IncentiveModal","incentiveTokenName","incentiveTokenSymbol","incentiveTokenAddress","balanceInUnits","unclaimedInUnits","canClaim","onClaim","whyCannotClaim","showNativeCoinBalance","nativeCoinName","nativeCoinBalanceInUnits","ConnectedIncentiveModal","compAllocatedUnits","useIncentiveModalState","onClaimClicked","wrappedClaimTx","claimLnIncentiveToken","useOnClaimLnIncentive","root","LendingNetworkPage","networkId","useRouteMatch","path","url","useHistory","setActiveLn","isLoading","exact","render","isSupplyModalActive","hideSupplyModal","isBorrowModalActive","hideBorrowModal","isCollateralModalActive","hideCollateralModal","hideIncentiveModal","isInventiveModalActive","card","cardHeader","alphaMessage","userSelect","lnAsset","zoom","NetworkListItem","onViewNetwork","networkGist","Card","CardContent","CardActions","spacing","NetworksList","lendingNetworksGists","network","mainMessage","AllNetworksPage","history","activeLendingNetworkId","targetUrl","push","align","allLNGists","Main","component","match","params","network_id","App","lendingNetworkParameters","basename","baseTheme","responsiveFontSizes","createMuiTheme","secondary","CryptoWalletConnectionService","ethereum","web3","hasEthereumProvider","hasEventsSupport","isMetamaskInstalled","isSemiCompliantEthereumProviderInstalled","this","isMetaMask","Web3","onFunction","on","request","method","selectedAddress","networkVersion","eth","getChainId","getBalance","balanceInDecimal","parseInt","fromWei","getAccounts","accounts","getBlockNumber","Error","listener","off","READ_ONLY_ETHEREUM_ENDPOINT","REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT","IS_DEV","REACT_APP_USE_PROD","fetchLocalJson","localPath","fetch","fetchRes","json","LendingNetworksService","lnParams","fetchDevNetworkGist","devNetworksgist","participatingSuppliers","tvl","LocalNetworkDevLNAddresses","unitroller","maxmimilion","LocalNetworkDevTokensAddresses","assetInMarket","assetAddress","assetAddressToUse","etheresStructResponseToObject","ethersStructResponse","obj","key","Number","UniswapAnchoredViewService","uniswapAnchoredViewAddress","signerOrProvider","uniswapAnchoredViewContract","Contract","UniswapAnchoredViewJson","abi","getTokenConfigBySymbol","getSignerOrProvider","ethereumProvider","signer","providers","Web3Provider","JsonRpcProvider","getSigner","getAddress","catch","ComptrollerService","unitrollerProxyContract","ComptrollerJson","after","attach","toJS","getAllMarkets","markets","cTokens","enterMarkets","exitMarket","Erc20Service","erc20Address","erc20Contract","ERC20Json","balanceOf","ownerAddress","spenderAddress","allowance","approve","Erc20BuilderService","CErc20Service","cErc20Contract","CErc20Json","mint","redeemUnderlying","oTokensAmount","redeem","repayBorrow","CEtherService","cEtherAddress","cEther","maximillion","CEtherJson","MaximillionJson","borrowerAddress","formatEther","repayBehalf","CTokensBuilderService","cErc20Address","FUSE_COIN_DETAILS","localTokensAddressesJson","NATIVE_COIN_DETAILS_PER_CHAIN","1337","31337","3","122","FUSE_BLOCK_PER_YEAR","FUSE_BLOCK_PER_DAY","DAILY_BLOCK_PER_CHAIN","1","ROPSTEN_BLOCK_PER_DAY","CryptoWalletConnectionStore","action","cryptoWalletConnectionService","addressCheckingInterval","reactionToWalletConnection","makeObservable","getEthereumProvider","reaction","isConnected","readInformationFromConnectedWallet","fireImmediately","onMainAddressChange","setMainAddress","onChainIdChange","setChainId","setInterval","refreshState","blocksPerYear","didUserApproveDappInThePast","walletConnectionRequestApproved","requestConnectionPermission","permissionGranted","setWalletConnectionRequestApproved","readChainId","readMainAddress","walletAddress","readEthereumBalance","setNativeCoinBalance","requestApproved","observable","computed","AccountStore","erc20BuilderService","cTokensBuilderService","addressChangeReaction","activeLNStoreId","setDoneLoading","reactToConnectedChainOrAddressChanged","Array","tokensWithBalances","entries","reduce","cur","metaWithBalances","promievent","resetTxIndicators","setTxPending","res","setTxCanceled","spender","buildErc20Service","contractInteraction","manuallyUpdateAllStores","cTokenService","buildCEtherService","buildCErc20Service","withdraw","withdrawByOTokens","cNativeService","repayBorrowWithMaximillion","contractTransaction","currentAddress","activeLnStore","refreshAccountListeners","refreshDataForAccount","failLoadingProcess","refreshFromOutside","manuallyReadAccountData","accountAddress","clearAllAccountData","clearTokenBalancesMap","cancelAllCurrentSubscriptions","setErrorLoading","setTxHadError","doneLoading","errorLoading","txPending","txCanceled","txHadError","clear","tokensWithBalancesMap","replace","EMPTY_ASSET_IN_MARKET_PARAMETERS","SingleCTokenStore","assetInMarketParams","cTokenName","cTokenSymbol","cTokenDecimals","exchangeRateCurrent","supplyRatePerBlock","borrowRatePerBlock","totalBorrows","totalReserves","totalSupply","totalCash","reserveFactorMantissa","collateralFactorMantissa","isListed","borrowBalanceCurrent","balanceOfUnderlying","tokenAllowance","underlyingPrice","cTokenBalances","cTokenUnderlyingPrice","batchUpdateFromCTokenMeta","setIsCollaterable","formatUnits","totalSupplyInUnits","totalBorrowInUnits","blockPerYear","supplyRatePerBlockInUnits","borrowRatePerBlockInUnits","supplyApyInUnits","borrowApyInUnits","accountBorrowBalanceUsd","totalYearlyGainsUsd","totalYearlyLossesUsd","gt","usdValue","totalSupplyBalanceUsd","SingleLNStore","lendingNetworksService","lendingNetworkGist","comptrollerService","set","liquidity","totalSupplyUsd","totalAccountSupplyUsd","totalBorrowUsd","totalBorrowBalanceUsd","totalAccountBorrowUsd","totalYearlyGains","totalLossesGains","totalYearlyChanges","totalYearlyChange","potentialCollateral","usedBorrowFraction","distributionAssetRatePerBlock","incentiveBalance","incentiveAllocated","_priceCalculationDecimals","readDataForAccount","refreshLNNetworkState","readAndSetCompBalanceMeta","readNSetMarkets","batchReadAndUpdateCTokensStores","readNSetAccountLimits","JSON","stringify","fetchLendingNetworkLiveState","liveState","setLiveState","assetToCTokenStore","has","tx","claimIncentiveFromAllMarkets","comptrollerProxy","compoundLensServiceInitialized","compoundLensService","getAccountLimits","accountLimits","setAccountLimits","warn","replaceMarkets","fetchCompBalanceMetadataExt","compBalanceMetadataExt","setCompBalanceMeta","cTokenMarkets","allMarkets","cTokenMetadataAll","cTokenMetas","cTokenBalancesAll","cTokenUnderlyingPriceAll","cTokenUnderlyingPricesAll","i","cTokenUnderlyingPrices","matchingSTokenStore","includes","updateWithFreshState","marketIsColleterable","updateIsInCollaterable","lnLiveState","compBalance","allocated","shortfall","marketsIn","newMarkets","usdLiquidity","LendingNetworksStore","initializeStore","lendingNetworksStores","lnGist","l","setLoadingState","fetchAllLnParameters","buildStoresForEachLn","initializeLNStores","fetchALlLendingNetworksParameters","lnParameters","setLendingNetworkParameters","lnStores","buildLNStore","setLendingNetworksStores","forEach","initialize","gist","lnIdAddress","setActiveLendingNetworkId","lendingNetworkStores","lendingNetworkGists","ModalsStore","currentModalId","supplyAssetBaseAddress","showAssetActionModal","borrowAssetBaseAddress","setCurrentModalId","supplyModalId","setAssetBaseAddress","CompoundLensService","compoundLensAddress","compoundLensContract","CompoundLensJson","newCompoundLensAddress","isInitialized","callStatic","cTokenMetadata","cTokenAddresses","rawMetas","rawMeta","comptrollerAddress","rawAccountLimits","compToken","votes","getCompBalanceMetadataExt","rawCompBalanceMetaExt","LOCAL_CHAINS","LIVE_CHAINS","LIVE_CHAIN_CONSTANTS","explorerUrls","baseUrl","blockUrlBase","addressUrlBase","txUrlBase","SystemStore","chainIdChangeReaction","reactToConnectedChainChanged","chainCompoundLensAddress","getChainCompoundLensAddress","setCompoundLensAddress","chainExplorerBaseUrls","getChainExplorerUrls","setExplorerAddresses","nativeCoinDecimals","setNativeCoinDetails","ChainAddresses","CompoundLens","explorerAddresses","explorerBaseUrl","explorerBaseBlockUrl","configure","enforceActions","window","services","addresses","contractsAddresses","cryptoWalletIntegrationService","uniswapAnchoredViewService","UniswapAnchoredView","erc20ServiceBuilder","cTokenServiceBuilder","buildServices","lnServices","comptrollerLiveService","buildLNServices","stores","getStores","AppWrapper","StylesProvider","injectFirst","ThemeProvider","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7697c58a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from \"react\";\nimport { MobXProviderContext } from \"mobx-react\";\nimport { IStores } from \"./stores\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { TLNContractsAddresses } from \"../services/Services\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { SingleCTokenStore } from \"./multiInstanceStores/SingleCTokenStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport function useStores(): IStores {\n  // @ts-ignore\n  return React.useContext(MobXProviderContext);\n}\n\nexport function useCryptoWalletIntegrationStore(): CryptoWalletConnectionStore {\n  return useStores().cryptoWalletIntegrationStore;\n}\n\nexport function useAccountStore(): AccountStore {\n  return useStores().accountStore;\n}\n\nexport function useLendingNetworksStore(): LendingNetworksStore {\n  return useStores().lendingNetworksStore;\n}\n\nexport function useSystemStore(): SystemStore {\n  return useStores().systemStore;\n}\n\nexport function useModalsStore(): ModalsStore {\n  return useStores().modalsStore;\n}\n\nexport function useActiveLendingNetworkStore(): SingleLNStore | undefined {\n  return useStores().lendingNetworksStore.activeLNStore;\n}\n\nexport function useCTokenStoreByBaseAsset(\n  baseAssetAddress: string\n): SingleCTokenStore | undefined {\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLN = lendingNetworksStore.activeLNStore;\n  const cTokenStore = activeLN?.cTokensStores.find(\n    (cTokenStore) => cTokenStore.underlyingAssetAddress === baseAssetAddress\n  );\n  return cTokenStore;\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { DetailedHTMLProps } from \"react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    margin: \"0 auto\",\n    paddingRight: \"1.33rem\",\n    paddingLeft: \"1.33rem\",\n    maxWidth: \"82rem\",\n  },\n}));\n\nexport const ContentContainer = React.memo<\n  IProps &\n    DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>((props) => {\n  const { children, ...rest } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.contentContainer} {...rest}>\n      {children}\n    </div>\n  );\n});\n","// export const BRAND_MAIN_COLOR = \"#00D395\";\n// export const BRAND_MAIN_COLOR = \"#00D395\";\n// export const BRAND_MAIN_COLOR = \"#31E5A6\";\nexport const BRAND_MAIN_COLOR = \"#83dbe3\";\n// export const BRAND_MAIN_COLOR = \"#ff8906\";\n\n// export const AFFIRMATIVE_GREEN_COLOR = \"#00D395\";\n// export const DEAFFIRMATIVE_RED_COLOR = \"#f96d6d\";\nexport const AFFIRMATIVE_GREEN_COLOR = \"#31E5A6\";\nexport const DEAFFIRMATIVE_RED_COLOR = \"#E53170\";\n\n// export const BACKGROUND_DARK_COLOR = \"#0f0e17\";\nexport const BACKGROUND_DARK_COLOR = \"#211f33\";\nexport const BACKGROUND_LIGHT_COLOR = \"#fffefe\";\n\nexport const TEXT_ON_DARK = \"#fffffe\";\nexport const TEXT_ON_LIGHT = \"#2e2f3e\";\n\nexport const GRAYISH_TEXT = \"#AAB8C1\";\n","export const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const NATIVE_COIN_ASSET_ADDRESS =\n  \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n","import { ILendingNetworkParameters } from \"./ILendingNetworksService\";\nimport { ZERO_ADDRESS } from \"../../constants/constantAddresses\";\n\nconst wrappedFuseAddressOnRopsten =\n  \"0x6b778cA46F05ac6BfEBC7c3C19E079EC16f72b33\";\n\nexport const FUSE_ON_ROPSTEN: ILendingNetworkParameters = {\n  name: \"Fuse Ropsten\",\n  lnHomePage: \"https://www.fuse.io\",\n  id: \"0x9c518a98b22B3B81ED063cf4E604CeAb8c3a1b7B\",\n  unitrollerAddress: \"0xf7772Fb332032f042fE61604E5395893A62A1f24\",\n  maximillionAddress: \"0x9C8B6ce3a955437a9546B8bb00899E6A82a91c97\",\n  chainId: \"3\",\n  assets: [\n    {\n      symbol: \"WBTC\",\n      name: \"Wrapped BTC\",\n      address: \"0xA5a9320AE361C25C39681F9D86F6018ee9236523\",\n      // decimals: 8, DEV_NOTE : Suppose to be 8, uncomment when deploying fix\n      decimals: 8,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"ETH\",\n      name: \"Ether\",\n      address: ZERO_ADDRESS,\n      decimals: 18,\n      isNativeCoin: true,\n    },\n    {\n      symbol: \"USDC\",\n      name: \"USD Coin\",\n      address: \"0x180F8670Dd6367C79d08E1d3017F7Cd175dDa163\",\n      // decimals: 6,  DEV_NOTE : Suppose to be 6, uncomment when deploying fix\n      decimals: 6,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"WFUSE\",\n      name: \"Wrapped Fuse\",\n      address: wrappedFuseAddressOnRopsten,\n      decimals: 18,\n      isNativeCoin: false,\n    },\n  ],\n  distributionAssetParameters: {\n    symbol: \"WFUSE\",\n    name: \"Wrapped Fuse\",\n    address: wrappedFuseAddressOnRopsten,\n    decimals: 18,\n    isNativeCoin: false,\n  },\n};\n\nexport const LENDING_NETWORK_NAMES = {\n  fuseAlpha: \"Fuse Alpha\",\n};\n\nexport const FUSE_ALPHA: ILendingNetworkParameters = {\n  name: LENDING_NETWORK_NAMES.fuseAlpha,\n  lnHomePage: \"https://www.fuse.io\",\n  id: \"0x2cBBD5125087eB697a6A44098323204a32dFBed6\",\n  unitrollerAddress: \"0xCf8a978E53e057f493a965b8F5a5E7aF34DDcCe4\",\n  maximillionAddress: \"0x0F97b83539fF81a3015b18D37667e8c00d4284c6\",\n  chainId: \"122\",\n  assets: [\n    {\n      symbol: \"WBTC\",\n      name: \"Wrapped BTC\",\n      address: \"0x33284f95ccb7B948d9D352e1439561CF83d8d00d\",\n      decimals: 8,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"WETH\",\n      name: \"Wrapped Ether\",\n      address: \"0xa722c13135930332Eb3d749B2F0906559D2C5b99\",\n      decimals: 18,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"USDC\",\n      name: \"USD Coin\",\n      address: \"0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5\",\n      decimals: 6,\n      isNativeCoin: false,\n    },\n    {\n      symbol: \"FUSE\",\n      name: \"Fuse\",\n      address: ZERO_ADDRESS,\n      decimals: 18,\n      isNativeCoin: true,\n    },\n  ],\n  distributionAssetParameters: {\n    symbol: \"WFUSE\",\n    name: \"Wrapped Fuse\",\n    address: \"0x0BE9e53fd7EDaC9F859882AfdDa116645287C629\",\n    decimals: 18,\n    isNativeCoin: false,\n  },\n};\n\nexport const LendingNetworksParam: ILendingNetworkParameters[] = [\n  // FUSE_ON_ROPSTEN,\n  FUSE_ALPHA,\n];\n","import { makeStyles, Typography, Grid, Hidden } from \"@material-ui/core\";\nimport React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { ContentContainer } from \"../structure/ContentContainer\";\nimport { Link } from \"react-router-dom\";\nimport Color from \"color\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BACKGROUND_LIGHT_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_DARK,\n} from \"../../theme/themeConstants\";\nimport { LENDING_NETWORK_NAMES } from \"../../services/lendingNetworksService/lendingNetworksParams\";\n\ninterface IProps {}\n\nconst TITLE_HEIGHT_REM = 2;\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    padding: \"1rem 0\",\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    minHeight: \"80px\",\n  },\n  alignedRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  logoLink: {\n    minWidth: \"3rem\",\n    // minWidth: 80,\n    // height: 27,\n    // height: theme.typography.h5.fontSize,\n    height: `${TITLE_HEIGHT_REM}rem`,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/assets/images/ola/ola_symbol_clear.png)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n\n    // border: \"1px solid blue\",\n\n    transition: \"200ms\",\n\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n\n    \"&:hover\": {\n      // height: theme.typography.h5.fontSize,\n      // minWidth: \"3.5rem\",\n      // height: \"2.4rem\",\n      transform: \"scale(1.1)\",\n      // opacity: 0.9,\n      // filter: \"brightness(105%)\",\n    },\n  },\n  logoSpan: {\n    // height: `${TITLE_HEIGHT_REM}rem`,\n    height: `100%`,\n    // width: `${TITLE_HEIGHT_REM}rem`,\n    width: `100%`,\n    backgroundImage: `url(${process.env.PUBLIC_URL}/assets/images/ola/ola_symbol_clear.png)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n  },\n\n  // Placeholder until we will have our logo ready\n  logoLinkText: {\n    // minWidth: 127,\n    height: 27,\n    fontWeight: \"bold\",\n    // color: \"white\",\n    color: Color.rgb(theme.palette.primary.main).darken(0.1).hex(),\n    textDecoration: \"none\",\n    fontSize: 20,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n\n    // fill: \"transparent\",\n\n    // background: `linear-gradient to bottom, ${theme.palette.primary.main} 0%, ${theme.palette.primary.main} 100%`,\n    // background: \"linear-gradient to bottom, red 0%, red 1000%\",\n    textAlign: \"center\",\n    // stroke: \"red\",\n    // strokeWidth: \"12px\",\n    // fill: \"white\",\n    transition: \"200ms\",\n\n    borderColor: theme.palette.primary.main,\n    // paddingRight: \"0.5rem\",\n    // paddingLeft: \"0.5rem\",\n\n    \"&:hover\": {\n      // color: theme.palette.primary.light,\n      // color: Color.rgb(theme.palette.primary.main).lighten(0.25).hex(),\n      fontSize: 21,\n      // paddingBottom: \"5px\",\n      // paddingBottom: \"2rem\",\n      // borderBottom: \"1px solid\",\n      // borderTop: \"1px solid\",\n      // opacity: 0.8,\n      // stroke: \"black\",\n      // strokeWidth: \"12px\",\n      // textShadow: `1px 0 0 ${GRAYISH_TEXT}, 0 1px 0 ${GRAYISH_TEXT}, 1px 0 0 ${GRAYISH_TEXT}, 0 -1px 0 ${GRAYISH_TEXT}`,\n      // borderRight: `1px solid ${Color.rgb(theme.palette.primary.main)\n      //   .lighten(0.3)\n      //   .hex()}`,\n      // borderLeft: `1px solid ${Color.rgb(theme.palette.primary.main)\n      //   .lighten(0.3)\n      //   .hex()}`,\n      // borderRadius: \"5%\",\n    },\n  },\n  lnLinkText: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n\n    // border: \"1px solid red\",\n    minWidth: 127,\n    // height: 27,\n    height: `${TITLE_HEIGHT_REM}rem`,\n    // color: \"rgba(256,256,256,0.5)\",\n    color: TEXT_ON_DARK,\n    // color: theme.palette.primary.dark,\n    textDecoration: \"none\",\n    fontSize: `1.2rem`,\n    // backgroundImage: `url(${process.env.PUBLIC_URL}/images/compound-logo.svg)`,\n    // backgroundRepeat: \"no-repeat\",\n    // backgroundSize: \"contain\",\n    // backgroundColor: \"transparent\",\n    textAlign: \"center\",\n    transition: \"200ms\",\n\n    \"&:hover\": {\n      fontSize: 21,\n      // paddingBottom: \"2rem\",\n      // borderBottom: \"1px solid\",\n      // borderTop: \"1px solid\",\n      // color: \"white\",\n      // borderRight: \"1px solid white\",\n      // borderLeft: \"1px solid white\",\n    },\n  },\n  actions: {\n    minHeight: \"3rem\",\n    justifyContent: \"flex-end\",\n    // color: \"#CFD8DC\",\n    color: TEXT_ON_DARK,\n  },\n  headerButtonLike: {\n    // border: `5px solid ${Color.rgb(theme.palette.background.default)\n    //   .lighten(0.9)\n    //   .hex()}`,\n    backgroundColor: Color.rgb(theme.palette.background.default)\n      .lighten(0.9)\n      .hex(),\n    border: `3px solid ${theme.palette.background.default}`,\n    borderRadius: \"5%\",\n    \"&:hover\": {\n      borderColor: Color.rgb(theme.palette.background.default)\n        .lighten(0.9)\n        .hex(),\n      backgroundColor: theme.palette.background.default,\n      color: theme.palette.primary.light,\n      // background: \"#1d2b38\",\n      // background: Color.rgb(theme.palette.background.default)\n      //   .lighten(0.9)\n      //   .hex(),\n    },\n  },\n  tokenBalance: {\n    // backgroundColor: \"#f25f4c\",\n    // border: \"1px solid #fffffe\",\n\n    // background: \"#141E27\",\n    // backgroundColor: Color.rgb(theme.palette.background.default)\n    //   .darken(0.1)\n    //   .hex(),\n\n    // borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.43rem 0.665rem\",\n    display: \"flex\",\n    alignItems: \"center\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  account: {\n    // background: \"#141E27\",\n    borderRadius: \"3px\",\n    cursor: \"pointer\",\n    padding: \"0.665rem\",\n    marginLeft: \"1.33rem\",\n    letterSpacing: \"1px\",\n    fontSize: \"12px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n  },\n\n  // DEV_NOTE : All of these 'icon' classes can be moved to a common file\n  tokenIcon: {\n    marginLeft: \"0.25rem\",\n    height: \"1.25rem\",\n    width: \"1.25rem\",\n    minHeight: \"1.25rem\",\n    minWidth: \"1.25rem\",\n  },\n  // TODO : CRITICAL : Make this generic\n  iconComp: {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/tokens/asset_WFUSE.svg)`,\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n  },\n\n  logoLetter: {\n    transition: \"200ms\",\n  },\n  letterO: {\n    // margin: \"0.3rem\",\n    color: \"#feb276\",\n    // stroke: \"2px #feb276\",\n    // textShadow:\n    //   \"-2px -2px 0 #feb276, 2px -2px 0 #feb276, -2px 2px 0 #feb276, 2px 2px #feb276\",\n    // textShadow: `-1px -1px 0 ${BACKGROUND_LIGHT_COLOR}, 1px -1px 0 ${BACKGROUND_LIGHT_COLOR}, -1px 1px 0 ${BACKGROUND_LIGHT_COLOR}, 1px 1px 0 ${BACKGROUND_LIGHT_COLOR}`,\n  },\n  letterL: {\n    color: \"#80dae3\",\n    // textShadow:\n    //   \"-2px -2px 0 #80dae3, 2px -2px 0 #80dae3, -2px 2px 0 #80dae3, 2px 2px #80dae3\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px ${BACKGROUND_DARK_COLOR}`,\n  },\n  letterA: {\n    color: \"#5053d4\",\n    // textShadow:\n    //   \"-2px -2px 0 #5053d4, 2px -2px 0 #5053d4, -2px 2px 0 #5053d4, 2px 2px #5053d4\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px ${BACKGROUND_DARK_COLOR}`,\n  },\n}));\n\nexport const Header = observer<React.FunctionComponent<IProps>>((props) => {\n  const classes = useStyles();\n\n  const cryptoWalletConnectionStore = useCryptoWalletIntegrationStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLn = lendingNetworksStore.activeLNStore;\n\n  const walletText = cryptoWalletConnectionStore.isConnectedToWallet\n    ? summarizeAddress(cryptoWalletConnectionStore.mainAddress)\n    : \"Connect\";\n\n  const hasActiveLn = !!activeLn;\n  const activeLnName = activeLn?.name;\n  const linkToLnPage = activeLn?.lnHomePage || \"/\";\n  const onlyIncentiveTokenBalance = activeLn?.compBalanceUnits || 0;\n  // DEV_NOTE : This is a quick-n-dirty patch to display both wFuse (incentive) and fuse together.\n  const balanceToShow = useMemo(() => {\n    if (activeLnName === LENDING_NETWORK_NAMES.fuseAlpha) {\n      return (\n        cryptoWalletConnectionStore.nativeCoinBalance +\n        onlyIncentiveTokenBalance\n      );\n    } else {\n      return onlyIncentiveTokenBalance;\n    }\n  }, [\n    activeLnName,\n    cryptoWalletConnectionStore.nativeCoinBalance,\n    onlyIncentiveTokenBalance,\n  ]);\n\n  return (\n    <header className={classes.header}>\n      <ContentContainer>\n        <Grid\n          container\n          direction=\"row\"\n          alignItems=\"center\"\n          style={\n            {\n              // alignItems: \"center\",\n              // alignContent: \"center\",\n            }\n          }\n        >\n          {/* Logo */}\n          <Grid item xs={6} sm={3} className={classes.alignedRow}>\n            {/* TODO : Add Project logo here */}\n            <Link className={classes.logoLink} to=\"/\">\n              <div className={classes.logoSpan} />\n            </Link>\n            {/*<Link className={classes.logoLinkText} to=\"/\">*/}\n            {/*  <span className={clsx([classes.letterO, classes.logoLetter])}>*/}\n            {/*    O*/}\n            {/*  </span>*/}\n            {/*  <span className={clsx([classes.letterL, classes.logoLetter])}>*/}\n            {/*    L*/}\n            {/*  </span>*/}\n            {/*  <span className={clsx([classes.letterA, classes.logoLetter])}>*/}\n            {/*    A*/}\n            {/*  </span>*/}\n            {/*</Link>*/}\n\n            {/* TODO : QUICK-HACK : ORGANIZE THIS*/}\n            {activeLnName && (\n              <a\n                className={classes.lnLinkText}\n                target=\"_blank\"\n                href={linkToLnPage}\n                style={{\n                  fontFamily: \"Gotham A, Gotham B, sans-serif\",\n                }}\n              >\n                {activeLnName}\n              </a>\n            )}\n            {/*{!activeLnName && (*/}\n            {/*  <span className={classes.lnLinkText}>All Networks</span>*/}\n            {/*)}*/}\n          </Grid>\n          {/* Empty spaces */}\n          {/* DEV_NOTE : Place holder for the navigations */}\n          <Hidden xsDown>\n            <Grid item xs={6}></Grid>\n          </Hidden>\n\n          <Grid\n            className={clsx(classes.alignedRow, classes.actions)}\n            item\n            xs={12}\n            sm={3}\n          >\n            {/* Token balance */}\n            {hasActiveLn && (\n              <div\n                className={clsx([\n                  classes.headerButtonLike,\n                  classes.tokenBalance,\n                ])}\n                onClick={() => modalsStore.showIncentiveModal()}\n              >\n                {balanceToShow.toFixed(4).toLocaleString()}\n                <div\n                  className={clsx(\n                    classes.tokenIcon,\n                    classes.iconComp,\n                    classes.icon\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Address */}\n            {/* DEV_NOTE : Hides on mobile to keep original UX*/}\n            {/*<Hidden xsDown>*/}\n            <a\n              className={clsx(classes.headerButtonLike, classes.account)}\n              onClick={() => cryptoWalletConnectionStore.askToConnect()}\n            >\n              <span />\n              {walletText}\n            </a>\n            {/*</Hidden>*/}\n          </Grid>\n        </Grid>\n      </ContentContainer>\n    </header>\n  );\n});\n\n/**\n * QuicknDirty\n */\nfunction summarizeAddress(address: string): string {\n  return `${address.substring(0, 3)}...${address.substring(\n    address.length - 3,\n    address.length\n  )}`;\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useCommonClasses = makeStyles((theme) => ({\n  mobileHide: {\n    [theme.breakpoints.down(\"xs\")]: {\n      display: \"none !important\",\n    },\n  },\n  mobileOnly: {\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none !important\",\n    },\n  },\n  label: {\n    // fontFamily: 'Haas Grot Text R',\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n\n  textRight: {\n    textAlign: \"right\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  icon: {\n    flexShrink: 0,\n    display: \"inline-block\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"contain\",\n    borderRadius: \"50%\",\n    width: \"1.8rem\",\n    height: \"1.8rem\",\n    minWidth: \"1.8rem\",\n    minHeight: \"1.8rem\",\n  },\n}));\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BACKGROUND_LIGHT_COLOR } from \"../../theme/themeConstants\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    background: BACKGROUND_LIGHT_COLOR,\n    boxShadow: \"0px 2px 4px rgb(16 21 24 / 5%)\",\n    borderRadius: \"4px\",\n    // marginBottom: \"1.33rem\",\n    height: \"100%\",\n    width: \"100%\",\n  },\n}));\n\nexport const Panel = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  return <div className={classes.panel}>{props.children}</div>;\n});\n","import React, { useMemo } from \"react\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../theme/commonClasses\";\nimport { makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  symbol: string;\n  extraClasses?: string[];\n}\n\nconst PUBLIC_URL = process.env.PUBLIC_URL;\n\nconst useStyles = makeStyles((theme) => ({\n  token: {\n    // \"&:hover\": {\n    //   animation: \"$turn 3000ms linear\",\n    // },\n  },\n\n  \"@keyframes turn\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    // \"25%\": {\n    //   transform: \"rotateY(-180deg)\",\n    // },\n    \"50%\": {\n      transform: \"rotateY(-360deg)\",\n    },\n    // \"75%\": {\n    //   transform: \"rotateY(180deg)\",\n    // },\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n  \"@keyframes return\": {\n    \"100%\": {\n      transform: \"rotateY(0deg)\",\n    },\n  },\n}));\n\nexport const TokenIcon = React.memo<IProps>((props) => {\n  const { symbol, extraClasses } = props;\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n\n  const classesForSpan = useMemo(() => {\n    const safeExtraClasses = extraClasses || [];\n    return clsx([commonClasses.icon, classes.token, ...safeExtraClasses]);\n  }, [classes.token, commonClasses.icon, extraClasses]);\n\n  return (\n    <span\n      className={classesForSpan}\n      style={{\n        backgroundImage: `url(${PUBLIC_URL}/tokens/asset_${symbol}.svg)`,\n        backgroundSize: \"contain\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    />\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { Grid, makeStyles, Switch } from \"@material-ui/core\";\nimport { TMarketType } from \"./types\";\nimport clsx from \"clsx\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { BigNumber, ethers } from \"ethers\";\nimport { TokenIcon } from \"../../../../components/icons/TokenIcon\";\nimport {\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../../../theme/themeConstants\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCryptoWalletIntegrationStore,\n  useCTokenStoreByBaseAsset,\n} from \"../../../../store/storeHooks\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport Color from \"color\";\n\ninterface IProps {\n  assetSummary: TAssetInMarketParameters;\n  unitsInWallet: number;\n  marketType: TMarketType;\n\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  // TODO : Consider making this global\n  a: {\n    color: \"inherit\",\n    letterSpacing: \"1px\",\n    // fontSize: \"12px\",\n    // fontWeight: 700,\n    textRransform: \"uppercase\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n  },\n  asset: {\n    // display: \"flex\",\n    // alignItems: \"center\",\n    // borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    // fontSize: \"1rem\",\n    // fontWeight: 500,\n    // textTransform: \"capitalize\",\n    // letterSpacing: 0,\n    // transition: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    // padding: \"1.25rem 1.75rem\",\n    padding: \"1.25rem 1.75rem\",\n    borderLeft: \"2px solid transparent\",\n    paddingLeft: \"1.625rem\",\n    textTransform: \"none\",\n    fontSize: \"1rem\",\n    fontWeight: 500,\n    letterSpacing: 0,\n    transition: \"none\",\n    color: TEXT_ON_LIGHT,\n\n    \"&:hover\": {\n      borderLeft: `2px solid ${BRAND_MAIN_COLOR}`,\n      // color: \"#141E27\",\n      color: Color.rgb(TEXT_ON_LIGHT).darken(0.3).hex(),\n      fontWeight: \"bolder\",\n    },\n\n    height: \"6rem\",\n  },\n\n  list_icon: {\n    width: \"2.25rem\",\n    height: \"2.25rem\",\n  },\n\n  identity: {\n    alignItems: \"center\",\n  },\n\n  identity_icon: {\n    marginRight: \"1rem\",\n  },\n\n  identity_balance: {\n    flex: \"1 1\",\n    marginRight: \"0.25rem\",\n    overflow: \"hidden\",\n  },\n\n  balance: {\n    \"& > div\": {\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n    },\n  },\n\n  balanceSubtitle: {\n    display: \"block\",\n    marginTop: \"9px\",\n    color: \"#AAB8C1\",\n    fontSize: \"0.9em\",\n  },\n}));\n\nconst WALLET_BALANCE_DECIMALS = 4;\nconst UNITS_TO_DISPLAY_DECIMALS = 4;\nconst ACTION_APY_DECIMALS = 4;\n\nexport const AssetPanelRow = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n    const commonClasses = useCommonClasses();\n    const {\n      marketType,\n      assetSummary,\n      // cTokenMeta,\n      onCollateralableChange,\n      onAssetSelected,\n    } = props;\n\n    const { address } = assetSummary;\n\n    const {\n      name,\n      symbol,\n      // amountInWallet,\n      // isCollateralable,\n      // supplyApy,\n      // usdLiquidity,\n    } = assetSummary;\n\n    const cTokenStore = useCTokenStoreByBaseAsset(address);\n\n    const isCollaterable = cTokenStore?.isCollaterable;\n\n    const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n    const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n\n    const usdCashLiquidity = cTokenStore?.cTokenCashInUSD || 0;\n    const walletBalanceInUnits =\n      cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n\n    const liquidityUSDInScale = amountToSumInScale(usdCashLiquidity);\n\n    const supplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const borrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    const isSupply = marketType === \"supply\";\n    const ApyToDisplay = isSupply ? supplyApy : borrowApy;\n    const unitsToDisplay = isSupply ? supplyInUnits : borrowInUnits;\n    const unitsText = isSupply ? \"Supplied\" : \"Borrowed\";\n    const showActionUnits = unitsToDisplay > 0;\n\n    const onCollateralSwitch = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onCollateralableChange(address, event.target.checked);\n      },\n      [address, onCollateralableChange]\n    );\n\n    const onAssetInteractionRequested = useCallback(\n      (event: React.MouseEvent<HTMLAnchorElement>) => {\n        if (cTokenStore?.hasBeenInitialized) {\n          onAssetSelected(address);\n        } else {\n          console.log(`Asset interation: cTokenStore not yet initialised`);\n        }\n      },\n      [address, cTokenStore?.hasBeenInitialized, onAssetSelected]\n    );\n\n    const numericalDisplay = useCallback((value: number, decimals: number) => {\n      return parseFloat(value.toFixed(decimals)).toLocaleString(undefined, {\n        maximumFractionDigits: decimals,\n      });\n    }, []);\n\n    const collateralLiquidityOrLoading = useMemo(() => {\n      const collateralOrLiquidity =\n        marketType === \"supply\" ? (\n          // <input type=\"checkbox\" />\n          //  TODO : Add a proper toggle component\n          <Switch\n            checked={isCollaterable}\n            onChange={onCollateralSwitch}\n            // Preventing toggle-click from being intercepted by the row's 'onClick'\n            onClick={(e) => e.stopPropagation()}\n          />\n        ) : (\n          <div>\n            $\n            {parseFloat(\n              liquidityUSDInScale.units.toLocaleString()\n            ).toLocaleString()}\n            {liquidityUSDInScale.scaleUnit}\n          </div>\n        );\n\n      return cTokenStore?.hasBeenInitialized ? (\n        collateralOrLiquidity\n      ) : (\n        <Skeleton animation=\"wave\" />\n      );\n    }, [\n      cTokenStore?.hasBeenInitialized,\n      isCollaterable,\n      liquidityUSDInScale.scaleUnit,\n      liquidityUSDInScale.units,\n      marketType,\n      onCollateralSwitch,\n    ]);\n\n    return (\n      <a\n        className={clsx([classes.a, classes.asset])}\n        onClick={onAssetInteractionRequested}\n      >\n        {/* Asset (+APY subtitle) */}\n        <Grid container item xs={4} sm={4} className={classes.identity}>\n          <TokenIcon\n            symbol={symbol}\n            extraClasses={[classes.identity_icon, classes.list_icon]}\n          />\n          <div className={clsx([classes.balance, classes.identity_balance])}>\n            <div>{name}</div>\n            <span\n              className={clsx([\n                commonClasses.mobileOnly,\n                classes.balanceSubtitle,\n              ])}\n            >\n              {ApyToDisplay}%\n            </span>\n          </div>\n        </Grid>\n\n        {/* APY (mobile hidden) */}\n        <Grid\n          item\n          xs={1}\n          sm={3}\n          className={clsx([commonClasses.mobileHide, commonClasses.textCenter])}\n        >\n          <div className={clsx([classes.balance])}>\n            {cTokenStore?.hasBeenInitialized ? (\n              <div>{numericalDisplay(ApyToDisplay, ACTION_APY_DECIMALS)}</div>\n            ) : (\n              <Skeleton animation={\"wave\"} />\n            )}\n          </div>\n        </Grid>\n\n        {/* Wallet */}\n        <Grid item xs={4} sm={3} className={clsx([commonClasses.textCenter])}>\n          <div className={clsx([classes.balance])}>\n            <div>\n              {numericalDisplay(walletBalanceInUnits, WALLET_BALANCE_DECIMALS)}{\" \"}\n              {symbol}\n            </div>\n            {showActionUnits && (\n              <span\n                className={clsx([\n                  // commonClasses.mobileOnly,\n                  classes.balanceSubtitle,\n                ])}\n              >\n                {numericalDisplay(unitsToDisplay, UNITS_TO_DISPLAY_DECIMALS)}{\" \"}\n                {unitsText}\n              </span>\n            )}\n          </div>\n        </Grid>\n\n        {/* Collateral / Liquidity */}\n        <Grid item xs={4} sm={2} className={clsx([commonClasses.textRight])}>\n          <div className={clsx([classes.balance])}>\n            {collateralLiquidityOrLoading}\n          </div>\n        </Grid>\n      </a>\n    );\n  }\n);\n\ntype TNumericalScaleUnit = \"M\" | \"K\" | \"\";\ntype TSumInScale = {\n  scaleUnit: TNumericalScaleUnit;\n  units: number;\n};\n\nfunction amountToSumInScale(amount: number): TSumInScale {\n  let scaleUnit: TNumericalScaleUnit = \"M\";\n  let scaleDivider = 1_000_000;\n\n  // TODO : Play with this threshold\n  if (amount < 500_000) {\n    scaleUnit = \"K\";\n    scaleDivider = 1_000;\n  }\n\n  // For low numbers\n  if (amount < 1000) {\n    scaleUnit = \"\";\n    scaleDivider = 1;\n  }\n\n  const sumInScale: TSumInScale = {\n    scaleUnit,\n    units: amount / scaleDivider,\n  };\n\n  return sumInScale;\n}\n","import React, { FunctionComponent, SFC } from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { TAssetInMarketGist, TMarketType } from \"./types\";\nimport { useCommonClasses } from \"../../../../theme/commonClasses\";\nimport { Panel } from \"../../../../components/panel/Panel\";\nimport { AssetPanelRow } from \"./AssetPanelRow\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { TEXT_ON_LIGHT } from \"../../../../theme/themeConstants\";\n\ninterface IProps {\n  header: string;\n  marketType: TMarketType;\n  assetsInMarket: TAssetInMarketParameters[];\n  // Symbol -> balanceInUnits\n  userBalancesInUnits: Record<string, number>;\n  marketsUserIsIn: string[];\n\n  /**\n   *  Asset 'collateral' flag toggle is clicked (user want to add/remove asset from being used as collateral)\n   */\n  onCollateralableChange: (\n    baseAssetAddress: string,\n    newCollaterableValue: boolean\n  ) => void;\n\n  /**\n   *  Asset row is clicked (user want to interact with this asset's market)\n   */\n  onAssetSelected: (baseAssetAddress: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  panelHeader: {\n    display: \"flex\",\n    flexFlow: \"inherit\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    fontSize: \"1.1rem\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    color: TEXT_ON_LIGHT,\n  },\n  zeroMargin: {\n    margin: 0,\n  },\n  assetsList: {},\n  panelLabels: {\n    // display: \"flex\",\n    padding: \"1rem 1.75rem\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n    alignItems: \"center\",\n  },\n  assets: {},\n}));\n\n// export const MarketsPanel = React.memo<IProps>((props) => {\nexport const MarketsPanel: FunctionComponent<IProps> = (props) => {\n  const classes = useStyles();\n  const commonClasses = useCommonClasses();\n  const {\n    header,\n    marketType,\n    assetsInMarket,\n    userBalancesInUnits,\n    marketsUserIsIn,\n    onCollateralableChange,\n    onAssetSelected,\n  } = props;\n\n  console.log(`Building markets panel ${header}`);\n\n  return (\n    <Panel>\n      <div className={classes.panelHeader}>\n        <h4 className={classes.zeroMargin}>{header}</h4>\n      </div>\n      <div className={classes.assetsList}>\n        <Grid container direction={\"row\"} className={classes.panelLabels}>\n          {/* Asset */}\n          <Grid item xs={4} sm={4}>\n            <label className={commonClasses.label}>Asset</label>\n          </Grid>\n\n          {/* APY */}\n          <Grid\n            className={clsx([\n              commonClasses.textCenter,\n              commonClasses.mobileHide,\n            ])}\n            item\n            xs={false}\n            sm={3}\n          >\n            <label className={clsx([commonClasses.label])}>APY</label>\n          </Grid>\n\n          {/* WALLET */}\n          <Grid className={commonClasses.textCenter} item xs={4} sm={3}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              Wallet\n            </label>\n          </Grid>\n\n          {/* Collateral/Liquidity */}\n          <Grid className={commonClasses.textRight} item xs={4} sm={2}>\n            <label\n              className={clsx([commonClasses.label, commonClasses.textRight])}\n            >\n              {marketType === \"supply\" ? \"Collateral\" : \"Liquidity\"}\n            </label>\n          </Grid>\n        </Grid>\n\n        <div className={classes.assets}>\n          {assetsInMarket.map((asset) => (\n            <AssetPanelRow\n              marketType={marketType}\n              assetSummary={asset}\n              unitsInWallet={userBalancesInUnits[asset.symbol] || 0}\n              key={asset.symbol}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onAssetSelected}\n            />\n          ))}\n        </div>\n      </div>\n    </Panel>\n  );\n};\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { observer } from \"mobx-react\";\nimport React, { useCallback, useEffect, useMemo } from \"react\";\nimport { SingleLNStore } from \"../../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsPanel } from \"./MarketsPanel\";\nimport { ContentContainer } from \"../../../../components/structure/ContentContainer\";\nimport {\n  useAccountStore,\n  useActiveLendingNetworkStore,\n  useModalsStore,\n} from \"../../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TCTokenMetadata } from \"../../../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\n\nconst useStyles = makeStyles((theme) => ({\n  interfaceContainer: {\n    \"--alertHeight\": \"0px\",\n    // TODO : Understand this calculation\n    minHeight: \"calc(100vh - 82px - 23rem + 34px - var(--alertHeight))\",\n  },\n  row: {\n    display: \"flex\",\n    flexFlow: \"row wrap\",\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  marketsColumn: {\n    flexBasis: \"100%\",\n    padding: \"0 0.665rem\",\n    // DEV_NOTE : Original : @media (min-width: 40em)\n    [theme.breakpoints.up(\"sm\")]: {\n      flexBasis: \"50%\",\n      maxWidth: \"50%\",\n    },\n\n    // Same as 'Panel'\n    marginBottom: \"1.33rem\",\n  },\n}));\n\ninterface IProps {}\nexport const MarketsSection: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const [error, setError] = React.useState<string | null>(null);\n\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lnStore = useActiveLendingNetworkStore();\n\n  const onCollateralableChange = useCallback(\n    async (baseAssetAddress: string, newCollaterableValue: boolean) => {\n      modalsStore.showCollateralModal(baseAssetAddress);\n      // if (!lnStore) {\n      //   return;\n      // }\n      //\n      // // TODO : Make this tx handling better\n      // if (newCollaterableValue) {\n      //   console.log(`Entered market request - ${baseAssetAddress}`);\n      //   await lnStore.enterMarket(baseAssetAddress);\n      //   console.log(\"Entered market\");\n      // } else {\n      //   await lnStore.exitMarket(baseAssetAddress);\n      //   console.log(\"Left market\");\n      // }\n    },\n    [modalsStore]\n  );\n\n  const getPayloadForMarketInteractionModal = useCallback(\n    (baseAssetAddress: string) => {\n      if (!lnStore) {\n        return {\n          cTokenMeta: undefined,\n          assetParameters: undefined,\n        };\n      }\n      const cTokenStore = lnStore.baseAssetsToCTokenStore.get(baseAssetAddress);\n      const assetParameters = lnStore.assetsParams.find(\n        (assetParam) => assetParam.address === baseAssetAddress\n      );\n\n      if (!assetParameters) {\n        console.error(`No asset parameters found for ${baseAssetAddress}`);\n      } else if (!cTokenStore) {\n        console.error(`No cToken meta found for ${baseAssetAddress}`);\n      }\n\n      const payload: {\n        assetParameters: TAssetInMarketParameters | undefined;\n        cTokenMeta: TCTokenMetadata | undefined;\n      } = {\n        assetParameters,\n        cTokenMeta: undefined,\n      };\n\n      return payload;\n    },\n    [lnStore]\n  );\n\n  const onSupplyAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showSupplyModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  const onBorrowAssetSelected = useCallback(\n    (baseAssetAddress: string) => {\n      modalsStore.showBorrowModal(baseAssetAddress);\n    },\n    [modalsStore]\n  );\n\n  // React.useEffect(() => {\n  //   if (lendingNetworkStore && lendingNetworkStore.tokens === null) {\n  //     let cancel = false;\n  //     const fetch = async () => {\n  //       if (!cancel) {\n  //         try {\n  //           await lendingNetworkStore.loadCTokenMetadata();\n  //         } catch (e) {\n  //           setError(\n  //             `Unable to fetch the tokens data of network \"${lendingNetworkStore.id}\"`\n  //           );\n  //         }\n  //       }\n  //     };\n  //\n  //     fetch();\n  //     return () => {\n  //       cancel = true;\n  //     };\n  //   }\n  // }, [lendingNetworkStore]);\n\n  // if (lendingNetworkStore.assetsGists === null) {\n  //   return <div style={{ color: \"white\" }}>Loading tokens meta data...</div>;\n  // }\n\n  if (error) {\n    return <Typography style={{ color: \"white\" }}>Error: {error}</Typography>;\n  }\n\n  if (!lnStore) {\n    return <Typography style={{ color: \"white\" }}>Initializing...</Typography>;\n  }\n\n  return (\n    <ContentContainer>\n      <section>\n        <div className={clsx([classes.interfaceContainer, classes.row])}>\n          {/* Supply(/Withdraw) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Supply Markets\"}\n              marketType={\"supply\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onSupplyAssetSelected}\n            />\n          </div>\n          {/* Borrow(/Repay) */}\n          <div className={classes.marketsColumn}>\n            <MarketsPanel\n              header={\"Borrow Markets\"}\n              marketType={\"borrow\"}\n              assetsInMarket={lnStore.assetsParams}\n              userBalancesInUnits={accountStore.symbolsToUnits}\n              marketsUserIsIn={lnStore.marketsUserIsIn}\n              onCollateralableChange={onCollateralableChange}\n              onAssetSelected={onBorrowAssetSelected}\n            />\n          </div>\n        </div>\n      </section>\n    </ContentContainer>\n  );\n});\n","import React from \"react\";\n// @ts-ignore\nimport AnimatedNumber from \"animated-number-react\";\n\ninterface IProps {\n  value: number;\n}\n\nfunction standardSumFormat(n: number) {\n  return (+n.toFixed(2)).toLocaleString();\n}\n\nexport const AnimatedNumberText = React.memo<IProps>((props) => {\n  const { value } = props;\n\n  return <AnimatedNumber value={value} formatValue={standardSumFormat} />;\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  titleText: string;\n  sum: number;\n  isSupply: boolean;\n  alignLeft: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  headline: {\n    fontSize: \"1.6rem\",\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  textLeft: {\n    textAlign: \"left\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  supply: {\n    color: AFFIRMATIVE_GREEN_COLOR,\n  },\n  borrow: {\n    // color: \"#9669ED\",\n    // color: \"#ff8906\",\n    color: \"#f25f4c\",\n  },\n}));\n\nexport const BalanceHeadline = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { titleText, sum, isSupply, alignLeft } = props;\n\n  return (\n    <div className={alignLeft ? classes.textLeft : classes.textCenter}>\n      <label\n        className={clsx([\n          classes.label,\n          isSupply ? classes.supply : classes.borrow,\n        ])}\n      >\n        {titleText}\n      </label>\n      {/* TODO : Add the digits CSS */}\n      <div className={classes.headline}>\n        $\n        <AnimatedNumberText value={sum} />\n        {/*{sum.toLocaleString()}*/}\n      </div>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { useRef } from \"react\";\nimport useHover from \"@react-hook/hover\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport Color from \"color\";\n\ninterface IProps {\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  netApyWrapper: {\n    // TODO : decrease by 20 when in small screen\n    height: \"140px\",\n    width: \"140px\",\n    position: \"relative\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    [theme.breakpoints.down(\"xs\")]: {\n      height: \"120px\",\n      width: \"120px\",\n    },\n  },\n  netApy: {},\n  netApyDescription: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    margin: \"0.1875rem\",\n    // backgroundColor: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    borderRadius: \"50%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: \"0.25rem\",\n\n    \"&:hover\": {\n      // backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n      backgroundColor: Color.rgb(theme.palette.background.default)\n        .lighten(0.2)\n        .hex(),\n    },\n  },\n  netApyDescription_Active: {\n    backgroundColor: \"rgba(20, 30, 39, 0.98)\",\n  },\n  label: {\n    textAlign: \"center\",\n    color: \"#657786\",\n\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    // color: \"#AAB8C1\",\n  },\n  label_active: {\n    color: \"white\",\n  },\n  headline: {\n    fontWeight: 300,\n    color: \"#ffffff\",\n    marginTop: \"0.7rem\",\n  },\n  headline_inactive: {\n    fontSize: \"1.6rem\",\n  },\n  headline_active: {\n    color: \"#F9FAFB\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n  },\n}));\n\nexport const NetApy: React.FC<IProps> = (props) => {\n  const classes = useStyles();\n  const { netApy, totalYearlyChangeUsd } = props;\n\n  // TODO : Add 'click detect' to keep same behavior on mobile\n  const hoverTargetRef = useRef<HTMLDivElement>(null);\n  const isHovering = useHover(hoverTargetRef);\n\n  const isEarning = netApy > 0;\n  const apyOrApr = isEarning ? \"APY\" : \"APR\";\n  const apyDirectionMessage = `Net ${apyOrApr}`;\n  const earnedOrPaid = isEarning ? \"earned interest\" : \"paid interest\";\n\n  const netApyStringified = (+netApy.toFixed(2)).toLocaleString();\n  const totalYearlyChangeUsdStringified = (+totalYearlyChangeUsd.toFixed(\n    2\n  )).toLocaleString();\n\n  const labelText = isHovering\n    ? `${totalYearlyChangeUsdStringified} $`\n    : apyDirectionMessage;\n  const headlineText = isHovering\n    ? // ? \"Interest earned and paid, plus TOKEN\"\n      `Anticipated yearly ${earnedOrPaid}`\n    : `${netApyStringified}%`;\n\n  return (\n    <div className={classes.netApyWrapper} ref={hoverTargetRef}>\n      <div className={classes.netApy}>\n        <svg viewBox=\"0 0 140 140\" width=\"100%\">\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 0 1 70 0 Z\"\n            stroke=\"transparent\"\n            fill=\"#9669ED\"\n          />\n          <path\n            d=\"M 70 70 L  70 0 A 70 70 0 1 1 69.99956017702848 1.381744718642608e-9 Z\"\n            stroke=\"transparent\"\n            fill={AFFIRMATIVE_GREEN_COLOR}\n          />\n        </svg>\n      </div>\n      <div\n        className={clsx([\n          classes.netApyDescription,\n          isHovering ? classes.netApyDescription_Active : false,\n        ])}\n      >\n        <label\n          className={clsx([\n            classes.label,\n            isHovering ? classes.label_active : false,\n          ])}\n        >\n          {labelText}\n        </label>\n        <div\n          className={clsx([\n            classes.headline,\n            isHovering ? classes.headline_active : classes.headline,\n          ])}\n        >\n          {headlineText}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Hidden, makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { BalanceHeadline } from \"./BalanceHeadline\";\nimport { NetApy } from \"./NetApy\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  content: {},\n  row: {\n    marginRight: \"-0.665rem\",\n    marginLeft: \"-0.665rem\",\n  },\n  alignMiddle: {\n    alignItems: \"center\",\n  },\n  textCenter: {\n    textAlign: \"center\",\n  },\n  column: {\n    padding: \"0 0.665rem\",\n  },\n}));\n\nexport const BalancesAndApy = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    borrowBalanceUsd,\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n  } = props;\n\n  return (\n    <div className={classes.content}>\n      {/* Large */}\n      <Hidden xsDown>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid\n            className={classes.column}\n            item\n            container\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={supplyBalanceUsd}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={false}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={2}\n          >\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid\n            className={classes.column}\n            container\n            item\n            direction={\"column\"}\n            xs={5}\n          >\n            <BalanceHeadline\n              sum={borrowBalanceUsd}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={false}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n\n      {/* Mobile */}\n      <Hidden smUp>\n        <Grid\n          container\n          direction={\"row\"}\n          className={clsx([classes.row, classes.alignMiddle])}\n        >\n          <Grid className={classes.column} item xs={4}>\n            <NetApy\n              netApy={netApy}\n              totalYearlyChangeUsd={totalYearlyChangeUsd}\n            />\n          </Grid>\n\n          <Grid className={classes.column} item xs={8}>\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Supply balance\"}\n              isSupply={true}\n              alignLeft={true}\n            />\n            <BalanceHeadline\n              sum={0}\n              titleText={\"Borrow balance\"}\n              isSupply={false}\n              alignLeft={true}\n            />\n          </Grid>\n        </Grid>\n      </Hidden>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport clsx from \"clsx\";\nimport { AFFIRMATIVE_GREEN_COLOR } from \"../../../../theme/themeConstants\";\nimport { AnimatedNumberText } from \"../../../../components/AnimatedNumberText/AnimatedNumberText\";\n\ninterface IProps {\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  limitBar: {\n    display: \"flex\",\n    marginTop: \"3.25rem\",\n  },\n  label: {\n    // fontFamily: \"Haas Grot Text R\",\n    fontStyle: \"medium\",\n    fontWeight: 600,\n    fontSize: \"12px\",\n    color: \"#AAB8C1\",\n  },\n  limitBarLabel: {\n    color: \"#657786\",\n    // marginTop: \"0.7rem\",\n    // marginRight: \"0.625rem\",\n    marginTop: \"0.7rem\",\n    marginRight: \"0.625rem\",\n    \"&:last-of-type\": {\n      marginRight: 0,\n      marginLeft: \"0.625rem\",\n    },\n  },\n  progressBarWrapper: {\n    position: \"relative\",\n    flex: \"1 1\",\n  },\n  progress_bar_green: {\n    display: \"flex\",\n    backgroundColor: AFFIRMATIVE_GREEN_COLOR,\n  },\n  progress: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: \"1 1\",\n    height: \"5px\",\n    maxWidth: \"100%\",\n    overflow: \"hidden\",\n    backgroundColor: \"rgba(40, 49, 55, 0.1)\",\n    borderRadius: \"100px\",\n    marginTop: \"1rem\",\n  },\n  dark_clear: {\n    background: \"rgba(54, 61, 68, 0.5)\",\n  },\n  thin: {\n    height: \"3px\",\n  },\n  progress_bar_percent_label: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n  },\n  p: {\n    position: \"relative\",\n    float: \"right\",\n    marginRight: \"-0.7rem\",\n    color: \"#ffffff\",\n    padding: \"0.3rem 0.3rem 0.25rem 0.25rem\",\n    backgroundColor: \"#070A0E\",\n  },\n  small: {\n    fontSize: \"12px\",\n  },\n  progress_bar_hover_space: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    width: \"100%\",\n    height: \"10px\",\n    marginTop: \"1rem\",\n  },\n}));\n\nexport const BorrowLimitBar = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { usedBorrowPercentage, collateralPotentialInUSD } = props;\n\n  // TODO : Add tooltip\n\n  return (\n    <div className={classes.limitBar}>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        Borrow Limit (<AnimatedNumberText value={usedBorrowPercentage} />\n        %)\n      </label>\n      <div className={classes.progressBarWrapper}>\n        {/*<div className=\"progress dark-clear thin\">*/}\n        <div\n          className={clsx([classes.progress, classes.dark_clear, classes.thin])}\n        >\n          <div\n            role=\"progressbar\"\n            aria-valuemin={0}\n            aria-valuemax={100}\n            className={classes.progress_bar_green}\n            style={{ width: `${usedBorrowPercentage}%` }}\n          />\n        </div>\n\n        <div className={classes.progress_bar_percent_label}>\n          <div\n            style={{\n              minWidth: \"1%\",\n              maxWidth: \"99%\",\n              width: `${usedBorrowPercentage}%`,\n            }}\n          >\n            {/*<p className={clsx([classes.p, classes.small])}>*/}\n            {/*  {usedBorrowPercentage.toFixed(2)}%*/}\n            {/*</p>*/}\n          </div>\n        </div>\n\n        <div className={classes.progress_bar_hover_space}></div>\n      </div>\n      <label className={clsx([classes.label, classes.limitBarLabel])}>\n        $\n        <AnimatedNumberText value={collateralPotentialInUSD} />\n        {/*{\" \"}*/}\n        {/*$ {collateralPotentialInUSD.toFixed(2)}*/}\n      </label>\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { BalancesAndApy } from \"./BalancesAndApy\";\nimport { BorrowLimitBar } from \"./BorrowLimitBar\";\n\ninterface IProps {\n  supplyBalanceUsd: number;\n  borrowBalanceUsd: number;\n  netApy: number;\n  totalYearlyChangeUsd: number;\n\n  // Borrow limit\n  usedBorrowPercentage: number;\n  collateralPotentialInUSD: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  balancesTotal: {\n    position: \"relative\",\n    maxWidth: \"60em\",\n    margin: \"0 auto\",\n    [theme.breakpoints.down(\"xs\")]: {\n      margin: \"0 1.33rem\",\n    },\n  },\n}));\n\nexport const BalancesTotal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  const {\n    supplyBalanceUsd,\n    netApy,\n    totalYearlyChangeUsd,\n    borrowBalanceUsd,\n    usedBorrowPercentage,\n    collateralPotentialInUSD,\n  } = props;\n\n  return (\n    <div className={classes.balancesTotal}>\n      <BalancesAndApy\n        netApy={netApy}\n        totalYearlyChangeUsd={totalYearlyChangeUsd}\n        supplyBalanceUsd={supplyBalanceUsd}\n        borrowBalanceUsd={borrowBalanceUsd}\n      />\n      <BorrowLimitBar\n        usedBorrowPercentage={usedBorrowPercentage}\n        collateralPotentialInUSD={collateralPotentialInUSD}\n      />\n    </div>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { BalancesTotal } from \"./BalancesTotal\";\nimport { useActiveLendingNetworkStore } from \"../../../../store/storeHooks\";\nimport { observer } from \"mobx-react\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  hero: {\n    // background: \"#070A0E\",\n    backgroundColor: theme.palette.background.default,\n    marginBottom: \"-3.75rem\",\n    padding: \"1.2635rem 0 7.315rem\",\n  },\n}));\n\nexport const BorrowOverview = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const classes = useStyles();\n\n    const lnStore = useActiveLendingNetworkStore();\n\n    const supplyBalanceUsd = lnStore?.totalAccountSupplyBalanceUsd || 0;\n    const borrowBalanceUsd = lnStore?.totalAccountBorrowBalanceUsd || 0;\n    const netApy = lnStore?.netApy || 0;\n    const totalYearlyChangeUsd = lnStore?.totalYearlyChangeUsd || 0;\n    const collateralPotentialInUSD = lnStore?.collateralPotentialInUSD || 0;\n    const usedBorrowPercentage = lnStore?.usedBorrowPercentage || 0;\n\n    return (\n      <section className={clsx(classes.hero)}>\n        <BalancesTotal\n          supplyBalanceUsd={supplyBalanceUsd}\n          borrowBalanceUsd={borrowBalanceUsd}\n          netApy={netApy}\n          totalYearlyChangeUsd={totalYearlyChangeUsd}\n          usedBorrowPercentage={usedBorrowPercentage}\n          collateralPotentialInUSD={collateralPotentialInUSD}\n        />\n      </section>\n    );\n  }\n);\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\nimport { MarketsSection } from \"./markets/MarketsSection\";\nimport { BorrowOverview } from \"./overview/BorrowOverview\";\nimport { useActiveLendingNetworkStore } from \"../../../store/storeHooks\";\n\ninterface IProps {}\n\nexport const MainLendingNetworkTab = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    return (\n      <>\n        <BorrowOverview />\n        <MarketsSection />\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\n\ninterface IProps {\n  text: string;\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nconst useStyles = makeStyles((theme) => ({}));\n\nexport const ModalActionButton = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { text, onClick, disabled } = props;\n\n  console.log(\"Building button\");\n\n  return (\n    <Button\n      variant={\"contained\"}\n      fullWidth\n      disabled={disabled}\n      onClick={onClick}\n      color={\"primary\"}\n    >\n      {text}\n    </Button>\n  );\n});\n","import React from \"react\";\nimport {\n  Collapse,\n  Fade,\n  Grow,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\nimport { AnimatedNumberText } from \"../../../../AnimatedNumberText/AnimatedNumberText\";\n\nexport type TRatesRow = {\n  label: string;\n  value: number;\n  valuePrefix?: string;\n  valueSuffix?: string;\n  tokenSymbol?: string;\n\n  // Predicted value\n  displayPredictedValues?: boolean;\n  predictedValue?: number;\n};\n\ninterface IProps {\n  title: string;\n  subTitle?: string;\n\n  rateRows: TRatesRow[];\n\n  // Styling\n  bottomBorder?: boolean;\n}\n\nconst GRAYISH_TEXT = \"#AAB8C1\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // alignItems: \"stretch\",\n  },\n\n  rateRow: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"start\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n\n  bottomBorder: {\n    borderBottom: \"1px solid #CCD6DD\",\n  },\n  heavyBottomBorder: {\n    borderBottom: \"1px solid rgb(20, 30, 39)\",\n  },\n  symbolIcon: {\n    marginRight: \"0.25rem\",\n  },\n  labelText: {\n    // Push to the right\n    color: GRAYISH_TEXT,\n  },\n  valueText: {\n    // Push to the right\n    // marginLeft: \"auto\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport const BaseRates = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { title, subTitle, rateRows, bottomBorder } = props;\n\n  const arrowText = \"->\";\n\n  return (\n    <div\n      className={clsx([\n        classes.container,\n        bottomBorder ? classes.heavyBottomBorder : null,\n      ])}\n    >\n      <Typography>{title}</Typography>\n      {subTitle && <Typography variant={\"caption\"}>{subTitle}</Typography>}\n      {rateRows.map((rateRow, index) => {\n        const isLast = index === rateRows.length;\n        const predictedValue = rateRow?.predictedValue || 0;\n\n        return (\n          <div\n            className={clsx([\n              classes.rateRow,\n              isLast ? null : classes.bottomBorder,\n            ])}\n            key={`${rateRow.tokenSymbol}_${rateRow.label}`}\n          >\n            {rateRow.tokenSymbol && (\n              <TokenIcon\n                symbol={rateRow.tokenSymbol}\n                extraClasses={[classes.symbolIcon]}\n              />\n            )}\n            {/* Label */}\n            <Typography className={classes.labelText}>\n              {rateRow.label}\n            </Typography>\n            <div></div>\n            <Typography\n              className={classes.valueText}\n              style={{ marginLeft: \"auto\" }}\n            >\n              {(+rateRow.value.toFixed(2)).toLocaleString()}\n              {\"  \"}\n              {!rateRow.displayPredictedValues && rateRow.valueSuffix}\n            </Typography>\n\n            {rateRow.displayPredictedValues && (\n              <>\n                <Typography className={classes.valueText}>\n                  {\"   \"}\n                  {arrowText}\n                  {/*{rateRow.valuePrefix}*/}\n                  {(+predictedValue.toFixed(2)).toLocaleString()}\n                  {\"  \"}\n                  {rateRow.valueSuffix}\n                </Typography>\n              </>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  actionName: string;\n  assetSymbol: string;\n  assetSupplyApy: number;\n  distributionAssetSymbol: string;\n  distributionAssetApy: number;\n}\n\nexport const ActionRates = React.memo<IProps>((props) => {\n  const {\n    actionName,\n    assetSymbol,\n    assetSupplyApy,\n    distributionAssetSymbol,\n    distributionAssetApy,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `${actionName} APY`,\n      tokenSymbol: assetSymbol,\n      value: assetSupplyApy,\n      valueSuffix: \"%\",\n    };\n    const secondRow: TRatesRow = {\n      label: \"Distribution APY\",\n      tokenSymbol: distributionAssetSymbol,\n      value: distributionAssetApy,\n      valueSuffix: \"%\",\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    actionName,\n    assetSupplyApy,\n    assetSymbol,\n    distributionAssetApy,\n    distributionAssetSymbol,\n  ]);\n\n  return <BaseRates title={`${actionName} Rates`} rateRows={rateRows} />;\n});\n","import React, { useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { BaseRates, TRatesRow } from \"./BaseRates\";\n\ninterface IProps {\n  limitOrBalance: \"Limit\" | \"Balance\";\n  borrowLimitUsd: number;\n  borrowLimitUsedPercentage: number;\n  predictedBorrowLimitUsd: number;\n  predictedBorrowLimitPercentage: number;\n  displayPredictedValues?: boolean;\n  note?: string;\n}\n\nexport const BorrowLimitRates = React.memo<IProps>((props) => {\n  const {\n    limitOrBalance,\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    predictedBorrowLimitUsd,\n    predictedBorrowLimitPercentage,\n    displayPredictedValues,\n    note,\n  } = props;\n\n  const rateRows = useMemo<TRatesRow[]>(() => {\n    const firstRow: TRatesRow = {\n      label: `Borrow ${limitOrBalance}`,\n      value: borrowLimitUsd,\n      valueSuffix: \"$\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitUsd,\n    };\n    const secondRow: TRatesRow = {\n      label: \"Borrow Limit Used\",\n      value: borrowLimitUsedPercentage,\n      valueSuffix: \"%\",\n      displayPredictedValues: displayPredictedValues,\n      predictedValue: predictedBorrowLimitPercentage,\n    };\n\n    return [firstRow, secondRow];\n  }, [\n    borrowLimitUsd,\n    borrowLimitUsedPercentage,\n    displayPredictedValues,\n    limitOrBalance,\n    predictedBorrowLimitPercentage,\n    predictedBorrowLimitUsd,\n  ]);\n\n  const title = \"Borrow Limit\";\n  const subTitle = note;\n\n  return (\n    <BaseRates\n      title={title}\n      subTitle={subTitle}\n      rateRows={rateRows}\n      bottomBorder\n    />\n  );\n});\n","import React, { useMemo } from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {\n  BRAND_MAIN_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_LIGHT,\n} from \"../../../theme/themeConstants\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\n\nexport type TTxWaitingStage = \"USER_APPROVAL\" | \"CONFIRMATION\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  txWaitingStage: TTxWaitingStage;\n  txHash?: string;\n  explorerUrlBaseForTx?: string;\n  explorerName?: string;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    maxWidth: \"90%\",\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n  },\n  txWaitingPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    // color: \"#141E27\",\n    color: TEXT_ON_LIGHT,\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    // paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n  explorerLink: {\n    // color: theme.palette.primary.main,\n    color: GRAYISH_TEXT,\n\n    \"&:hover\": {\n      color: theme.palette.primary.main,\n    },\n  },\n}));\n\nexport const TxWaitingModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    txWaitingStage,\n    txHash,\n    explorerUrlBaseForTx,\n    explorerName,\n  } = props;\n  const theme = useTheme();\n\n  const isWaitingForUserApproval = txWaitingStage === \"USER_APPROVAL\";\n  const isWaitingForTxConfirmation = txWaitingStage === \"CONFIRMATION\";\n  const title = isWaitingForUserApproval\n    ? \"Please confirm the transaction\"\n    : // : \"Waiting for the transaction to be mined\";\n      \"Waiting for transaction confirmation\";\n\n  const message = isWaitingForUserApproval\n    ? \"Please approve the tx in your wallet.\"\n    : \"This might take a few moments\";\n\n  const explorerLink = useMemo(() => {\n    if (txHash && explorerUrlBaseForTx) {\n      return `${explorerUrlBaseForTx}/${txHash}`;\n    } else {\n      return null;\n    }\n  }, [explorerUrlBaseForTx, txHash]);\n\n  console.log({ explorerUrlBaseForTx });\n  console.log({ txHash });\n  console.log({ explorerLink });\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.txWaitingPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {title}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Loader\n              type={isWaitingForUserApproval ? \"ThreeDots\" : \"Rings\"}\n              color={theme.palette.primary.main}\n            />\n            <Typography variant={\"h6\"}>{message}</Typography>\n            {explorerLink && (\n              <a\n                href={explorerLink}\n                target={\"_blank\"}\n                rel={\"noreferrer noopener\"}\n                className={classes.explorerLink}\n              >\n                <Typography variant={\"h6\"}>Open in {explorerName}</Typography>\n              </a>\n            )}\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useMemo } from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../../icons/TokenIcon\";\nimport { TModalFooterMessagePayload } from \"./ModalFooter\";\nimport { ModalActionButton } from \"./ModalActionButton\";\nimport { ActionRates } from \"./rates/ActionRates\";\nimport {\n  BACKGROUND_LIGHT_COLOR,\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"./rates/BorrowLimitRates\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../../txWaitingModal/TxWaitingModal\";\nimport Color from \"color\";\n\nexport type TZeroOrOne = 0 | 1;\n\nexport interface IMarketModalCommonStatePayload {\n  // Tabs\n  currentTabIndex: TZeroOrOne;\n  onTabIndexChange: (newIndex: TZeroOrOne) => void;\n  tab0Title: string;\n  tab1Title: string;\n\n  // Assets\n  actionAssetSymbol: string;\n  actionAssetName: string;\n  distributionAssetSymbol: string;\n  assetExplorerLink: string;\n\n  // Borrow Limit (optional)\n  currentBorrowLimit?: number;\n  usedBorrowLimitPercentage?: number;\n\n  // TX waiting\n  explorerName: string;\n  explorerUrlBaseForTx: string;\n  activeTxHash?: string;\n  waitingForUserApproval?: boolean;\n  waitingForTxConfirmation?: boolean;\n}\n\nexport interface IMarketModalPerTabStatePayload {\n  // Message or input component\n  messageOrInput: ReactNode;\n  showInputActionButton: boolean;\n  inputActionButtonActive: boolean;\n  inputActionButtonText: string;\n  onInputActionButtonPressed?: () => void;\n\n  // Action Rates\n  actionName: \"Borrow\" | \"Supply\";\n  actionApy: number;\n  distributionApy: number;\n\n  // Borrow Limit (optional)\n  showBorrowLimit?: boolean;\n  showPredictedBorrowLimits?: boolean;\n  borrowLimitAfterChange?: number;\n  usedBorrowLimitPercentageAfterChange?: number;\n  borrowLimitNote?: string;\n\n  // Action button\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonDisabledText?: string;\n  actionButtonOnClick: () => void;\n\n  // Footer\n  footerMessagesPayloads: TModalFooterMessagePayload[];\n  // footerTitle: string | string[];\n  // footerTokenAmount: number;\n}\n\n// DEV_NOTE : To make it easier to build in parent components\nexport interface IMarketModalStatePayload\n  extends IMarketModalCommonStatePayload,\n    IMarketModalPerTabStatePayload {}\n\ninterface IProps extends IMarketModalStatePayload {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: TEXT_ON_LIGHT,\n  },\n  // paper: {\n  //   backgroundColor: theme.palette.background.paper,\n  //   // border: \"2px solid #000\",\n  //   boxShadow: theme.shadows[5],\n  //   padding: theme.spacing(20, 4, 3),\n  // },\n  marketInteractionPanel: {\n    position: \"relative\",\n    width: \"25.5rem\",\n    maxWidth: \"100%\",\n    backgroundColor: BACKGROUND_LIGHT_COLOR,\n  },\n  panelHeader: {\n    width: \"100%\",\n    // color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {},\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n    transition: \"200ms\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      transform: \"scale(1.1)\",\n    },\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    // backgroundColor: \"#ffffff\",\n    backgroundColor: new Color(BACKGROUND_LIGHT_COLOR)\n      .mix(Color.rgb([0, 0, 0]), 0.02)\n      .hex(),\n  },\n}));\n\nexport const MarketInteractionModal = React.memo<IProps>((props) => {\n  const {\n    open,\n    closeModal,\n\n    // Input/message\n    messageOrInput,\n    inputActionButtonText,\n    onInputActionButtonPressed,\n    showInputActionButton,\n    inputActionButtonActive,\n\n    // Assets\n    actionAssetSymbol,\n    actionAssetName,\n    distributionAssetSymbol,\n\n    // Tabs\n    currentTabIndex,\n    onTabIndexChange,\n    tab0Title,\n    tab1Title,\n\n    // Action Rates\n    actionName,\n    actionApy,\n    distributionApy,\n\n    // Borrow Limits (Optional)\n    showBorrowLimit,\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitNote,\n\n    // Action button\n    actionButtonActive,\n    actionButtonText,\n    actionButtonDisabledText,\n    actionButtonOnClick,\n\n    // Footer\n    footerMessagesPayloads,\n\n    // TX Waiting\n    assetExplorerLink,\n    explorerName,\n    explorerUrlBaseForTx,\n    activeTxHash,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = props;\n\n  const classes = useStyles();\n\n  const isSupply = actionName === \"Supply\";\n  const isBorrow = actionName === \"Borrow\";\n\n  const formattedMessages = useMemo(() => {}, []);\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n        txHash={activeTxHash}\n        explorerUrlBaseForTx={explorerUrlBaseForTx}\n        explorerName={explorerName}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.marketInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <a\n            target={\"_blank\"}\n            rel={\"noreferrer noopener\"}\n            href={assetExplorerLink}\n          >\n            <TokenIcon\n              symbol={actionAssetSymbol}\n              extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n            />\n          </a>\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h5\"} className={classes.title}>\n              {actionAssetName}\n            </Typography>\n          </div>\n\n          {/* Input or message */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {messageOrInput}\n\n            {showInputActionButton && (\n              <Button\n                color={\"primary\"}\n                style={{ marginRight: \"1.5rem\", maxHeight: \"3rem\" }}\n                variant={\"outlined\"}\n                onClick={onInputActionButtonPressed}\n                disabled={!inputActionButtonActive}\n              >\n                <Typography variant={\"body2\"}>\n                  {inputActionButtonText}\n                </Typography>\n              </Button>\n            )}\n          </div>\n\n          {/* Tabs */}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n            }}\n          >\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 0\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(0)}>\n                <Typography>{tab0Title}</Typography>\n              </Button>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                textAlign: \"center\",\n                borderBottom:\n                  currentTabIndex === 1\n                    ? `2px solid ${BRAND_MAIN_COLOR}`\n                    : \"none\",\n              }}\n            >\n              <Button fullWidth onClick={() => onTabIndexChange(1)}>\n                <Typography>{tab1Title}</Typography>\n              </Button>\n            </div>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Modal action rates */}\n            <ActionRates\n              actionName={actionName}\n              assetSupplyApy={actionApy}\n              assetSymbol={actionAssetSymbol}\n              distributionAssetApy={distributionApy}\n              distributionAssetSymbol={distributionAssetSymbol}\n            />\n            <br />\n\n            {/* Borrow limit rates */}\n            {showBorrowLimit && (\n              <>\n                <br />\n                <BorrowLimitRates\n                  limitOrBalance={isBorrow ? \"Balance\" : \"Limit\"}\n                  borrowLimitUsd={currentBorrowLimit || 0}\n                  borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n                  predictedBorrowLimitPercentage={\n                    usedBorrowLimitPercentageAfterChange || 0\n                  }\n                  predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n                  displayPredictedValues={showPredictedBorrowLimits}\n                  note={borrowLimitNote}\n                />\n                <br />\n              </>\n            )}\n\n            <br />\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={\n                actionButtonActive || !actionButtonDisabledText\n                  ? actionButtonText\n                  : actionButtonDisabledText\n              }\n              disabled={!actionButtonActive}\n            />\n\n            <br />\n            <br />\n\n            {/* DEV_NOTE : Footer inside of body to keep same padding easily */}\n            {/*{footerMessagesPayloads.map((footerMessagesPayload) => (*/}\n            {/*  <>*/}\n            {/*    <ModalFooter*/}\n            {/*      key={footerMessagesPayload.title}*/}\n            {/*      title={footerMessagesPayload.title}*/}\n            {/*      tokenAmount={footerMessagesPayload.tokenAmount}*/}\n            {/*      tokenSymbol={footerMessagesPayload.tokenSymbol}*/}\n            {/*    />*/}\n            {/*    <br key={`br_${footerMessagesPayload.title}`} />*/}\n            {/*  </>*/}\n            {/*))}*/}\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","// DEV_NOTE : Taken from typeless library 'eth-json-rpc-errors';\nexport const JSON_RPC_ERROR_CODES = {\n  rpc: {\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n  },\n};\n","import { ContractTransaction } from \"ethers\";\nimport { useCallback, useState } from \"react\";\nimport { JSON_RPC_ERROR_CODES } from \"../../../constants/ethereumErrorCodes\";\n\nexport type TTxCreatingFunction = () =>\n  | Promise<ContractTransaction>\n  | undefined;\n\nexport function useTxWaitingLogic(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void,\n  closeModalOnSuccess: boolean\n) {\n  const {\n    activeTxHash,\n    setActiveTxHash,\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n  } = useTxWaitingStateExplicit();\n\n  const wrappedTxBuildingFunction = useTxWaitingLogicExplicit(\n    txCreatingFunction,\n    closeModal,\n    setActiveTxHash,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n    closeModalOnSuccess\n  );\n\n  return {\n    activeTxHash,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    wrappedTxBuildingFunction,\n  };\n}\n\nexport function useTxWaitingStateExplicit() {\n  const [activeTxHash, setActiveTxHash] = useState(\"\");\n  const [waitingForUserApproval, setWaitingForUserApproval] = useState(false);\n  const [waitingForTxConfirmation, setWaitingForTxConfirmation] = useState(\n    false\n  );\n\n  return {\n    activeTxHash,\n    setActiveTxHash,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  };\n}\n\n/**\n * Wraps a call to a tx creating function with some UX logic of waiting for user approval and tx confirmation\n */\nexport function useTxWaitingLogicExplicit(\n  txCreatingFunction: TTxCreatingFunction,\n  closeModal: () => void,\n  setActiveTxHash: (val: string) => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void,\n  closeModalOnSuccess: boolean\n) {\n  const wrappedTxBuildingFunction = useCallback(async () => {\n    let contractTx: ContractTransaction | undefined;\n\n    // We are going to ask the user to approve tx\n    setWaitingForUserApproval(true);\n\n    try {\n      contractTx = await txCreatingFunction();\n\n      setActiveTxHash(contractTx?.hash || \"\");\n\n      // We are after user approval, let's wait for the tx to be mined\n      setWaitingForTxConfirmation(true);\n\n      const receipt = await contractTx?.wait();\n      console.log(receipt);\n\n      if (closeModalOnSuccess) {\n        closeModal();\n      }\n    } catch (e) {\n      if (e.code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest) {\n        // User denied tx\n        console.log(\"User denied tx\");\n      } else {\n        // TODO : Have a more user-friendly error communication.\n        // DEV_NOTE :\n        closeModal();\n        throw e;\n      }\n    } finally {\n      // No matter what, we ain't waiting after this line\n      setWaitingForUserApproval(false);\n      setWaitingForTxConfirmation(false);\n    }\n  }, [\n    closeModal,\n    closeModalOnSuccess,\n    setActiveTxHash,\n    setWaitingForTxConfirmation,\n    setWaitingForUserApproval,\n    txCreatingFunction,\n  ]);\n\n  return wrappedTxBuildingFunction;\n}\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { SingleCTokenStore } from \"../../../store/multiInstanceStores/SingleCTokenStore\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { TZeroOrOne } from \"./base/MarketInteractionModal\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\n\nexport function useMarketInteractionModalBase() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n\n  const supplyTokenAddress = assetParams?.address || \"\";\n  const supplyTokenSymbol = assetParams?.symbol || \"\";\n  const supplyTokenName = assetParams?.name || \"\";\n  const distributionTokenSymbol =\n    activeLNStore?.distributionAssetParams.symbol || \"NONE\";\n\n  const walletBalance = cTokenStore?.accountUnderlyingBalanceInUnits || 0;\n  const hasWalletBalance = walletBalance > 0;\n  const needToApprove = !isNativeCoin; // False for native\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const maximillionAddress = activeLNStore?.maximillionAddress || \"\";\n  const currentLiquidityCashUsd = activeLNStore?.liquidityUsd || 0;\n  // const currentBorrowLimitUsd = activeLNStore?.collateralPotentialInUSD || 0;\n\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n  const collateralPotentialInUSD = activeLNStore?.collateralPotentialInUSD || 0;\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  const distributionAssetApy = activeLNStore?.distributionAssetApy || 0;\n  const supplyApy = cTokenStore?.supplyApyInPercentages || 0;\n  const borrowApy = cTokenStore?.borrowApyInPercentages || 0;\n\n  // Can they borrow more ?\n  const currentLiquidityUsd = activeLNStore?.liquidityUsd || 0;\n  const hasAvailableLiquidity = currentLiquidityUsd > 0; // True means user can borrow&withdraw\n\n  // How many units can the user borrow more\n  const liquidityInAssetUnits = currentLiquidityUsd / pricePerUnitUsd;\n\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  return {\n    accountStore,\n    modalsStore,\n    lendingNetworksStore,\n    activeLNStore,\n    assetBaseAddress,\n    maximillionAddress,\n    isNativeCoin,\n    cTokenStore,\n    cToken,\n    supplyTokenAddress,\n    supplyTokenSymbol,\n    supplyTokenName,\n    distributionTokenSymbol,\n    isCollaterable,\n    collateralPotentialInUSD,\n\n    walletBalance,\n    hasWalletBalance,\n    needToApprove,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentLiquidityCashUsd,\n    // currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n\n    distributionAssetApy,\n    supplyApy,\n    borrowApy,\n\n    hasAvailableLiquidity,\n    liquidityInAssetUnits,\n  };\n}\n\nexport function useMarketInteractionModalTabsState() {\n  const [activeTabIndex, setActiveTabIndex] = useState<TZeroOrOne>(0);\n\n  const borrowTabIndex = 0;\n  const repayTabIndex = 1;\n  const tab0Title = \"Borrow\";\n  const tab1Title = \"Repay\";\n\n  const isBorrow = activeTabIndex === borrowTabIndex;\n  const isRepay = activeTabIndex === repayTabIndex;\n\n  return {\n    activeTabIndex,\n    setActiveTabIndex,\n  };\n}\n\nexport function useMarketInteractionActiveTabState(activeTabIndex: TZeroOrOne) {\n  return [activeTabIndex === 0, activeTabIndex === 1];\n}\n\nexport function useOnEnableClicked(\n  cToken: string,\n  assetBaseAddress: string,\n  closeModal: () => void,\n  setActiveTxHash: (val: string) => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const accountStore = useAccountStore();\n\n  const createEnableTx = useCallback(() => {\n    return accountStore.approveErc20Usage(\n      assetBaseAddress,\n      cToken,\n      ethers.constants.MaxUint256\n    );\n  }, [accountStore, assetBaseAddress, cToken]);\n\n  const wrappedEnableTx = useTxWaitingLogicExplicit(\n    createEnableTx,\n    closeModal,\n    setActiveTxHash,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n    false\n  );\n\n  const onEnableClicked = useCallback(async () => {\n    if (!cToken) {\n      return console.log(\"No CToken Address\");\n    }\n\n    await wrappedEnableTx();\n\n    console.log(`Enable button clicked`);\n    await console.log(`Enable is done !`);\n  }, [cToken, wrappedEnableTx]);\n\n  return onEnableClicked;\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimits(\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  collateralFactorInUnits: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = priceSensitivizer(\n    actionEffectInUsd * collateralFactorInUnits\n  );\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n  );\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(totalAccountBorrowBalanceUsd / borrowLimitAfterChange) *\n    100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\n/**\n *\n * @param currentBorrowLimitUsd\n * @param totalAccountBorrowBalanceUsd sum of all active borrows in USD\n * @param actionInUnits DEV_NOTE : Units should be negative for actions that reduce collateral (borrow/withdraw)\n * @param unitPriceInUsd\n * @param collateralFactorInUnits\n */\nexport function useCalculateChangeInBorrowLimitsForBorrow(\n  collateralPotentialInUSD: number,\n  currentBorrowLimitUsd: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const collateralValueOfActionEffect = actionEffectInUsd;\n\n  const borrowLimitAfterChange = priceSensitivizer(\n    currentBorrowLimitUsd + collateralValueOfActionEffect\n    // currentBorrowLimitUsd\n  );\n\n  const totalAccountBorrowBalanceUsdAfterAction =\n    totalAccountBorrowBalanceUsd + Math.abs(actionEffectInUsd);\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(\n      totalAccountBorrowBalanceUsdAfterAction / collateralPotentialInUSD\n    ) * 100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\nexport function useCalculateChangeInBorrowBalance(\n  collateralPotentialInUSD: number,\n  totalAccountBorrowBalanceUsd: number,\n  actionInUnits: number,\n  unitPriceInUsd: number,\n  // Indicates the decimals used to calculate the prices in the smart contract.\n  // This will prevent js float calculation from interfering.\n  // For example, when withdrawing maximum amount, the float rounding\n  // could cause the app to think that this will lead to shortfall\n  // (because the value will we an something like -1e14.\n  pricePrecision: number\n) {\n  const priceSensitivizer = buildSensitivizer(pricePrecision);\n  const actionEffectInUsd = priceSensitivizer(actionInUnits * unitPriceInUsd);\n\n  const borrowBalanceAfterChange = priceSensitivizer(\n    totalAccountBorrowBalanceUsd + actionEffectInUsd\n    // currentBorrowLimitUsd\n  );\n\n  const totalAccountBorrowBalanceUsdAfterAction =\n    totalAccountBorrowBalanceUsd + Math.abs(actionEffectInUsd);\n\n  const usedBorrowLimitPercentageAfterChange =\n    priceSensitivizer(\n      totalAccountBorrowBalanceUsdAfterAction / collateralPotentialInUSD\n    ) * 100;\n\n  const actionLeadsToShortfall = usedBorrowLimitPercentageAfterChange > 100;\n\n  return {\n    actionEffectInUsd,\n    actionLeadsToShortfall,\n    borrowBalanceAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  };\n}\n\nexport function usePriceInSensitivity(price: number, sensitivity: number) {\n  return useMemo(() => {\n    return sensitivizePrice(price, sensitivity);\n  }, [price, sensitivity]);\n}\n\nexport function useSensitivizer(sensitivity: number) {\n  return useCallback(\n    (price: number) => {\n      return sensitivizePrice(price, sensitivity);\n    },\n    [sensitivity]\n  );\n}\n\nexport function buildSensitivizer(sensitivity: number) {\n  return (price: number) => {\n    return sensitivizePrice(price, sensitivity);\n  };\n}\n\nfunction sensitivizePrice(price: number, sensitivity: number): number {\n  return parseFloat(price.toFixed(sensitivity));\n}\n","import React from \"react\";\nimport { Fade, makeStyles, Typography } from \"@material-ui/core\";\nimport { TokenIcon } from \"../../../../icons/TokenIcon\";\nimport { Link } from \"react-router-dom\";\n\ninterface IProps {\n  tokenSymbol: string;\n  message: string;\n  subMessage?: string;\n  explorerLink: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    paddingTop: \"1rem\",\n    padding: \"2.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  largeIcon: {\n    width: \"3rem\",\n    height: \"3rem\",\n  },\n  fadeIn: {\n    transition: \"500ms\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      transform: \"scale(1.1)\",\n      // animation: \"$fadeIn 300ms\",\n      // border: \"1px solid red\",\n      // backgroundColor: theme.palette.primary.main,\n      // padding: `2.0rem`,\n      // height: \"3.5rem\",\n      // width: \"3.5rem\",\n    },\n  },\n\n  \"@keyframes fadeIn\": {\n    // from: { opacity: 1 },\n    // to: { opacity: 0 },\n    \"0%\": {\n      // opacity: 1,\n    },\n    \"100%\": {\n      // opacity: 0,\n    },\n  },\n}));\n\nexport const MainModalMessage = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { tokenSymbol, message, subMessage, explorerLink } = props;\n\n  return (\n    <div className={classes.container}>\n      <a target={\"_blank\"} rel={\"noreferrer noopener\"} href={explorerLink}>\n        <TokenIcon\n          symbol={tokenSymbol}\n          extraClasses={[classes.largeIcon, classes.fadeIn]}\n        />\n      </a>\n      <br />\n      {/*<Typography variant={\"h6\"}>Message ${tokenSymbol}</Typography>*/}\n      <Typography>{message}</Typography>\n      {subMessage && (\n        <>\n          <Typography variant={\"body2\"}>{subMessage}</Typography>{\" \"}\n        </>\n      )}\n    </div>\n  );\n});\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n  TZeroOrOne,\n} from \"./base/MarketInteractionModal\";\nimport { Button, Input, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\nimport { useSystemStore } from \"../../../store/storeHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const SupplyModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const systemStore = useSystemStore();\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n      collateralPotentialInUSD,\n\n      walletBalance,\n      hasWalletBalance,\n      needToApprove,\n\n      distributionTokenSymbol,\n      supplyTokenAddress,\n      supplyTokenSymbol,\n      supplyTokenName,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      // currentBorrowLimitUsd,\n      collateralFactorInUnits,\n      usedBorrowPercentage,\n      totalAccountBorrowBalanceUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      hasAvailableLiquidity,\n      liquidityInAssetUnits,\n    } = useMarketInteractionModalBase();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const {\n      activeTxHash,\n      setActiveTxHash,\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const [isSupply, isWithdraw] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    // TODO : C.F.H : Follow the 'repay max' example\n    const [isAskingToWithdrawAll, setIsAskingToWithdrawAll] = useState(false);\n    const [supplyInputValue, setSupplyInputValue] = useState(0);\n    const [withdrawInputValue, setWithdrawInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsAskingToWithdrawAll(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setSupplyInputValue(0);\n      setWithdrawInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Supply\";\n    const tab1Title = \"Withdraw\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\", appearance: \"none\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isSupply ? supplyInputValue : withdrawInputValue}\n            onChange={(e) =>\n              isSupply\n                ? setSupplyInputValue(sanitizeNumericInput(e.target.value))\n                : setWithdrawInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [isSupply, supplyInputValue, withdrawInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    const currentSupplyBalanceInUnits = cTokenStore?.accountSupplyInUnits || 0;\n    const currentSupplyBalanceInUsd = cTokenStore?.accountSupplyBalanceUsd || 0;\n    const currentSupplyBalanceInOTokens =\n      cTokenStore?.accountSupplyInOTokensRaw || BigNumber.from(0);\n    const hasSupplyBalance = currentSupplyBalanceInUnits > 0;\n    const hasBorrowBalance = totalAccountBorrowBalanceUsd > 0;\n\n    const onAskToWithdrawAllToggleClicked = useCallback(() => {\n      console.log(`set 'asking to withdraw all' to ${!isAskingToWithdrawAll}'`);\n      setIsAskingToWithdrawAll(!isAskingToWithdrawAll);\n    }, [isAskingToWithdrawAll]);\n\n    const createSupplyTx = () =>\n      accountStore.supplyToMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          supplyInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const createWithdrwaTx = () =>\n      accountStore.withdrawFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          withdrawInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const createWithdrawAllTx = useCallback(\n      () =>\n        // DEV_NOTE : In order to draw all, we draw by specific amount of all of the oTokens\n        accountStore.withdrawFromMarketByOTokens(\n          cToken,\n          currentSupplyBalanceInOTokens,\n          isNativeCoin,\n          maximillionAddress\n        ),\n      [\n        accountStore,\n        cToken,\n        currentSupplyBalanceInOTokens,\n        isNativeCoin,\n        maximillionAddress,\n      ]\n    );\n\n    console.log(\n      `Underlying decimals (${supplyTokenSymbol}) : ${cTokenStore?.underlyingDecimals}`\n    );\n\n    console.log(`Input value : ${withdrawInputValue.toString()}`);\n\n    const wrappedSupplyTx = useTxWaitingLogicExplicit(\n      createSupplyTx,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n      true\n    );\n\n    const wrappedWithdrawTx = useTxWaitingLogicExplicit(\n      createWithdrwaTx,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n      true\n    );\n\n    const wrappedWithdrawAllTx = useTxWaitingLogicExplicit(\n      createWithdrawAllTx,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n      true\n    );\n\n    const onSupplyClicked = useCallback(async () => {\n      console.log(`Supply button clicked`);\n\n      await wrappedSupplyTx();\n\n      console.log(`Supply is done !`);\n    }, [wrappedSupplyTx]);\n\n    const onWithdrawClicked = useCallback(async () => {\n      console.log(`Withdraw button clicked`);\n\n      // Withdraw all or just some ?\n      if (isAskingToWithdrawAll) {\n        await wrappedWithdrawAllTx();\n      } else {\n        await wrappedWithdrawTx();\n      }\n\n      console.log(`Withdraw is done !`);\n    }, [isAskingToWithdrawAll, wrappedWithdrawAllTx, wrappedWithdrawTx]);\n\n    const supplyTokenExplorerLink = `${systemStore.explorerBaseAddressUrl}/${supplyTokenAddress}`;\n\n    console.log({ isAskingToWithdrawAll });\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isSupply) {\n        if (needToApprove && !hasApprovedERC20) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n              explorerLink={supplyTokenExplorerLink}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isWithdraw) {\n        if (isAskingToWithdrawAll) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Withdrawing all`}\n              subMessage={`~${(+currentSupplyBalanceInUnits.toFixed(\n                4\n              )).toLocaleString()}`}\n              explorerLink={supplyTokenExplorerLink}\n            />\n          );\n        } else {\n          // Input component - how much to withdraw ?\n          return inputComponent;\n        }\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentSupplyBalanceInUnits,\n      hasApprovedERC20,\n      inputComponent,\n      isAskingToWithdrawAll,\n      isSupply,\n      isWithdraw,\n      needToApprove,\n      supplyTokenExplorerLink,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      const payloads: TModalFooterMessagePayload[] = [\n        {\n          title: `${supplyTokenSymbol} Price`,\n          tokenAmount: pricePerUnitUsd,\n          tokenSymbol: \"$\",\n        },\n        {\n          title: \"Currently Supplying\",\n          tokenAmount: currentSupplyBalanceInUnits,\n          tokenSymbol: supplyTokenSymbol,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n          tokenSymbol: supplyTokenSymbol,\n        },\n      ];\n\n      return payloads;\n    }, [\n      currentSupplyBalanceInUnits,\n      pricePerUnitUsd,\n      supplyTokenSymbol,\n      walletBalance,\n    ]);\n\n    // const isAskingToWithdrawAllAndCan = isAskingToWithdrawAll &&\n\n    // Must have wallet balance in this asset + Must approve (if needed)\n    const canSupply =\n      hasWalletBalance && (needToApprove ? hasApprovedERC20 : true);\n    const canWithdraw = hasSupplyBalance;\n\n    const borrowLimitNote = !isCollaterable\n      ? `Enable ${supplyTokenSymbol} as collateral to affect Borrow limit`\n      : undefined;\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n        assetExplorerLink: supplyTokenExplorerLink,\n\n        // Borrow Limit (optional)\n        currentBorrowLimit: collateralPotentialInUSD,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        explorerName: systemStore.explorerName,\n        explorerUrlBaseForTx: systemStore.explorerBaseTxUrl,\n        activeTxHash,\n        waitingForTxConfirmation,\n        waitingForUserApproval,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      activeTxHash,\n      collateralPotentialInUSD,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenExplorerLink,\n      supplyTokenName,\n      supplyTokenSymbol,\n      systemStore.explorerBaseTxUrl,\n      systemStore.explorerName,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for supply\n    const marketModalStatePayloadForSupplyTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isSupplyInputValueValid = supplyInputValue > 0;\n      const isOfferingMoreThanWalletBalance = supplyInputValue > walletBalance;\n      const actionButtonTextForSupply = canSupply\n        ? \"Supply\"\n        : needToApprove\n        ? \"Approve\"\n        : \"No Balance\";\n\n      const activeButtonActive =\n        (isSupplyInputValueValid &&\n          canSupply &&\n          !isOfferingMoreThanWalletBalance) ||\n        (needToApprove && !hasApprovedERC20);\n      const actionButtonCbForSupply = canSupply\n        ? onSupplyClicked\n        : onEnableClicked;\n\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      if (!hasWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"No balance to supply\";\n      } else if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToWithdraw = \"Exceeding wallet balance\";\n      } else if (!isSupplyInputValueValid) {\n        // No message\n        // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n      }\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        supplyInputValue,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits =\n        isCollaterable && collateralValueOfActionEffect !== 0;\n\n      // Input action button\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"\",\n        showInputActionButton: false,\n        inputActionButtonActive: false,\n        onInputActionButtonPressed: undefined,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : We want to show the effect of both supply and withdraw on the borrow limits\n        showBorrowLimit: isWithdraw || canSupply,\n        borrowLimitAfterChange: borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForSupply,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowLimitNote,\n      canSupply,\n      collateralFactorInUnits,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasWalletBalance,\n      isCollaterable,\n      isWithdraw,\n      messageOrInputComponent,\n      needToApprove,\n      onEnableClicked,\n      onSupplyClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      supplyApy,\n      supplyInputValue,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    // Payload for withdraw\n    const marketModalStatePayloadForWithdrawTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // If requesting to withdraw all, let's make sure the balances will remain ok\n      const withdrawUnitsForShortfallCalculationWhenCollaterized = isAskingToWithdrawAll\n        ? currentSupplyBalanceInUnits\n        : withdrawInputValue;\n\n      const withdrawUnitsForShortfallCalculation = isCollaterable\n        ? withdrawUnitsForShortfallCalculationWhenCollaterized\n        : 0;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        actionLeadsToShortfall,\n        collateralValueOfActionEffect,\n        borrowLimitAfterChange,\n        usedBorrowLimitPercentageAfterChange,\n      } = useCalculateChangeInBorrowLimits(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        withdrawUnitsForShortfallCalculation * -1,\n        pricePerUnitUsd,\n        collateralFactorInUnits,\n        priceCalculationDecimals\n      );\n\n      // These params are needed but area calculated a bit differently for when asking to borrow all vs a specific amount\n      let reasonForNotBeingAbleToWithdraw = undefined;\n      let showPredictedBorrowLimits = false;\n      let withdrawButtonActive = false;\n\n      // Is asking to withdraw all ?\n      if (isAskingToWithdrawAll) {\n        showPredictedBorrowLimits = isCollaterable;\n\n        if (actionLeadsToShortfall) {\n          reasonForNotBeingAbleToWithdraw = \"Will cause shortfall\";\n        }\n\n        withdrawButtonActive = !actionLeadsToShortfall;\n      } else {\n        // Specific amount\n        const withdrawInputValid = withdrawInputValue > 0;\n        const isRequestingMoreThanSuppliedBalance =\n          withdrawInputValue > currentSupplyBalanceInUnits;\n\n        // Make sure the user does not fall into shortfall.\n        // DEV_NOTE : This is used to ensure that withdraw will be allowed when there is no borrow +\n        //            when this asset is not used as collateral\n        const isRequestLegal =\n          !actionLeadsToShortfall ||\n          !hasBorrowBalance ||\n          (hasBorrowBalance && !isCollaterable);\n\n        withdrawButtonActive =\n          canWithdraw &&\n          withdrawInputValid &&\n          !isRequestingMoreThanSuppliedBalance &&\n          isRequestLegal;\n\n        if (!hasSupplyBalance) {\n          reasonForNotBeingAbleToWithdraw = \"No balance to withdraw\";\n        } else if (isRequestingMoreThanSuppliedBalance) {\n          reasonForNotBeingAbleToWithdraw = \"Exceeding supplied balance\";\n        } else if (!withdrawInputValid) {\n          // No message\n          // reasonForNotBeingAbleToWithdraw = \"Invalid sum\";\n        }\n\n        showPredictedBorrowLimits =\n          isCollaterable && collateralValueOfActionEffect !== 0;\n      }\n\n      // General params\n      const actionButtonCbForWithdraw = onWithdrawClicked;\n      const actionButtonTextForWithdraw = \"Withdraw\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToWithdraw;\n      const showWithdrawMax = hasSupplyBalance;\n      const isWithdrawMaxActive = hasSupplyBalance;\n      const withdrawAllToggleButtonText = isAskingToWithdrawAll\n        ? \"Cancel\"\n        : \"All\";\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: withdrawAllToggleButtonText,\n        showInputActionButton: showWithdrawMax,\n        inputActionButtonActive: isWithdrawMaxActive,\n        onInputActionButtonPressed: onAskToWithdrawAllToggleClicked,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: supplyApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: isWithdraw,\n        borrowLimitAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n        borrowLimitNote,\n\n        // Action button\n        actionButtonActive: withdrawButtonActive,\n        actionButtonText: actionButtonTextForWithdraw,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForWithdraw,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      isAskingToWithdrawAll,\n      currentSupplyBalanceInUnits,\n      withdrawInputValue,\n      isCollaterable,\n      collateralPotentialInUSD,\n      totalAccountBorrowBalanceUsd,\n      pricePerUnitUsd,\n      collateralFactorInUnits,\n      priceCalculationDecimals,\n      onWithdrawClicked,\n      hasSupplyBalance,\n      messageOrInputComponent,\n      onAskToWithdrawAllToggleClicked,\n      supplyApy,\n      distributionAssetApy,\n      isWithdraw,\n      borrowLimitNote,\n      footerMessagePayloads,\n      hasBorrowBalance,\n      canWithdraw,\n    ]);\n\n    const statePerTabPayload = isSupply\n      ? marketModalStatePayloadForSupplyTab\n      : marketModalStatePayloadForWithdrawTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  IMarketModalCommonStatePayload,\n  IMarketModalPerTabStatePayload,\n  IMarketModalStatePayload,\n  MarketInteractionModal,\n} from \"./base/MarketInteractionModal\";\nimport { Input } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport {\n  useCalculateChangeInBorrowBalance,\n  useMarketInteractionActiveTabState,\n  useMarketInteractionModalBase,\n  useMarketInteractionModalTabsState,\n  useOnEnableClicked,\n} from \"./marketInteractionModalHooks\";\nimport { MainModalMessage } from \"./base/mainModalMessage/MainModalMessage\";\nimport {\n  useTxWaitingLogicExplicit,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { TModalFooterMessagePayload } from \"./base/ModalFooter\";\nimport { useSystemStore } from \"../../../store/storeHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ONATIVE_MAX_REPAY_FACTOR = 1.05;\n// Percentage in factor from max limit that is considered safe.\nconst SAFE_BORROW_FACTOR = 0.4;\n\nexport const BorrowModal = observer<React.FunctionComponent<IProps>>(\n  (props) => {\n    const { open, closeModal } = props;\n\n    const systemStore = useSystemStore();\n\n    const {\n      lendingNetworksStore,\n      cTokenStore,\n      modalsStore,\n      accountStore,\n      assetBaseAddress,\n      maximillionAddress,\n      activeLNStore,\n      isNativeCoin,\n      cToken,\n      isCollaterable,\n\n      walletBalance,\n      needToApprove,\n      hasWalletBalance,\n\n      collateralPotentialInUSD,\n      distributionTokenSymbol,\n      supplyTokenAddress,\n      supplyTokenSymbol,\n      supplyTokenName,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      collateralFactorInUnits,\n      priceCalculationDecimals,\n      // currentBorrowLimitUsd,\n      pricePerUnitUsd,\n      distributionAssetApy,\n      borrowApy,\n      supplyApy,\n\n      liquidityInAssetUnits,\n      hasAvailableLiquidity,\n    } = useMarketInteractionModalBase();\n\n    const {\n      activeTxHash,\n      setActiveTxHash,\n      waitingForUserApproval,\n      waitingForTxConfirmation,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n    } = useTxWaitingStateExplicit();\n\n    const {\n      activeTabIndex,\n      setActiveTabIndex,\n    } = useMarketInteractionModalTabsState();\n\n    const [isBorrow, isRepay] = useMarketInteractionActiveTabState(\n      activeTabIndex\n    );\n\n    const onEnableClicked = useOnEnableClicked(\n      cToken,\n      assetBaseAddress,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation\n    );\n\n    const [isRepayingMax, setIsRepayingMax] = useState(false);\n    const [borrowInputValue, setBorrowInputValue] = useState(0);\n    const [repayInputValue, setRepayInputValue] = useState(0);\n\n    useEffect(() => {\n      let newToken = cToken;\n      setIsRepayingMax(false);\n    }, [cToken]);\n\n    const clearStateBeforeClose = useCallback(() => {\n      setBorrowInputValue(0);\n      setRepayInputValue(0);\n      closeModal();\n    }, [closeModal]);\n\n    // Constants\n    const tab0Title = \"Borrow\";\n    const tab1Title = \"Repay\";\n\n    // TODO : Separate inputs for each usage / make a component\n    const inputComponent = useMemo(() => {\n      return (\n        <div\n          style={{\n            width: \"100%\",\n            padding: \"2.5rem\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Input\n            style={{ textAlign: \"center\" }}\n            inputProps={{ style: { textAlign: \"center\" } }}\n            type={\"number\"}\n            title={\"Input\"}\n            name={\"Input\"}\n            value={isBorrow ? borrowInputValue : repayInputValue}\n            onChange={(e) =>\n              isBorrow\n                ? setBorrowInputValue(sanitizeNumericInput(e.target.value))\n                : setRepayInputValue(sanitizeNumericInput(e.target.value))\n            }\n          />\n        </div>\n      );\n    }, [borrowInputValue, isBorrow, repayInputValue]);\n\n    // TODO : CRITICAL : Add test for 'some' approval (not unlimitted) as well\n    const hasApprovedERC20 = cTokenStore?.hasAnyAllowance;\n    // Is our user borrowing this asset ?\n    const currentBorrowBalance = cTokenStore?.accountBorrowInUnits || 0;\n    const hasBorrowBalance = currentBorrowBalance > 0;\n    const needsToButNotYetApproved = needToApprove && !hasApprovedERC20;\n\n    const createBorrowTx = () =>\n      accountStore.borrowFromMarket(\n        cToken,\n        ethers.utils.parseUnits(\n          borrowInputValue.toString(),\n          cTokenStore?.underlyingDecimals || -1\n        ),\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const repayAmount = useMemo(() => {\n      if (isRepayingMax) {\n        if (isNativeCoin) {\n          // TODO : Go over this calculation and maybe use fixed decimals/from chain store + put the factor somewhere proper\n          return ethers.utils.parseUnits(\n            (currentBorrowBalance * ONATIVE_MAX_REPAY_FACTOR).toString(),\n            cTokenStore?.underlyingDecimals || 0\n          );\n        } else {\n          return ethers.constants.MaxUint256;\n        }\n      } else {\n        return ethers.utils.parseUnits(\n          repayInputValue.toString(),\n          cTokenStore?.underlyingDecimals || 0\n        );\n      }\n    }, [\n      cTokenStore?.underlyingDecimals,\n      currentBorrowBalance,\n      isNativeCoin,\n      isRepayingMax,\n      repayInputValue,\n    ]);\n\n    const createRepayTx = () =>\n      accountStore.repayToMarket(\n        cToken,\n        repayAmount,\n        isNativeCoin,\n        maximillionAddress\n      );\n\n    const wrappedBorrowTx = useTxWaitingLogicExplicit(\n      createBorrowTx,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n      true\n    );\n\n    const wrappedRepayTx = useTxWaitingLogicExplicit(\n      createRepayTx,\n      closeModal,\n      setActiveTxHash,\n      setWaitingForUserApproval,\n      setWaitingForTxConfirmation,\n      true\n    );\n\n    const onBorrowClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      console.log(`Borrow button clicked`);\n      await wrappedBorrowTx();\n      console.log(`Borrow is done !`);\n    }, [cToken, wrappedBorrowTx]);\n    const onBorrowMaxSafeClicked = useCallback(async () => {\n      if (!cToken) {\n        return console.log(\"No CToken Address\");\n      }\n\n      const safeAmountInUsd = collateralPotentialInUSD * SAFE_BORROW_FACTOR;\n      const amountLeftToSafe = safeAmountInUsd - totalAccountBorrowBalanceUsd;\n\n      if (amountLeftToSafe < 0) {\n        console.log(\n          `Already over safe borrow amount : safe is : ${safeAmountInUsd} | borrowedUsd is ${totalAccountBorrowBalanceUsd}`\n        );\n        setBorrowInputValue(0);\n      } else {\n        const safeBorrowInUnits =\n          cTokenStore?.getUnitsForUsdValue(amountLeftToSafe) || 0;\n\n        // TODO : CRITICAL : Move to constants\n        // DEV_NOTE : Decided to round up to 6 ( the markets decimals are 8 - this leaves us some space + this is the lowest decimals for all base assets - so we can safely use it)\n        setBorrowInputValue(parseFloat(safeBorrowInUnits.toFixed(6)));\n      }\n    }, [\n      cToken,\n      cTokenStore,\n      collateralPotentialInUSD,\n      totalAccountBorrowBalanceUsd,\n    ]);\n\n    const onRepayClicked = useCallback(async () => {\n      console.log(`Repay button clicked`);\n      await wrappedRepayTx();\n      console.log(`Repay is done !`);\n    }, [wrappedRepayTx]);\n\n    // How many units does the cToken holds ?\n    const cTokenCashInUnits = cTokenStore?.cTokenCashInUnits || 0;\n\n    // Is borrowing from this asset ?\n    const accountBorrowInUnits = cTokenStore?.accountBorrowInUnits || 0;\n\n    // How much underlying (in USD) does the market hold ?\n    const cTokenCashInUsd = cTokenStore?.cTokenCashInUSD || 0;\n\n    const repayIsZero = repayInputValue === 0;\n    const hasEnoughToRepayAll = walletBalance > accountBorrowInUnits;\n    const canRepayMax = hasWalletBalance && hasEnoughToRepayAll && !repayIsZero;\n\n    const onSetRepayToMaxClicked = useCallback(() => {\n      console.log(\"set repay max\");\n      setIsRepayingMax(!isRepayingMax);\n    }, [isRepayingMax]);\n\n    const supplyTokenExplorerLink = `${systemStore.explorerBaseAddressUrl}/${supplyTokenAddress}`;\n    console.log({ supplyTokenExplorerLink });\n\n    const messageOrInputComponent = useMemo<ReactNode>(() => {\n      if (isRepay) {\n        if (needsToButNotYetApproved) {\n          // Message component - needs to approve\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Please approve ${supplyTokenSymbol} usage`}\n              explorerLink={supplyTokenExplorerLink}\n            />\n          );\n        } else if (isRepayingMax) {\n          return (\n            <MainModalMessage\n              tokenSymbol={supplyTokenSymbol}\n              message={`Repaying all (~${(+currentBorrowBalance.toFixed(\n                2\n              )).toLocaleString()})`}\n              explorerLink={supplyTokenExplorerLink}\n            />\n          );\n        } else {\n          // Input component - how much to supply ?\n          return inputComponent;\n        }\n      } else if (isBorrow) {\n        // Input component - how much to withdraw ?\n        return inputComponent;\n      }\n\n      // Safe error\n      return <></>;\n    }, [\n      currentBorrowBalance,\n      inputComponent,\n      isBorrow,\n      isRepay,\n      isRepayingMax,\n      needsToButNotYetApproved,\n      supplyTokenExplorerLink,\n      supplyTokenSymbol,\n    ]);\n\n    const footerMessagePayloads = useMemo<TModalFooterMessagePayload[]>(() => {\n      return [\n        {\n          title: `${supplyTokenSymbol} Price`,\n          tokenAmount: pricePerUnitUsd,\n          tokenSymbol: \"$\",\n        },\n        {\n          title: \"Currently Borrowing\",\n          tokenAmount: accountBorrowInUnits,\n          tokenSymbol: supplyTokenSymbol,\n        },\n        {\n          title: \"Wallet Balance\",\n          tokenAmount: walletBalance,\n          tokenSymbol: supplyTokenSymbol,\n        },\n      ];\n    }, [\n      accountBorrowInUnits,\n      pricePerUnitUsd,\n      supplyTokenSymbol,\n      walletBalance,\n    ]);\n\n    // // Must have active borrow in this asset + Must approve (if needed)\n    // const canRepay =\n    //   hasBorrowBalance && (needToApprove ? hasApprovedERC20 : true);\n\n    // TODO : Make sure this is a right assumption\n    // Either what the user is allowed to borrow, or everything there is.\n    const maxPossibleBorrow = Math.max(\n      liquidityInAssetUnits,\n      cTokenCashInUnits\n    );\n\n    // Common payload part\n    const commonPayloadPart = useMemo<IMarketModalCommonStatePayload>(() => {\n      const commonModalState: IMarketModalCommonStatePayload = {\n        // Tabs\n        currentTabIndex: activeTabIndex,\n        onTabIndexChange: setActiveTabIndex,\n        tab0Title,\n        tab1Title,\n\n        // Assets\n        actionAssetSymbol: supplyTokenSymbol,\n        actionAssetName: supplyTokenName,\n        distributionAssetSymbol: distributionTokenSymbol,\n        assetExplorerLink: supplyTokenExplorerLink,\n\n        // Borrow Limit (optional)\n        // DEV_NOTE : This was a quick-fix, so the names were not changed. What\n        //            we want to show is the borrow balance (not limit)\n        currentBorrowLimit: totalAccountBorrowBalanceUsd,\n        usedBorrowLimitPercentage: usedBorrowPercentage,\n\n        // Tx Waiting\n        explorerName: systemStore.explorerName,\n        explorerUrlBaseForTx: systemStore.explorerBaseTxUrl,\n        activeTxHash,\n        waitingForUserApproval,\n        waitingForTxConfirmation,\n      };\n\n      return commonModalState;\n    }, [\n      activeTabIndex,\n      activeTxHash,\n      distributionTokenSymbol,\n      setActiveTabIndex,\n      supplyTokenExplorerLink,\n      supplyTokenName,\n      supplyTokenSymbol,\n      systemStore.explorerBaseTxUrl,\n      systemStore.explorerName,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n      waitingForTxConfirmation,\n      waitingForUserApproval,\n    ]);\n\n    // Payload for Borrow\n    const marketModalStatePayloadForBorrowTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      // Calculate the changes to borrow limit (USD and % used)\n      const {\n        actionLeadsToShortfall,\n        actionEffectInUsd,\n        usedBorrowLimitPercentageAfterChange,\n        borrowBalanceAfterChange,\n      } = useCalculateChangeInBorrowBalance(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        borrowInputValue, // Borrowing more will increase the borrow balance\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const isRequestingMoreThanCanBorrow =\n        borrowInputValue > maxPossibleBorrow;\n\n      const borrowUsdSum = actionEffectInUsd;\n      const isRequestingMoreThanMarketLiquidity =\n        borrowUsdSum > cTokenCashInUsd;\n\n      const canBorrow =\n        hasAvailableLiquidity &&\n        !isRequestingMoreThanCanBorrow &&\n        !isRequestingMoreThanMarketLiquidity &&\n        !actionLeadsToShortfall;\n\n      let reasonForNotBeingAbleToBorrow = undefined;\n      if (!hasAvailableLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Borrowing limit reached\";\n      } else if (isRequestingMoreThanCanBorrow) {\n        reasonForNotBeingAbleToBorrow = \"Requesting more than can borrow\";\n      } else if (isRequestingMoreThanMarketLiquidity) {\n        reasonForNotBeingAbleToBorrow = \"Exceeding market liquidity\";\n      } else if (actionLeadsToShortfall) {\n        reasonForNotBeingAbleToBorrow = \"Leads to shortfall\";\n      }\n\n      const actionButtonTextForBorrow = \"Borrow\";\n      const actionButtonDisabledText = reasonForNotBeingAbleToBorrow;\n\n      const activeButtonActive = canBorrow && borrowInputValue > 0;\n\n      const actionButtonCbForSupply = onBorrowClicked;\n\n      const showPredictedBorrowLimits = actionEffectInUsd !== 0;\n\n      const canBorrowMoreSafely =\n        usedBorrowPercentage < SAFE_BORROW_FACTOR * 100;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText: \"Max Safe\",\n        showInputActionButton: true,\n        inputActionButtonActive: canBorrowMoreSafely,\n        onInputActionButtonPressed: onBorrowMaxSafeClicked,\n\n        // Action Rates\n        actionName: \"Borrow\",\n        actionApy: borrowApy,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: true,\n        borrowLimitAfterChange: borrowBalanceAfterChange,\n        usedBorrowLimitPercentageAfterChange: usedBorrowLimitPercentageAfterChange,\n        showPredictedBorrowLimits,\n\n        // Action button\n        actionButtonActive: activeButtonActive,\n        actionButtonText: actionButtonTextForBorrow,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForSupply,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      borrowApy,\n      borrowInputValue,\n      cTokenCashInUsd,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasAvailableLiquidity,\n      maxPossibleBorrow,\n      messageOrInputComponent,\n      onBorrowClicked,\n      onBorrowMaxSafeClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      totalAccountBorrowBalanceUsd,\n      usedBorrowPercentage,\n    ]);\n\n    // Payload for repay\n    const marketModalStatePayloadForRepayTab = useMemo<IMarketModalPerTabStatePayload>(() => {\n      const isApproveDoneWith = needToApprove ? hasApprovedERC20 : true;\n\n      const isOfferingMoreThanWalletBalance = repayInputValue > walletBalance;\n      const isOfferingMoreThanHasBorrowed =\n        repayInputValue > accountBorrowInUnits;\n\n      // Must have enough wallet balance in this asset + Must approve (if needed)\n      const canRepay =\n        (hasWalletBalance &&\n          !isOfferingMoreThanWalletBalance &&\n          !isOfferingMoreThanHasBorrowed &&\n          !repayIsZero &&\n          isApproveDoneWith) ||\n        isRepayingMax;\n\n      const actionButtonActive = canRepay || needsToButNotYetApproved;\n      const actionButtonCbForRepay = needsToButNotYetApproved\n        ? onEnableClicked\n        : onRepayClicked;\n\n      let reasonForNotBeingAbleToRepay = undefined;\n      if (isOfferingMoreThanWalletBalance) {\n        reasonForNotBeingAbleToRepay = \"Exceeding wallet balance\";\n      } else if (isOfferingMoreThanHasBorrowed) {\n        reasonForNotBeingAbleToRepay = \"Exceeding borrowed amount\";\n      } else if (repayIsZero) {\n        // DEV_NOTE : Will be disabled with the call to action\n        reasonForNotBeingAbleToRepay = \"Repay\";\n      }\n\n      const actionButtonTextForRepay = canRepay\n        ? \"Repay\"\n        : needToApprove\n        ? \"Approve\"\n        : \"\";\n\n      const actionButtonDisabledText = reasonForNotBeingAbleToRepay;\n\n      // Calculate borrow limit (USD and % used) after requested withdraw\n      const {\n        usedBorrowLimitPercentageAfterChange,\n        actionEffectInUsd,\n        actionLeadsToShortfall,\n        borrowBalanceAfterChange,\n      } = useCalculateChangeInBorrowBalance(\n        collateralPotentialInUSD,\n        totalAccountBorrowBalanceUsd,\n        repayInputValue * -1, // Repaying will decrease the borrow balance\n        pricePerUnitUsd,\n        priceCalculationDecimals\n      );\n\n      const showPredictedBorrowLimits = actionEffectInUsd !== 0;\n\n      const inputActionButtonText = isRepayingMax ? \"Cancel\" : \"All\";\n      const showInputActionButton =\n        (isRepay || false) && !needsToButNotYetApproved && hasBorrowBalance;\n      const inputActionButtonActive = hasEnoughToRepayAll;\n      const onInputActionButtonPressed = onSetRepayToMaxClicked;\n\n      const payload: IMarketModalPerTabStatePayload = {\n        // Message or input component\n        messageOrInput: messageOrInputComponent,\n        inputActionButtonText,\n        showInputActionButton,\n        onInputActionButtonPressed,\n        inputActionButtonActive,\n\n        // Action Rates\n        actionName: \"Supply\",\n        actionApy: 4.56,\n        distributionApy: distributionAssetApy,\n\n        // Borrow Limit (optional)\n        showBorrowLimit: showPredictedBorrowLimits,\n        borrowLimitAfterChange: borrowBalanceAfterChange,\n        showPredictedBorrowLimits,\n        usedBorrowLimitPercentageAfterChange,\n\n        // Action button\n        actionButtonActive: !!actionButtonActive,\n        actionButtonText: actionButtonTextForRepay,\n        actionButtonDisabledText,\n        actionButtonOnClick: actionButtonCbForRepay,\n\n        // Footer\n        footerMessagesPayloads: footerMessagePayloads,\n      };\n\n      return payload;\n    }, [\n      accountBorrowInUnits,\n      collateralPotentialInUSD,\n      distributionAssetApy,\n      footerMessagePayloads,\n      hasApprovedERC20,\n      hasBorrowBalance,\n      hasEnoughToRepayAll,\n      hasWalletBalance,\n      isRepay,\n      isRepayingMax,\n      messageOrInputComponent,\n      needToApprove,\n      needsToButNotYetApproved,\n      onEnableClicked,\n      onRepayClicked,\n      onSetRepayToMaxClicked,\n      priceCalculationDecimals,\n      pricePerUnitUsd,\n      repayInputValue,\n      repayIsZero,\n      totalAccountBorrowBalanceUsd,\n      walletBalance,\n    ]);\n\n    const statePerTabPayload = isBorrow\n      ? marketModalStatePayloadForBorrowTab\n      : marketModalStatePayloadForRepayTab;\n\n    const marketModalStatePayload = useMemo<IMarketModalStatePayload>(() => {\n      const payload: IMarketModalStatePayload = {\n        ...commonPayloadPart,\n        ...statePerTabPayload,\n      };\n\n      return payload;\n    }, [commonPayloadPart, statePerTabPayload]);\n\n    return (\n      <MarketInteractionModal\n        open={open}\n        closeModal={clearStateBeforeClose}\n        {...marketModalStatePayload}\n      />\n    );\n  }\n);\n\nfunction sanitizeNumericInput(stringValueOfNumericInput?: string): number {\n  let safeString = stringValueOfNumericInput || \"0\";\n  // DEV_NOTE : Barbaric way\n  while (safeString.length > 1 && safeString.charAt(0) === \"0\") {\n    console.log(`Starts in 0 : ${safeString}`);\n    safeString = safeString.substring(1, safeString.length);\n    console.log(`After trim : ${safeString}`);\n  }\n\n  const parsedAsFloat = +safeString;\n  if (!stringValueOfNumericInput || isNaN(parsedAsFloat)) {\n    return 0;\n  }\n\n  return parsedAsFloat;\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport { BRAND_MAIN_COLOR, GRAYISH_TEXT } from \"../../../theme/themeConstants\";\nimport { BorrowLimitRates } from \"../MarketInteractionModal/base/rates/BorrowLimitRates\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  actionAssetName: string;\n  actionAssetSymbol: string;\n\n  currentBorrowLimit: number;\n  usedBorrowLimitPercentage: number;\n  usedBorrowLimitPercentageAfterChange: number;\n  borrowLimitAfterChange: number;\n  showPredictedBorrowLimits: boolean;\n\n  actionName: string;\n  actionButtonActive: boolean;\n  actionButtonText: string;\n  actionButtonOnClick: () => void;\n\n  // TX waiting\n  waitingForUserApproval: boolean;\n  waitingForTxConfirmation: boolean;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n  },\n\n  tabBody: {\n    paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    backgroundColor: \"#ffffff\",\n  },\n}));\n\nexport const CollateralModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    actionAssetSymbol,\n    actionAssetName,\n\n    showPredictedBorrowLimits,\n    currentBorrowLimit,\n    usedBorrowLimitPercentage,\n    usedBorrowLimitPercentageAfterChange,\n    borrowLimitAfterChange,\n    actionName,\n    actionButtonActive,\n    actionButtonText,\n    actionButtonOnClick,\n\n    waitingForTxConfirmation,\n    waitingForUserApproval,\n  } = props;\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n      />\n    );\n  }\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={actionAssetSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {actionName} as collateral\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <Typography>\n              Each asset used as collateral increases your borrowing limit.{\" \"}\n              <br />\n              Be careful, this can subject the asset to being seized in\n              liquidation.\n              {/*Learn more.*/}\n            </Typography>\n          </div>\n\n          {/* Tab Body */}\n          <div className={classes.tabBody}>\n            {/* Borrow limit rates */}\n            <BorrowLimitRates\n              limitOrBalance={\"Limit\"}\n              borrowLimitUsd={currentBorrowLimit || 0}\n              borrowLimitUsedPercentage={usedBorrowLimitPercentage || 0}\n              predictedBorrowLimitPercentage={\n                usedBorrowLimitPercentageAfterChange || 0\n              }\n              predictedBorrowLimitUsd={borrowLimitAfterChange || 0}\n              displayPredictedValues={showPredictedBorrowLimits}\n            />\n\n            <br />\n            <br />\n\n            {/* Action button */}\n            <ModalActionButton\n              onClick={actionButtonOnClick}\n              text={actionButtonText}\n              disabled={!actionButtonActive}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { useCallback, useMemo } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { CollateralModal } from \"./CollateralModal\";\nimport { useCalculateChangeInBorrowLimits } from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport { useCollateralModalState } from \"./collateralModalHooks\";\nimport { useTxWaitingLogic } from \"../txWaitingModal/txWaitingHooks\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\nimport { useSystemStore } from \"../../../store/storeHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedCollateralModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const systemStore = useSystemStore();\n\n  const {\n    activeLNStore,\n    cToken,\n    accountSupplyInUnits,\n    underlyingName,\n    underlyingSymbol,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n    currentBorrowLimitUsd,\n    collateralFactorInUnits,\n    pricePerUnitUsd,\n  } = useCollateralModalState();\n\n  const newCollaterableValue = !isCollaterable;\n  // Will the new state add or reduce potential collateral\n  const signMultiplier = newCollaterableValue ? 1 : -1;\n  const effectiveUnits = signMultiplier * accountSupplyInUnits;\n\n  const actionButtonText = newCollaterableValue\n    ? `Use ${underlyingSymbol} as collateral`\n    : `Remove ${underlyingSymbol} as collateral`;\n\n  const actionName = newCollaterableValue ? \"Enable\" : \"Remove\";\n\n  // Calculate the changes to borrow limit (USD and % used)\n  const {\n    collateralValueOfActionEffect,\n    borrowLimitAfterChange,\n    usedBorrowLimitPercentageAfterChange,\n  } = useCalculateChangeInBorrowLimits(\n    currentBorrowLimitUsd,\n    totalAccountBorrowBalanceUsd,\n    effectiveUnits,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    priceCalculationDecimals\n  );\n\n  // We always want to emphasis the change (even if it is 0)\n  const showPredictedBorrowLimits = true;\n\n  const actionButtonActive = true;\n\n  const txCreatingFunction = useMemo(() => {\n    if (newCollaterableValue) {\n      return () => activeLNStore?.enterMarketByCTokenAddress(cToken);\n    } else {\n      return () => activeLNStore?.exitMarketByCTokenAddress(cToken);\n    }\n  }, [activeLNStore, cToken, newCollaterableValue]);\n\n  const {\n    activeTxHash,\n    wrappedTxBuildingFunction,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n  } = useTxWaitingLogic(txCreatingFunction, closeModal, true);\n\n  const onActionButtonClicked = useCallback(async () => {\n    await wrappedTxBuildingFunction();\n  }, [wrappedTxBuildingFunction]);\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n        txHash={activeTxHash}\n        explorerUrlBaseForTx={systemStore.explorerBaseTxUrl}\n        explorerName={systemStore.explorerName}\n      />\n    );\n  }\n\n  return (\n    <CollateralModal\n      open={open}\n      closeModal={closeModal}\n      actionName={actionName}\n      actionButtonText={actionButtonText}\n      actionAssetName={underlyingName}\n      actionAssetSymbol={underlyingSymbol}\n      actionButtonActive={actionButtonActive}\n      actionButtonOnClick={onActionButtonClicked}\n      showPredictedBorrowLimits={showPredictedBorrowLimits}\n      borrowLimitAfterChange={borrowLimitAfterChange}\n      currentBorrowLimit={currentBorrowLimitUsd}\n      usedBorrowLimitPercentage={usedBorrowPercentage}\n      usedBorrowLimitPercentageAfterChange={\n        usedBorrowLimitPercentageAfterChange\n      }\n      waitingForUserApproval={waitingForUserApproval}\n      waitingForTxConfirmation={waitingForTxConfirmation}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\n\nexport function useCollateralModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const systemStore = useSystemStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const assetAddressToParamsMap =\n    activeLNStore?.assetBaseAddressToParams ||\n    new Map<string, TAssetInMarketParameters>();\n  const assetBaseAddress = modalsStore.assetBaseAddress;\n\n  const assetParams = assetAddressToParamsMap.get(assetBaseAddress);\n  const isNativeCoin = assetParams?.symbol === systemStore.nativeCoinSymbol;\n\n  const cTokenStore = activeLNStore?.baseAssetsToCTokenStore.get(\n    assetBaseAddress\n  );\n\n  const cToken = cTokenStore?.cTokenAddress || \"\";\n  const underlyingName = cTokenStore?.underlyingName || \"\";\n  const underlyingSymbol = cTokenStore?.underlyingSymbol || \"\";\n  const accountSupplyInUnits = cTokenStore?.accountSupplyInUnits || 0;\n  const isCollaterable = cTokenStore?.isCollaterable || false;\n\n  const pricePerUnitUsd = cTokenStore?.underlyingUsdPrice || 0;\n  const collateralFactorInUnits = cTokenStore?.collateralFactorInUnits || 0;\n  const currentBorrowLimitUsd = activeLNStore?.liquidityUsd || 0;\n  const usedBorrowPercentage = activeLNStore?.usedBorrowPercentage || 0;\n  const totalAccountBorrowBalanceUsd =\n    activeLNStore?.totalAccountBorrowBalanceUsd || 0;\n\n  const priceCalculationDecimals = activeLNStore?.priceCalculationDecimals || 6;\n\n  return {\n    activeLNStore,\n    cToken,\n    underlyingName,\n    underlyingSymbol,\n    accountSupplyInUnits,\n    isCollaterable,\n\n    priceCalculationDecimals,\n    pricePerUnitUsd,\n    collateralFactorInUnits,\n    currentBorrowLimitUsd,\n    usedBorrowPercentage,\n    totalAccountBorrowBalanceUsd,\n  };\n}\n","import React from \"react\";\nimport {\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Typography,\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { TokenIcon } from \"../../icons/TokenIcon\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BRAND_MAIN_COLOR,\n  GRAYISH_TEXT,\n  TEXT_ON_DARK,\n  TEXT_ON_LIGHT,\n} from \"../../../theme/themeConstants\";\nimport { ModalActionButton } from \"../MarketInteractionModal/base/ModalActionButton\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n\n  incentiveTokenAddress: string;\n  incentiveTokenName: string;\n  incentiveTokenSymbol: string;\n\n  balanceInUnits: number;\n  unclaimedInUnits: number;\n\n  canClaim: boolean;\n  whyCannotClaim: string;\n  onClaim: () => void;\n\n  // Extra native coin balance\n  showNativeCoinBalance?: boolean;\n  nativeCoinName?: string;\n  nativeCoinBalanceInUnits?: number;\n}\n\nconst TOP_DISTANCE_REM = 0.5;\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  collateralInteractionPanel: {\n    position: \"relative\",\n    width: \"30rem\",\n    maxWidth: \"100%\",\n    // backgroundColor: \"#F9FAFB\",\n    backgroundColor: \"#F9FAFB\",\n  },\n  panelHeader: {\n    width: \"100%\",\n    color: \"#141E27\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid rgba(0, 0, 0, 0.05)\",\n\n    padding: `${TOP_DISTANCE_REM * 2}rem`,\n\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      // padding: \"1.0rem\",\n      // display: \"flex\",\n      // flexDirection: \"row\",\n      // alignItems: \"center\",\n    },\n  },\n  title: {\n    fontWeight: \"bold\",\n  },\n  tokenIcon: {\n    marginRight: \"0.75rem\",\n    width: \"2.5rem\",\n    height: \"2.5rem\",\n    position: \"fixed\",\n    left: 0,\n  },\n  upperRightCorner: {\n    position: \"absolute\",\n    right: `${TOP_DISTANCE_REM / 2}rem`,\n    top: `${TOP_DISTANCE_REM / 2}rem`,\n    // Mobile\n    [theme.breakpoints.down(\"sm\")]: {\n      right: `${TOP_DISTANCE_REM / 8}rem`,\n      top: `${TOP_DISTANCE_REM / 8}rem`,\n    },\n  },\n  upperLeftCorner: {\n    position: \"absolute\",\n    left: `${TOP_DISTANCE_REM}rem`,\n    top: `${TOP_DISTANCE_REM}rem`,\n  },\n\n  messageContainer: {\n    paddingTop: \"1rem\",\n    paddingBottom: \"2rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    textAlign: \"center\",\n\n    color: GRAYISH_TEXT,\n    // display: \"flex\",\n    // flexDirection: \"row\",\n  },\n\n  balanceColumn: {\n    flex: 1,\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    // border: `1px solid ${TEXT_ON_LIGHT}`,\n  },\n  amountTitle: {\n    fontWeight: \"bold\",\n    flex: 1,\n    paddingBottom: \"0.2rem\",\n  },\n\n  amount: {\n    color: TEXT_ON_LIGHT,\n  },\n\n  tabBody: {\n    // paddingTop: \"2rem\",\n    paddingBottom: \"1rem\",\n    paddingLeft: \"1.5rem\",\n    paddingRight: \"1.5rem\",\n    // backgroundColor: \"#ffffff\",\n  },\n\n  heroToken: {\n    height: \"4rem\",\n    width: \"4rem\",\n    marginBottom: \"1rem\",\n  },\n}));\n\nexport const IncentiveModal = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const {\n    open,\n    closeModal,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    incentiveTokenSymbol,\n    balanceInUnits,\n    unclaimedInUnits,\n    canClaim,\n    onClaim,\n    whyCannotClaim,\n    showNativeCoinBalance,\n    nativeCoinName,\n    nativeCoinBalanceInUnits,\n  } = props;\n\n  return (\n    <Modal open={open} className={classes.modal} onBackdropClick={closeModal}>\n      <Fade in={open}>\n        <div className={classes.collateralInteractionPanel}>\n          {/* Quick-n-Dirty x button */}\n          <div className={classes.upperRightCorner}>\n            <IconButton onClick={closeModal}>\n              <CloseIcon />\n            </IconButton>\n          </div>\n\n          {/* Quick-n-Dirty Market icon */}\n          <TokenIcon\n            symbol={incentiveTokenSymbol}\n            extraClasses={[classes.tokenIcon, classes.upperLeftCorner]}\n          />\n\n          {/* Header */}\n          <div className={classes.panelHeader}>\n            <Typography variant={\"h6\"} className={classes.title}>\n              {incentiveTokenName}\n            </Typography>\n          </div>\n\n          <div className={classes.messageContainer}>\n            <div>\n              <TokenIcon\n                symbol={incentiveTokenSymbol}\n                extraClasses={[classes.heroToken]}\n              />\n            </div>\n\n            {/* Balances display */}\n            <div style={{ display: \"flex\" }}>\n              {/* Incentive balance */}\n              <div className={classes.balanceColumn}>\n                <Typography className={classes.amountTitle}>\n                  {incentiveTokenSymbol} Balance\n                </Typography>\n                <Typography variant={\"body2\"} className={classes.amount}>\n                  {balanceInUnits.toFixed(4)}\n                </Typography>\n              </div>\n\n              {/* ? Native coin balance ? */}\n              {showNativeCoinBalance && (\n                <div className={classes.balanceColumn}>\n                  <Typography className={classes.amountTitle}>\n                    {nativeCoinName} Balance\n                  </Typography>\n                  <Typography variant={\"body2\"} className={classes.amount}>\n                    {nativeCoinBalanceInUnits?.toFixed(4)}\n                  </Typography>\n                </div>\n              )}\n\n              {/* Claimable balance */}\n              <div className={classes.balanceColumn}>\n                <Typography className={classes.amountTitle}>\n                  Can claim\n                </Typography>\n                <Typography variant={\"body2\"} className={classes.amount}>\n                  {unclaimedInUnits.toFixed(4)}\n                </Typography>\n              </div>\n            </div>\n          </div>\n\n          {/*/!* Tab Body *!/*/}\n          <div className={classes.tabBody}>\n            {/* Action button */}\n            <ModalActionButton\n              onClick={onClaim}\n              text={canClaim ? `Claim ${incentiveTokenSymbol}` : whyCannotClaim}\n              disabled={!canClaim}\n            />\n          </div>\n        </div>\n      </Fade>\n    </Modal>\n  );\n});\n","import React, { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n  useCalculateChangeInBorrowLimits,\n  useMarketInteractionModalBase,\n} from \"../MarketInteractionModal/marketInteractionModalHooks\";\nimport {\n  useTxWaitingLogic,\n  useTxWaitingStateExplicit,\n} from \"../txWaitingModal/txWaitingHooks\";\nimport { IncentiveModal } from \"./IncentiveModal\";\nimport {\n  useIncentiveModalState,\n  useOnClaimLnIncentive,\n} from \"./incentiveModalHooks\";\nimport {\n  TTxWaitingStage,\n  TxWaitingModal,\n} from \"../txWaitingModal/TxWaitingModal\";\nimport { useSystemStore } from \"../../../store/storeHooks\";\n\ninterface IProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nexport const ConnectedIncentiveModal = observer<\n  React.FunctionComponent<IProps>\n>((props) => {\n  const { open, closeModal } = props;\n\n  const systemStore = useSystemStore();\n\n  const {\n    activeLNStore,\n    incentiveTokenAddress,\n    incentiveTokenName,\n    incentiveTokenSymbol,\n    compAllocatedUnits,\n    compBalanceUnits,\n    nativeCoinName,\n    nativeCoinSymbol,\n    showNativeCoinBalance,\n    nativeCoinBalance,\n  } = useIncentiveModalState();\n\n  const {\n    activeTxHash,\n    setActiveTxHash,\n    waitingForUserApproval,\n    waitingForTxConfirmation,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n  } = useTxWaitingStateExplicit();\n\n  const onClaimClicked = useOnClaimLnIncentive(\n    activeLNStore,\n    closeModal,\n    setActiveTxHash,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation\n  );\n\n  let whyCannotClaim = \"\";\n  let canClaim = true;\n\n  if (compAllocatedUnits === 0) {\n    canClaim = false;\n    whyCannotClaim = \"Nothing to claim\";\n  } else if (waitingForUserApproval) {\n    canClaim = false;\n    whyCannotClaim = \"Please approve tx\";\n  }\n  if (waitingForTxConfirmation) {\n    canClaim = false;\n    whyCannotClaim = \"Waiting for TX confirmation\";\n  }\n\n  if (waitingForTxConfirmation || waitingForUserApproval) {\n    const txWaitingStage: TTxWaitingStage = waitingForTxConfirmation\n      ? \"CONFIRMATION\"\n      : \"USER_APPROVAL\";\n\n    // TODO : Use the directo logic hook\n    return (\n      <TxWaitingModal\n        open={open}\n        closeModal={closeModal}\n        txWaitingStage={txWaitingStage}\n        txHash={activeTxHash}\n        explorerUrlBaseForTx={systemStore.explorerBaseTxUrl}\n        explorerName={systemStore.explorerName}\n      />\n    );\n  }\n\n  return (\n    <IncentiveModal\n      open={open}\n      closeModal={closeModal}\n      incentiveTokenAddress={incentiveTokenAddress || \"\"}\n      incentiveTokenName={incentiveTokenName || \"\"}\n      incentiveTokenSymbol={incentiveTokenSymbol || \"\"}\n      balanceInUnits={compBalanceUnits}\n      unclaimedInUnits={compAllocatedUnits}\n      canClaim={canClaim}\n      onClaim={onClaimClicked}\n      whyCannotClaim={whyCannotClaim}\n      showNativeCoinBalance={showNativeCoinBalance}\n      nativeCoinName={nativeCoinName}\n      nativeCoinBalanceInUnits={nativeCoinBalance}\n    />\n  );\n});\n","import {\n  useAccountStore,\n  useCryptoWalletIntegrationStore,\n  useLendingNetworksStore,\n  useModalsStore,\n  useSystemStore,\n} from \"../../../store/storeHooks\";\nimport { TAssetInMarketParameters } from \"../../../services/lendingNetworksService/ILendingNetworksService\";\nimport { useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useTxWaitingLogicExplicit } from \"../txWaitingModal/txWaitingHooks\";\nimport { SingleLNStore } from \"../../../store/multiInstanceStores/SingleLNStore\";\nimport { LENDING_NETWORK_NAMES } from \"../../../services/lendingNetworksService/lendingNetworksParams\";\n\nexport function useIncentiveModalState() {\n  const accountStore = useAccountStore();\n  const modalsStore = useModalsStore();\n  const systemStore = useSystemStore();\n  const cryptoWalletConnectionStore = useCryptoWalletIntegrationStore();\n  const lendingNetworksStore = useLendingNetworksStore();\n  const activeLNStore = lendingNetworksStore.activeLNStore;\n\n  const incentiveTokenSymbol = activeLNStore?.distributionAssetParams.symbol;\n  const incentiveTokenName = activeLNStore?.distributionAssetParams.name;\n  const incentiveTokenAddress = activeLNStore?.distributionAssetParams.address;\n\n  const compBalanceUnits = activeLNStore?.compBalanceUnits || 0;\n  const compAllocatedUnits = activeLNStore?.compAllocatedUnits || 0;\n\n  const showNativeCoinBalance =\n    activeLNStore?.name === LENDING_NETWORK_NAMES.fuseAlpha;\n  const nativeCoinSymbol = systemStore.nativeCoinSymbol;\n  const nativeCoinName = systemStore.nativeCoinName;\n  const nativeCoinBalance = cryptoWalletConnectionStore.nativeCoinBalance;\n\n  return {\n    activeLNStore,\n    incentiveTokenSymbol,\n    incentiveTokenName,\n    incentiveTokenAddress,\n    compBalanceUnits,\n    compAllocatedUnits,\n    showNativeCoinBalance,\n    nativeCoinSymbol,\n    nativeCoinName,\n    nativeCoinBalance,\n  };\n}\n\nexport function useOnClaimLnIncentive(\n  activeLNStore: SingleLNStore | undefined,\n  closeModal: () => void,\n  setActiveTxHash: (val: string) => void,\n  setWaitingForUserApproval: (val: boolean) => void,\n  setWaitingForTxConfirmation: (val: boolean) => void\n) {\n  const createClaimLnIncentiveTx = useCallback(() => {\n    return activeLNStore!.claimLnIncentiveToken();\n  }, [activeLNStore]);\n\n  const wrappedClaimTx = useTxWaitingLogicExplicit(\n    createClaimLnIncentiveTx,\n    closeModal,\n    setActiveTxHash,\n    setWaitingForUserApproval,\n    setWaitingForTxConfirmation,\n    true\n  );\n\n  const onClaimClicked = useCallback(async () => {\n    if (activeLNStore) {\n      console.log(`Claim LN incentive button clicked`);\n      await wrappedClaimTx();\n      closeModal();\n      console.log(`Claim LN incentive is done`);\n    } else {\n      return console.log(\"No Ln Store for claiming\");\n    }\n  }, [activeLNStore, closeModal, wrappedClaimTx]);\n\n  return onClaimClicked;\n}\n","import { makeStyles, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport {\n  useLendingNetworksStore,\n  useModalsStore,\n} from \"../../store/storeHooks\";\nimport { MainLendingNetworkTab } from \"./MarketsTab/MainLendingNetworkTab\";\nimport { SupplyModal } from \"../../components/modals/MarketInteractionModal/SupplyModal\";\nimport { BorrowModal } from \"../../components/modals/MarketInteractionModal/BorrowModal\";\nimport { ConnectedCollateralModal } from \"../../components/modals/collateralModal/ConnectedCollateralModal\";\nimport { ConnectedIncentiveModal } from \"../../components/modals/incentiveModal/ConnectedIncentiveModal\";\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n}));\n\ninterface IProps {\n  networkId: string;\n}\n\nexport const LendingNetworkPage = observer<React.FC<IProps>>(\n  ({ networkId }) => {\n    const classes = useStyles();\n    const { path, url } = useRouteMatch();\n    const history = useHistory();\n    const lendingNetworksStore = useLendingNetworksStore();\n    const [error, setError] = React.useState<string | null>(null);\n\n    const lnStore = lendingNetworksStore.activeLNStore;\n    const modalsStore = useModalsStore();\n\n    // Update active LN\n    useEffect(() => {\n      lendingNetworksStore.setActiveLn(networkId);\n    }, [lendingNetworksStore, networkId]);\n\n    // const [\n    //   lendingNetworkStore,\n    //   setLendingNetworkStore,\n    // ] = React.useState<SingleLNStore | null>(null);\n\n    // React.useEffect(() => {\n    //   if (lendingNetworksStore.isLoading) {\n    //     return;\n    //   }\n    //\n    //   const lendingNetworkStore = lendingNetworksStore.getLendingNetworkStore(\n    //     networkId\n    //   );\n    //   if (lendingNetworkStore === null) {\n    //     setError(`A network with id \"${networkId}\" was not found`);\n    //   } else {\n    //     setLendingNetworkStore(lendingNetworkStore);\n    //   }\n    // }, [lendingNetworksStore, lendingNetworksStore.isLoading, networkId]);\n\n    if (lendingNetworksStore.isLoading) {\n      return <Typography>Loading...</Typography>;\n    }\n\n    if (error) {\n      return <Typography>Error: {error}</Typography>;\n    }\n\n    return (\n      // TODO : Change this to use proper page structure\n      <div className={classes.root}>\n        {/* DEV_NOTE : Temp solution for tabs */}\n        {/*<div*/}\n        {/*  style={{*/}\n        {/*    display: \"flex\",*/}\n        {/*    justifyContent: \"center\",*/}\n        {/*  }}*/}\n        {/*>*/}\n        {/*  <Tabs*/}\n        {/*    value={history.location.pathname}*/}\n        {/*    onChange={(e, value) => history.push(value)}*/}\n        {/*  >*/}\n        {/*    <Tab label=\"Markets\" value={`${url}/markets`} />*/}\n        {/*    <Tab label=\"Price Feed\" value={`${url}/price-feed`} />*/}\n        {/*  </Tabs>*/}\n        {/*</div>*/}\n        <Switch>\n          <Route\n            path={`${path}/markets`}\n            exact\n            render={() => <MainLendingNetworkTab />}\n          />\n          <Route\n            path={`${path}/price-feed`}\n            render={() => <div>Price Feed</div>}\n          />\n          <Redirect to={`${path}/markets`} />\n        </Switch>\n\n        {/*  Modals used by this page  */}\n        <SupplyModal\n          open={modalsStore.isSupplyModalActive}\n          closeModal={() => modalsStore.hideSupplyModal()}\n        />\n        <BorrowModal\n          open={modalsStore.isBorrowModalActive}\n          closeModal={() => modalsStore.hideBorrowModal()}\n        />\n        <ConnectedCollateralModal\n          open={modalsStore.isCollateralModalActive}\n          closeModal={() => modalsStore.hideCollateralModal()}\n        />\n\n        <ConnectedIncentiveModal\n          closeModal={() => modalsStore.hideIncentiveModal()}\n          open={modalsStore.isInventiveModalActive}\n        />\n      </div>\n    );\n  }\n);\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TokenIcon } from \"../../components/icons/TokenIcon\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BACKGROUND_LIGHT_COLOR,\n  TEXT_ON_DARK,\n  TEXT_ON_LIGHT,\n} from \"../../theme/themeConstants\";\n\ninterface IProps {\n  networkGist: ILendingNetworkGist;\n  onViewNetwork: (networkId: string) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    // flex: 1,\n    maxWidth: \"100%\",\n    width: \"15rem\",\n    backgroundColor: BACKGROUND_LIGHT_COLOR,\n    borderRadius: \"5%\",\n    // backgroundColor: \"rgba(0,0,0,0.1)\",\n  },\n  title: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    color: TEXT_ON_LIGHT,\n  },\n  cardHeader: {\n    // textAlign: \"center\",\n    fontWeight: \"bold\",\n    // color: TEXT_ON_LIGHT,\n    paddingTop: \"0.5rem\",\n    paddingBottom: \"0.5rem\",\n    paddingLeft: \"0.5rem\",\n    paddingRight: \"0.5rem\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    alignItems: \"Center\",\n    backgroundColor: BACKGROUND_DARK_COLOR,\n    color: TEXT_ON_DARK,\n  },\n  alphaMessage: {\n    fontWeight: \"bold\",\n    color: \"#feb276\",\n    userSelect: \"none\",\n    // animation: \"$MoveUpDown 1.5s linear infinite\",\n    position: \"relative\",\n  },\n  content: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    color: TEXT_ON_LIGHT,\n  },\n  lnAsset: {\n    margin: \"0.1rem\",\n    height: \"2rem\",\n    width: \"2rem\",\n    flex: 1,\n  },\n  zoom: {\n    paddingTop: 10,\n    cursor: \"pointer\",\n    transition: \"all ease 400ms\",\n    \"&:hover\": {\n      // height: \"2rem\",\n      // width: \"2rem\",\n      transform: \"scale(1.1)\",\n    },\n  },\n\n  \"@keyframes MoveUpDown\": {\n    \"0%, 100%\": {\n      bottom: \"-2px\",\n    },\n    \"50%\": {\n      bottom: \"2px\",\n    },\n  },\n}));\n\nexport const NetworkListItem: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { onViewNetwork, networkGist } = props;\n  const { id, name, assets, distributionAssetParameters } = networkGist;\n  const { symbol } = distributionAssetParameters;\n  // TODO : Fix styling\n  return (\n    <Card className={classes.card}>\n      {/*<CardHeader title={name} className={classes.title} />*/}\n      <div className={classes.cardHeader}>\n        <Typography variant={\"h6\"}>{name}</Typography>\n        <Typography variant={\"body2\"} className={classes.alphaMessage}>\n          In alpha\n        </Typography>\n      </div>\n      {/*<Typography*/}\n      {/*  variant={\"body1\"}*/}\n      {/*  style={{ fontWeight: \"bold\", fontFamily: \"Avenir\" }}*/}\n      {/*>*/}\n      {/*  In alpha*/}\n      {/*</Typography>*/}\n      {/*<Typography variant={\"body2\"}>Please try with small amounts</Typography>*/}\n      <CardContent style={{ width: \"100%\" }}>\n        {/*{assets.map((a) => (*/}\n        {/*  <div key={a.symbol}>{a.name}</div>*/}\n        {/*))}*/}\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n          }}\n        >\n          {assets.map((a) => (\n            <TokenIcon\n              symbol={a.symbol}\n              key={a.symbol}\n              extraClasses={[classes.lnAsset, classes.zoom]}\n            />\n          ))}\n        </div>\n      </CardContent>\n      <CardActions\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          backgroundColor: BACKGROUND_DARK_COLOR,\n          width: \"100%\",\n        }}\n      >\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => onViewNetwork(id)}\n        >\n          Enter Network\n        </Button>\n      </CardActions>\n    </Card>\n  );\n});\n","import { makeStyles } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport { ILendingNetworkGist } from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { NetworkListItem } from \"./NetworkListItem\";\nimport { SingleLNStore } from \"../../store/multiInstanceStores/SingleLNStore\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    display: \"flex\",\n    margin: spacing(1, 8),\n    justifyContent: \"center\",\n  },\n}));\n\ninterface IProps {\n  lendingNetworksGists: ILendingNetworkGist[];\n  onViewNetwork: (networkId: string) => void;\n}\n\nexport const NetworksList: React.FC<IProps> = observer((props) => {\n  const classes = useStyles();\n  const { lendingNetworksGists, onViewNetwork } = props;\n\n  return (\n    <div className={classes.root}>\n      {lendingNetworksGists.map((network) => (\n        <NetworkListItem\n          onViewNetwork={onViewNetwork}\n          networkGist={network}\n          key={network.id}\n        />\n      ))}\n    </div>\n  );\n});\n","import { makeStyles, Typography } from \"@material-ui/core\";\nimport { observer } from \"mobx-react\";\nimport React, { useEffect, useMemo } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\nimport { useLendingNetworksStore } from \"../../store/storeHooks\";\nimport { NetworksList } from \"./NetworksList\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  TEXT_ON_LIGHT,\n} from \"../../theme/themeConstants\";\nimport TextTransition, { presets } from \"react-text-transition\";\nimport { ContentContainer } from \"../../components/structure/ContentContainer\";\n\nconst textShadowWidth = 1;\nconst textShadow = `-${textShadowWidth}px -${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                    ${textShadowWidth}px -${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                     -${textShadowWidth}px ${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR},\n                      ${textShadowWidth}px ${textShadowWidth}px 0 ${BACKGROUND_DARK_COLOR}`;\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    paddingTop: spacing(10),\n    // backgroundColor: BACKGROUND_DARK_COLOR,\n  },\n  title: {\n    color: TEXT_ON_LIGHT,\n    paddingBottom: spacing(2),\n  },\n  mainMessage: {\n    color: TEXT_ON_LIGHT,\n  },\n  letterO: {\n    margin: \"0.1rem\",\n    color: \"#feb276\",\n    // stroke: \"2px #feb276\",\n    // textShadow:\n    //   \"-2px -2px 0 #feb276, 2px -2px 0 #feb276, -2px 2px 0 #feb276, 2px 2px #feb276\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    // textShadow,\n  },\n  letterL: {\n    margin: \"0.1rem\",\n    color: \"#80dae3\",\n    // textShadow:\n    //   \"-2px -2px 0 #80dae3, 2px -2px 0 #80dae3, -2px 2px 0 #80dae3, 2px 2px #80dae3\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    // textShadow,\n  },\n  letterA: {\n    margin: \"0.1rem\",\n    color: \"#5053d4\",\n    // textShadow:\n    //   \"-2px -2px 0 #5053d4, 2px -2px 0 #5053d4, -2px 2px 0 #5053d4, 2px 2px #5053d4\",\n    // textShadow: `-2px -2px 0 ${BACKGROUND_DARK_COLOR}, 2px -2px 0 ${BACKGROUND_DARK_COLOR}, -2px 2px 0 ${BACKGROUND_DARK_COLOR}, 2px 2px 0 ${BACKGROUND_DARK_COLOR}`,\n    // textShadow: `-1px -1px 0 ${BACKGROUND_DARK_COLOR}, 1px -1px 0 ${BACKGROUND_DARK_COLOR}, -1px 1px 0 ${BACKGROUND_DARK_COLOR}, 1px 1px 0 ${BACKGROUND_DARK_COLOR}`,\n    // textShadow,\n  },\n  logoSpan: {\n    // height: `${TITLE_HEIGHT_REM}rem`,\n    height: \"6rem\",\n    // width: `${TITLE_HEIGHT_REM}rem`,\n    // width: \"20rem\",\n    backgroundImage: `url(${process.env.PUBLIC_URL}/assets/images/ola/ola_symbol_clear.png)`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"contain\",\n    backgroundColor: \"transparent\",\n    backgroundPosition: \"center\",\n    marginRight: \"auto\",\n    marginLeft: \"auto\",\n  },\n}));\n\nexport const AllNetworksPage: React.FC = observer(() => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  const lendingNetworksStore = useLendingNetworksStore();\n  // const { isLoading, lendingNetworks } = useLendingNetworksStore();\n  const activeLendingNetworkId = lendingNetworksStore.activeLendingNetworkId;\n  // Reset the 'active ln' when entering this page\n  useEffect(() => {\n    console.log(`In effect ${activeLendingNetworkId}`);\n    if (activeLendingNetworkId !== \"\") {\n      lendingNetworksStore.setActiveLn(\"\");\n    }\n  }, [activeLendingNetworkId, lendingNetworksStore]);\n\n  const onViewNetwork = React.useCallback(\n    (networkId: string) => {\n      const targetUrl = `${url}/${networkId}`;\n      history.push(targetUrl);\n    },\n    [history, url]\n  );\n\n  const texts = useMemo(() => {\n    return [\"New\", \"Exciting\"];\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <ContentContainer>\n        {/*<Typography variant=\"h1\" align=\"center\" className={classes.title}>*/}\n        {/*  /!*Ola Lending Networks*!/*/}\n        {/*  <span className={classes.letterO}>O</span>*/}\n        {/*  <span className={classes.letterL}>l</span>*/}\n        {/*  <span className={classes.letterA}>a </span>*/}\n        {/*  <span className={classes.letterO}>F</span>*/}\n        {/*  <span className={classes.letterL}>i</span>*/}\n        {/*  <span className={classes.letterA}>n</span>*/}\n        {/*  <span className={classes.letterO}>a</span>*/}\n        {/*  <span className={classes.letterL}>n</span>*/}\n        {/*  <span className={classes.letterA}>c</span>*/}\n        {/*  <span className={classes.letterO}>e</span>*/}\n        {/*</Typography>*/}\n        <div className={classes.logoSpan}></div>\n        <br />\n        <Typography variant=\"h1\" align=\"center\" className={classes.title}>\n          {/*Ola Lending Networks*/}\n          <span className={classes.letterO}>O</span>\n          <span className={classes.letterL}>n</span>{\" \"}\n          {/*<span className={classes.letterA}>a </span>*/}\n          <span className={classes.letterO}>F</span>\n          <span className={classes.letterL}>u</span>\n          <span className={classes.letterA}>s</span>\n          <span className={classes.letterO}>e</span>\n          {/*<span className={classes.letterL}>n</span>*/}\n          {/*<span className={classes.letterA}>c</span>*/}\n          {/*<span className={classes.letterO}>e</span>*/}\n        </Typography>\n\n        {/*<Typography variant=\"h5\" align=\"center\" className={classes.mainMessage}>*/}\n        {/*  <span className={classes.letterO}>Peer</span>*/}\n        {/*  <span className={classes.letterL}> to</span>*/}\n        {/*  <span className={classes.letterA}> Pool </span>*/}\n        {/*  Lending*/}\n        {/*</Typography>*/}\n        {/*<br />*/}\n        {/*<Typography variant={\"h6\"} align={\"center\"}>*/}\n        {/*  Curently in alpha*/}\n        {/*</Typography>*/}\n        {lendingNetworksStore.isLoading ? (\n          <Typography>Loading...</Typography>\n        ) : (\n          <NetworksList\n            lendingNetworksGists={lendingNetworksStore.allLNGists}\n            onViewNetwork={onViewNetwork}\n          />\n        )}\n      </ContentContainer>\n    </div>\n  );\n});\n","import { makeStyles, Paper } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { LendingNetworkPage } from \"./LendingNetworkPage/LendingNetworkPage\";\nimport { AllNetworksPage } from \"./AllNetworksPage/AllNetworksPage\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    borderRadius: 16,\n    width: \"80%\",\n    minHeight: 400,\n    maxWidth: 1200,\n    padding: spacing(2),\n    marginTop: spacing(4),\n    marginBottom: spacing(4),\n    margin: \"0 auto\",\n  },\n}));\n\nexport const Main: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    // <Paper elevation={22} className={classes.root}>\n    <Switch>\n      <Route path=\"/networks\" exact component={AllNetworksPage} />\n      <Route\n        path=\"/networks/:network_id\"\n        render={({ match }) => (\n          <LendingNetworkPage networkId={match.params.network_id} />\n        )}\n      />\n      <Redirect to=\"/networks\" />\n    </Switch>\n    // </Paper>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Header } from \"./components/header/Header\";\nimport { Main } from \"./pages/Main\";\nimport { observer } from \"mobx-react\";\nimport { useLendingNetworksStore } from \"./store/storeHooks\";\nimport { TLNContractsAddresses } from \"./services/Services\";\n\n// TODO : Handle tx failing gracefully.\n\nexport const App = observer(() => {\n  // This part is responsible for keeping the LN services aimed at the right LN contracts\n  const lendingNetworksStore = useLendingNetworksStore();\n  const firstLNParamsUnitrollerAddress =\n    lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\";\n  // const lnContractsAddresses = useMemo(() => {\n  //   console.log(\"Calculatin ln addresses\");\n  //   // console.log(firstLNParamsUnitrollerAddress);\n  //   const addresses: TLNContractsAddresses = {\n  //     unitrollerAddress:\n  //       lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress ||\n  //       \"\",\n  //   };\n  //\n  //   return addresses;\n  // }, [lendingNetworksStore.lendingNetworkParameters]);\n\n  // const addresses: TLNContractsAddresses = {\n  //   unitrollerAddress:\n  //     lendingNetworksStore.lendingNetworkParameters[0]?.unitrollerAddress || \"\",\n  // };\n\n  // useSyncLNServices();\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL || \"/\"}>\n      <Header />\n      <Main />\n    </BrowserRouter>\n  );\n});\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport {\n  BACKGROUND_DARK_COLOR,\n  BRAND_MAIN_COLOR,\n  TEXT_ON_LIGHT,\n} from \"./themeConstants\";\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        // main: \"#1a237e\",\n        main: BRAND_MAIN_COLOR,\n      },\n      secondary: {\n        main: \"#0091ea\",\n      },\n      text: {\n        // primary: \"#141E27\",\n        primary: TEXT_ON_LIGHT,\n      },\n      background: {\n        default: BACKGROUND_DARK_COLOR,\n      },\n    },\n  })\n);\n","import Web3 from \"web3\";\nimport { ICryptoWalletConnectionService } from \"./ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./IEthereumProvider\";\nimport { fromWei } from \"web3-utils\";\n\n// TODO : FUTURE : O.L : Change all ethereum.<call> to the new standard events format.\n//                        Consider using AbstractProvider\nexport class CryptoWalletConnectionService\n  implements ICryptoWalletConnectionService {\n  private readonly web3?: Web3;\n  public readonly hasEthereumProvider: boolean;\n  public readonly hasEventsSupport: boolean;\n  public readonly isMetamaskInstalled: boolean;\n  public readonly isSemiCompliantEthereumProviderInstalled: boolean;\n\n  constructor(private ethereum: IEthereumProvider) {\n    this.hasEthereumProvider = this.ethereum !== undefined;\n\n    // Distinguishes between installed ethereum providers\n    this.isMetamaskInstalled =\n      this.hasEthereumProvider && !!this.ethereum.isMetaMask;\n    this.isSemiCompliantEthereumProviderInstalled =\n      this.hasEthereumProvider && !this.ethereum.isMetaMask;\n\n    if (this.hasEthereumProvider) {\n      this.web3 = new Web3(this.ethereum as any);\n    }\n\n    const onFunction = this.hasEthereumProvider ? this.ethereum.on : undefined;\n    this.hasEventsSupport = onFunction !== undefined && onFunction !== null;\n  }\n\n  public async requestConnectionPermission(): Promise<boolean> {\n    try {\n      // await this.ethereum.enable();\n      // @ts-ignore\n      await this.ethereum.request({ method: \"eth_requestAccounts\" });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  // Getters\n  public getEthereumProvider() {\n    return this.ethereum;\n  }\n\n  public get didUserApproveDappInThePast(): boolean {\n    // DEV_NOTE : O.L : IMPORTANT ! : This currently works with the soon to be deprecated apis of metamask injected 'ethereum'\n    //                                and is not part of the properties in the official types of web3.\n    //                                We need to check and find a better way to detect if the user has already approved wallet access.\n    // @ts-ignore\n    return this.isMetamaskInstalled && !!this.ethereum.selectedAddress;\n  }\n\n  async getIsMainNetwork(): Promise<boolean> {\n    return this.isMetamaskInstalled && this.ethereum.networkVersion === \"1\";\n  }\n\n  // Data \"reading\"\n  async readChainId(): Promise<number> {\n    const chainId = (await this.web3?.eth.getChainId()) || -1;\n    return chainId;\n  }\n\n  async readEthereumBalance(address: string): Promise<number> {\n    const balance = await this.web3?.eth.getBalance(address);\n    const balanceInDecimal = parseInt(fromWei(balance || \"0\"));\n    return balanceInDecimal;\n  }\n\n  async readMainAddress(): Promise<string> {\n    const accounts = (await this.web3?.eth.getAccounts()) || [];\n    return accounts[0];\n  }\n\n  async readCurrentBlockNumber(): Promise<number> {\n    return this.web3?.eth.getBlockNumber() || 0;\n  }\n\n  // Event listeners\n  onMainAddressChange(onChange: (mainAddress: string) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (accounts: string[]) => onChange(accounts[0]);\n\n    this.ethereum.on(\"accountsChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"accountsChanged\", listener);\n    };\n  }\n\n  onChainIdChange(onChange: (chainId: number) => void): () => void {\n    if (!this.hasEventsSupport) {\n      throw new Error(\n        `Cannot subscribe to events with given Ethereum provider`\n      );\n    }\n\n    const listener = (chainId: string) => {\n      console.log(`Typof chainId : ${typeof chainId}`);\n      onChange(parseInt(chainId));\n    };\n\n    this.ethereum.on(\"chainChanged\", listener);\n\n    return () => {\n      this.ethereum.off(\"chainChanged\", listener);\n    };\n  }\n}\n","export const READ_ONLY_ETHEREUM_ENDPOINT =\n  process.env.REACT_APP_READ_ONLY_ETHEREUM_ENDPOINT;\n\nexport const IS_PROD =\n  process.env.REACT_APP_USE_PROD === \"true\" ||\n  process.env.NODE_ENV === \"production\";\n\nexport const IS_DEV = !IS_PROD;\n","export async function fetchLocalJson<T = any>(localPath: string): Promise<T> {\n  const fetchRes = await fetch(`${process.env.PUBLIC_URL}/${localPath}`);\n  const json = (await fetchRes.json()) as T;\n\n  return json;\n}\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"./ILendingNetworksService\";\nimport { IS_DEV } from \"../../configs\";\nimport { fetchLocalJson } from \"../networkActions\";\nimport LocalNetworkDevLNAddresses from \"../../solidityInterfaces/localLNaddresses.json\";\n// TODO : CRITICAL almost : Add 'decimals on chain' to make sure that decimals are right for each chain.\nimport LocalNetworkDevTokensAddresses from \"../../solidityInterfaces/localTokensAddresses.json\";\nimport { NATIVE_COIN_ASSET_ADDRESS } from \"../../constants/constantAddresses\";\nimport { LendingNetworksParam } from \"./lendingNetworksParams\";\n\nexport class LendingNetworksService implements ILendingNetworksService {\n  async fetchALlLendingNetworksParameters(): Promise<\n    ILendingNetworkParameters[]\n  > {\n    const lnParams: ILendingNetworkParameters[] = [];\n\n    if (IS_DEV) {\n      const devNetworksgist = await this.fetchDevNetworkGist();\n\n      lnParams.push(...devNetworksgist);\n    } else {\n      lnParams.push(...LendingNetworksParam);\n    }\n\n    return lnParams;\n  }\n\n  async fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]> {\n    return [];\n    const allLNsGists: ILendingNetworkGist[] = [];\n  }\n\n  async fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState> {\n    return {\n      participatingSuppliers: 0,\n      tvl: 0,\n    };\n  }\n\n  private async fetchDevNetworkGist() {\n    const devNetworksgist = await fetchLocalJson<ILendingNetworkGist[]>(\n      \"lnParameters/devLnParams.json\"\n    );\n\n    // DEV_NOTE : We have one, and we want to at least semi-dynamically get the addresses\n    devNetworksgist[0].id = LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].unitrollerAddress =\n      LocalNetworkDevLNAddresses.unitroller;\n    devNetworksgist[0].maximillionAddress =\n      LocalNetworkDevLNAddresses.maxmimilion;\n    devNetworksgist[0].distributionAssetParameters.address =\n      LocalNetworkDevTokensAddresses[\"WFUSE\"];\n\n    for (let assetInMarket of devNetworksgist[0].assets) {\n      const { symbol } = assetInMarket;\n      // @ts-ignore\n      const assetAddress = LocalNetworkDevTokensAddresses[symbol];\n      const assetAddressToUse =\n        symbol === \"FUSE\" ? NATIVE_COIN_ASSET_ADDRESS : assetAddress;\n\n      if (!assetAddressToUse) {\n        // This quick-fail will save some time debugging\n        throw new Error(`No addres for asset ${symbol}`);\n      } else {\n        assetInMarket.address = assetAddressToUse;\n      }\n    }\n\n    return devNetworksgist;\n  }\n}\n","/**\n * This functions takes a tuple returned from an 'ethers' contract object and returns it in a pure object form.\n */\nexport function etheresStructResponseToObject<T extends object>(\n  ethersStructResponse: any\n): T {\n  const obj = {};\n\n  for (let key in ethersStructResponse) {\n    // DEV_NOTE : We assume that all numeric keys belongs to the array and ignore them\n    if (Number.isNaN(parseInt(key))) {\n      // @ts-ignore\n      obj[key] = ethersStructResponse[key];\n    }\n  }\n\n  return obj as T;\n}\n","import { Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport UniswapAnchoredViewJson from \"../../../solidityInterfaces/UniswapAnchoredView.json\";\nimport {\n  IUniswapAnchoredViewService,\n  TTokenConfig,\n} from \"./IUniswapAnchoredViewService\";\nimport { UniswapAnchoredView } from \"../../../solidityInterfaces/UniswapAnchoredView\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class UniswapAnchoredViewService implements IUniswapAnchoredViewService {\n  private uniswapAnchoredViewContract: UniswapAnchoredView;\n\n  constructor(\n    uniswapAnchoredViewAddress: string,\n    signerOrProvider?: Signer | Provider\n  ) {\n    this.uniswapAnchoredViewContract = new Contract(\n      uniswapAnchoredViewAddress,\n      UniswapAnchoredViewJson.abi,\n      signerOrProvider\n    ) as UniswapAnchoredView;\n  }\n\n  /**\n   * @ DEV_NOTE : Basic example for contract reading function.\n   */\n  async getTokenConfigBySymbol(tokenSymbol: string): Promise<TTokenConfig> {\n    return etheresStructResponseToObject(\n      await this.uniswapAnchoredViewContract.getTokenConfigBySymbol(tokenSymbol)\n    );\n  }\n}\n","import { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport { READ_ONLY_ETHEREUM_ENDPOINT } from \"../configs\";\n\nexport function getSignerOrProvider(\n  ethereumProvider?: IEthereumProvider\n): Signer | Provider {\n  let signerOrProvider;\n\n  // DEV_NOTE: This should allow us to continue reading\n  if (ethereumProvider) {\n    // @ts-ignore\n    signerOrProvider = new ethers.providers.Web3Provider(ethereumProvider);\n  } else {\n    signerOrProvider = new ethers.providers.JsonRpcProvider(\n      // TODO: Change this to network specific values (mainnet, kovan etc...)\n      READ_ONLY_ETHEREUM_ENDPOINT\n    );\n  }\n\n  const signer = signerOrProvider.getSigner();\n  if (signer) {\n    signer\n      .getAddress()\n      .then((address) => console.log(`Signer is ${address}`))\n      .catch((e) => console.log(`Signer exists but we cannot get address`));\n    signerOrProvider = signer;\n  } else {\n    console.log(`Provider only`);\n  }\n\n  return signerOrProvider;\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ComptrollerJson from \"../../../solidityInterfaces/Comptroller.json\";\nimport { IComptrollerService } from \"./IComptrollerService\";\nimport { Comptroller } from \"../../../solidityInterfaces/Comptroller\";\nimport { toJS } from \"mobx\";\n\nexport class ComptrollerService implements IComptrollerService {\n  // We will use the unitroller address but with the 'comptroller' interface (As it is only a proxy)\n  private unitrollerProxyContract: Comptroller;\n\n  constructor(unitrollerAddress: string, signerOrProvider: Signer | Provider) {\n    console.log(\"Before init uni\");\n\n    this.unitrollerProxyContract = new Contract(\n      unitrollerAddress,\n      ComptrollerJson.abi,\n      signerOrProvider\n    ) as Comptroller;\n\n    console.log(\"Initialized unitroller\");\n  }\n\n  public getComptrollerProxyAddress(): string {\n    return this.unitrollerProxyContract.address;\n  }\n\n  // TODO : This is not called for now, check if it is needed and then check if it works\n  public updateUnitrollerAddress(unitrollerAddress: string): void {\n    const after = this.unitrollerProxyContract.attach(unitrollerAddress);\n    console.log(`Param is ${unitrollerAddress}`);\n    console.log(`Result address is ${toJS(after.address)}`);\n    console.log(\n      `Property address is ${toJS(this.unitrollerProxyContract.address)}`\n    );\n  }\n\n  /**\n   * @ DEV_NOTE : All of the CTokens of this comptroller\n   */\n  async getAllMarkets(): Promise<string[]> {\n    const markets = await this.unitrollerProxyContract.getAllMarkets();\n    return markets;\n  }\n\n  async enterMarkets(cTokens: string[]): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.enterMarkets(cTokens);\n    // const res = await this.unitrollerProxyContract.callStatic.enterMarkets(\n    //   cTokens\n    // );\n    //\n    // console.log(`enter markets : ${res}`);\n    //\n    // return (null as any) as ContractTransaction;\n  }\n  async exitMarket(cToken: string): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract.exitMarket(cToken);\n  }\n\n  async claimIncentiveFromAllMarkets(\n    account: string\n  ): Promise<ContractTransaction> {\n    return this.unitrollerProxyContract[\"claimComp(address)\"](account);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport ERC20Json from \"../../../solidityInterfaces/ERC20.json\";\nimport { ERC20 } from \"../../../solidityInterfaces/ERC20\";\nimport { IErc20Service } from \"./IErc20Service\";\n\nexport class Erc20Service implements IErc20Service {\n  private erc20Contract: ERC20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.erc20Contract = new Contract(\n      erc20Address,\n      ERC20Json.abi,\n      signerOrProvider\n    ) as ERC20;\n  }\n\n  public async readBalance(address: string): Promise<BigNumber> {\n    return this.erc20Contract.balanceOf(address);\n  }\n\n  public async readAllowance(\n    ownerAddress: string,\n    spenderAddress: string\n  ): Promise<BigNumber> {\n    return this.erc20Contract.allowance(ownerAddress, spenderAddress);\n  }\n\n  public async approve(\n    spenderAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.erc20Contract.approve(spenderAddress, amount);\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { IErc20BuilderService } from \"./IErc20BuilderService\";\nimport { IErc20Service } from \"./IErc20Service\";\nimport { Erc20Service } from \"./Erc20Service\";\n\nexport class Erc20BuilderService implements IErc20BuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildErc20Service(erc20Address: string): IErc20Service {\n    return new Erc20Service(erc20Address, this.signerOrProvider);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CErc20Json from \"../../../solidityInterfaces/CErc20.json\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20 } from \"../../../solidityInterfaces/CErc20\";\n\nexport class CErc20Service implements ICErc20Service {\n  private cErc20Contract: CErc20;\n\n  constructor(erc20Address: string, signerOrProvider: Signer | Provider) {\n    this.cErc20Contract = new Contract(\n      erc20Address,\n      CErc20Json.abi,\n      signerOrProvider\n    ) as CErc20;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.mint(amount);\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeemUnderlying(amount);\n  }\n\n  public async withdrawByOTokens(\n    oTokensAmount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.cErc20Contract.redeem(oTokensAmount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cErc20Contract.repayBorrow(amount);\n  }\n}\n","import { BigNumber, Contract, ContractTransaction } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CEtherJson from \"../../../solidityInterfaces/CEther.json\";\nimport MaximillionJson from \"../../../solidityInterfaces/Maximillion.json\";\nimport { ICEtherService } from \"./ICEtherService\";\nimport { CEther } from \"../../../solidityInterfaces/CEther\";\nimport { Maximillion } from \"../../../solidityInterfaces/Maximillion\";\nimport { formatEther, parseEther } from \"ethers/lib/utils\";\n\nexport class CEtherService implements ICEtherService {\n  private cEther: CEther;\n  private maximillion: Maximillion;\n\n  constructor(\n    cEtherAddress: string,\n    maximillionAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    this.cEther = new Contract(\n      cEtherAddress,\n      CEtherJson.abi,\n      signerOrProvider\n    ) as CEther;\n\n    this.maximillion = new Contract(\n      maximillionAddress,\n      MaximillionJson.abi,\n      signerOrProvider\n    ) as Maximillion;\n  }\n\n  public async mint(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.mint({ value: amount });\n  }\n\n  public async withdraw(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.redeemUnderlying(amount);\n  }\n\n  public async withdrawByOTokens(\n    oTokensAmount: BigNumber\n  ): Promise<ContractTransaction> {\n    return this.cEther.redeem(oTokensAmount);\n  }\n\n  public async borrow(amount: BigNumber): Promise<ContractTransaction> {\n    return this.cEther.borrow(amount);\n  }\n\n  public async repayBorrow(amount: BigNumber): Promise<ContractTransaction> {\n    throw new Error(`Cannot call 'repayBorrow' for oNative`);\n  }\n\n  public async repayBorrowWithMaximillion(\n    borrowerAddress: string,\n    amount: BigNumber\n  ): Promise<ContractTransaction> {\n    console.log(`CEther repay borrow : ${amount.toString()}`);\n    console.log(`CEther repay borrow : ${formatEther(amount)}`);\n    return this.maximillion.repayBehalf(borrowerAddress, { value: amount });\n  }\n}\n","import { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { ICTokensBuilderService } from \"./ICTokensBuilderService\";\nimport { ICErc20Service } from \"./ICErc20Service\";\nimport { CErc20Service } from \"./CErc20Service\";\nimport { CEtherService } from \"./CEtherService\";\n\nexport class CTokensBuilderService implements ICTokensBuilderService {\n  constructor(private signerOrProvider: Signer | Provider) {}\n\n  buildCErc20Service(cErc20Address: string): ICErc20Service {\n    return new CErc20Service(cErc20Address, this.signerOrProvider);\n  }\n\n  buildCEtherService(cEther: string, maximillion: string): CEtherService {\n    return new CEtherService(cEther, maximillion, this.signerOrProvider);\n  }\n}\n","import localTokensAddressesJson from \"../solidityInterfaces/localTokensAddresses.json\";\nimport { TChainIds } from \"./chainConstants\";\n\nexport const SUPPORTED_TOKENS_PER_CHAIN = {\n  // Local Hardhat\n  1337: { ...localTokensAddressesJson },\n  31337: { ...localTokensAddressesJson },\n  // Ethereum mainnet\n  1: {},\n\n  // Fuse mainnet\n  122: null,\n};\n\n// Quick-n-Dirty to get Token names\nexport const SYMBOLS_TO_NAMES = {\n  DAI: \"DAI\",\n  USDC: \"USD Coin\",\n  FUSE: \"Fuse\",\n  BTC: \"Bitcoin\",\n  ETH: \"Ether\",\n  WETH: \"Wrapped Ether\",\n  WBTC: \"Wrapped Bitcoin\",\n  USDT: \"Tether\",\n};\n\nexport type TNativeCoinDetails = {\n  name: string;\n  symbol: string;\n  decimals: number;\n};\n\nconst ETHER_COIN_DETAILS: TNativeCoinDetails = {\n  symbol: \"ETH\",\n  name: \"Ether\",\n  decimals: 18,\n};\n\nconst FUSE_COIN_DETAILS: TNativeCoinDetails = {\n  symbol: \"FUSE\",\n  name: \"Fuse\",\n  decimals: 18,\n};\n\nexport const NATIVE_COIN_DETAILS_PER_CHAIN: Record<\n  TChainIds,\n  TNativeCoinDetails\n> = {\n  // Local + hardhat\n  1337: FUSE_COIN_DETAILS,\n  31337: FUSE_COIN_DETAILS,\n  // Mainnet\n  // 1: ETHER_COIN_DETAILS,\n  // Ropsten\n  3: ETHER_COIN_DETAILS,\n  // Fuse\n  122: FUSE_COIN_DETAILS,\n};\n\n// TODO : SEMI-CRITICAL : Have the right value for each chain.\nconst DAYS_IN_YEAR = 365;\nconst MAINNET_ETHERUM_BLOCKS_PER_YEAR = 2102400;\n\nconst ROPSTEN_BLOCKS_PER_MINUTE = 5;\nconst ROPSTEN_BLOCK_PER_DAY = ROPSTEN_BLOCKS_PER_MINUTE * 60 * 24;\nconst ROPSTEN_BLOCK_PER_YEAR = ROPSTEN_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nconst FUSE_BLOCKS_PER_MINUTE = 5;\nconst FUSE_BLOCK_PER_DAY = FUSE_BLOCKS_PER_MINUTE * 60 * 24;\nconst FUSE_BLOCK_PER_YEAR = FUSE_BLOCK_PER_DAY * DAYS_IN_YEAR;\n\nexport const DAILY_BLOCK_PER_CHAIN = {\n  // None\n  \"-1\": 0,\n\n  // Local Hardhat\n  1337: FUSE_BLOCK_PER_YEAR,\n  31337: FUSE_BLOCK_PER_YEAR,\n  // Ethereum mainnet\n  1: MAINNET_ETHERUM_BLOCKS_PER_YEAR,\n\n  // Ropsten\n  3: ROPSTEN_BLOCK_PER_YEAR,\n\n  // Rinkby\n  // 4: null,\n\n  // Fuse Mainnet\n  122: FUSE_BLOCK_PER_YEAR,\n\n  // BSC\n  // 97: null,\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"../services/cryptoWalletConnectionService/IEthereumProvider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../constants/supportedTokensPerChain\";\n\nexport class CryptoWalletConnectionStore {\n  @observable private walletConnectionRequestApproved: boolean = false;\n\n  @observable public ethereumProvider: IEthereumProvider;\n  @observable public signerOrProvider: Signer | Provider;\n  @observable public hasEthereumProvider: boolean;\n  @observable public hasEventsSupport: boolean;\n\n  @observable public mainAddress: string = \"\";\n  @observable public chainId: number = -1;\n\n  @observable public nativeCoinBalance: number = 0;\n\n  @computed public get blocksPerYear(): number {\n    // @ts-ignore\n    const blocksPerYear = DAILY_BLOCK_PER_CHAIN[this.chainId];\n\n    if (blocksPerYear === undefined) {\n      return 0;\n    }\n\n    return blocksPerYear;\n  }\n\n  private addressCheckingInterval?: NodeJS.Timeout = undefined;\n  reactionToWalletConnection: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletConnectionService: ICryptoWalletConnectionService\n  ) {\n    makeObservable(this);\n\n    this.ethereumProvider = this.cryptoWalletConnectionService.getEthereumProvider();\n    this.signerOrProvider = getSignerOrProvider(this.ethereumProvider);\n    this.hasEthereumProvider =\n      cryptoWalletConnectionService.hasEthereumProvider;\n    this.hasEventsSupport = cryptoWalletConnectionService.hasEventsSupport;\n\n    this.reactionToWalletConnection = reaction(\n      () => this.isConnectedToWallet,\n      async (isConnected) => {\n        if (isConnected) {\n          this.readInformationFromConnectedWallet();\n        }\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n\n    if (this.hasEthereumProvider) {\n      // We will only detect address change if the Ethereum provider can support it\n      if (this.cryptoWalletConnectionService.hasEventsSupport) {\n        console.log(\"Provider has events support\");\n        this.cryptoWalletConnectionService.onMainAddressChange((address) => {\n          console.log(`DETECTED ADDDRESS CHANGE ${address}`);\n          this.setMainAddress(address);\n        });\n\n        this.cryptoWalletConnectionService.onChainIdChange((chainId) => {\n          console.log(`CHAIN-ID CHANGE ${chainId}`);\n          this.setChainId(chainId);\n        });\n      } else {\n        console.log(\"Provider does not have events support\");\n\n        // Else, we will read it one time + set an interval\n        this.addressCheckingInterval = setInterval(\n          () => this.refreshState(),\n          1000\n        );\n      }\n    }\n  }\n\n  @computed\n  public get isConnectedToWallet(): boolean {\n    return (\n      this.hasEthereumProvider &&\n      (this.cryptoWalletConnectionService.didUserApproveDappInThePast ||\n        this.walletConnectionRequestApproved)\n    );\n  }\n\n  public async refreshState() {\n    console.log(\"REFRESH-STATE\");\n    await this.readInformationFromConnectedWallet();\n  }\n\n  public async askToConnect(): Promise<boolean> {\n    if (this.isConnectedToWallet) {\n      return true;\n    } else {\n      const permissionGranted = await this.cryptoWalletConnectionService.requestConnectionPermission();\n      this.setWalletConnectionRequestApproved(permissionGranted);\n\n      return this.walletConnectionRequestApproved;\n    }\n  }\n\n  private async readInformationFromConnectedWallet() {\n    // Chain Id\n    const chainId = await this.cryptoWalletConnectionService.readChainId();\n    this.setChainId(chainId);\n\n    // Wallet address\n    const walletAddress = await this.cryptoWalletConnectionService.readMainAddress();\n    this.setMainAddress(walletAddress);\n\n    // Wallet balance\n    const walletBalance = await this.cryptoWalletConnectionService.readEthereumBalance(\n      walletAddress\n    );\n    this.setNativeCoinBalance(walletBalance);\n  }\n\n  @action(\"setWalletConnectionRequestApproved\")\n  private setWalletConnectionRequestApproved(requestApproved: boolean) {\n    this.walletConnectionRequestApproved = requestApproved;\n  }\n\n  @action(\"setMainAddress\")\n  private setMainAddress(mainAddress: string) {\n    this.mainAddress = mainAddress;\n  }\n\n  @action(\"setChainId\")\n  private setChainId(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  @action(\"setNativeCoinBalance\")\n  private setNativeCoinBalance(nativeCoinBalance: number) {\n    console.log({ nativeCoinBalance });\n    this.nativeCoinBalance = nativeCoinBalance;\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  ObservableMap,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { PromiEvent, TransactionReceipt } from \"web3-core\";\nimport { JSON_RPC_ERROR_CODES } from \"../constants/ethereumErrorCodes\";\nimport { TErc20Meta } from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber } from \"ethers\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\nexport class AccountStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  // Symbol -> TokenMetaWithBalance\n  @observable public tokensWithBalances: ObservableMap<\n    string,\n    TTokenMetaWithBalance\n  > = observable(new Map<string, TTokenMetaWithBalance>());\n\n  // Spender -> token-address -> TAssetAmount\n  @observable public allowances: ObservableMap<\n    string,\n    Map<string, TAssetAmount>\n  > = observable(new Map<string, Map<string, TAssetAmount>>());\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  /**\n   * For better DX\n   */\n  @computed get symbolsToUnits(): Record<string, number> {\n    console.log(\"Computing s2u\");\n    const s2u = Array.from(this.tokensWithBalances.entries()).reduce(\n      (obj, cur) => {\n        const [symbol, metaWithBalances] = cur;\n        obj[symbol] = metaWithBalances.balanceInUnits;\n\n        return obj;\n      },\n      {} as Record<string, number>\n    );\n\n    return s2u;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksStore: LendingNetworksStore,\n    private erc20BuilderService: IErc20BuilderService,\n    private cTokensBuilderService: ICTokensBuilderService\n  ) {\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.lendingNetworksStore.activeLNStore as SingleLNStore,\n      ],\n      async ([chainId, address, activeLNStoreId]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string,\n          (activeLNStoreId as SingleLNStore) || undefined\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n  private async handlePromievent(\n    promievent: PromiEvent<TransactionReceipt>,\n    name = \"A promievent\"\n  ): Promise<TransactionReceipt | undefined> {\n    this.resetTxIndicators();\n\n    // Indicate tx is pending\n    this.setTxPending(true);\n    console.log(`Waiting for promievent of ${name}`);\n\n    try {\n      const res = await promievent;\n      console.log(`Got Results for promievent of ${name}`);\n      return res;\n    } catch (e) {\n      if (\n        (e as any).code === JSON_RPC_ERROR_CODES.provider.userRejectedRequest\n      ) {\n        this.setTxCanceled(true);\n      } else {\n        throw e;\n      }\n    } finally {\n      this.setTxPending(false);\n    }\n  }\n\n  public async approveErc20Usage(\n    erc20Address: string,\n    spender: string,\n    amount: BigNumber\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Approving ${amount.toString()} for ${spender} on ${erc20Address}`\n    );\n    const contractInteraction = await this.erc20BuilderService\n      .buildErc20Service(erc20Address)\n      .approve(spender, amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async supplyToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Supplying ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.mint(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Withdrawing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdraw(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async withdrawFromMarketByOTokens(\n    cTokenAddress: string,\n    oTokensAmount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(\n      `Withdrawing all (${oTokensAmount.toString()} oTokens) from market ${cTokenAddress}`\n    );\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.withdrawByOTokens(\n      oTokensAmount\n    );\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async borrowFromMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Borrowing ${amount.toString()} to market ${cTokenAddress}`);\n    const cTokenService = isNativeCoin\n      ? this.cTokensBuilderService.buildCEtherService(\n          cTokenAddress,\n          maximillionAddress\n        )\n      : this.cTokensBuilderService.buildCErc20Service(cTokenAddress);\n\n    const contractInteraction = await cTokenService.borrow(amount);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    contractInteraction.wait().then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    return contractInteraction;\n  }\n\n  public async repayToMarket(\n    cTokenAddress: string,\n    amount: BigNumber,\n    isNativeCoin: boolean,\n    maximillionAddress: string\n  ) {\n    // TODO : Add proper tx interaction.\n    console.log(`Repaying ${amount.toString()} to market ${cTokenAddress}`);\n    let contractTransaction;\n\n    if (isNativeCoin) {\n      const cNativeService = this.cTokensBuilderService.buildCEtherService(\n        cTokenAddress,\n        maximillionAddress\n      );\n\n      contractTransaction = await cNativeService.repayBorrowWithMaximillion(\n        this.cryptoWalletIntegrationStore.mainAddress,\n        amount\n      );\n    } else {\n      const cTokenService = this.cTokensBuilderService.buildCErc20Service(\n        cTokenAddress\n      );\n      contractTransaction = await cTokenService.repayBorrow(amount);\n    }\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    const receipt = await contractTransaction\n      .wait()\n      .then(() => this.manuallyUpdateAllStores());\n\n    // TODO : CRITICAL : Handle txs\n    // return receipt;\n    return contractTransaction;\n  }\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    if (currentAddress) {\n      if (this.cryptoWalletIntegrationStore.hasEventsSupport) {\n        this.refreshAccountListeners(currentAddress);\n      }\n\n      try {\n        await this.refreshDataForAccount(\n          chainId,\n          currentAddress,\n          this.systemStore.nativeCoinSymbol,\n          activeLnStore\n        );\n\n        // if\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * DEV_NOTE : Move this to a dedicated 'tx's store that will handle tx and state refreshment.\n   */\n  public async manuallyUpdateAllStores() {\n    if (this.lendingNetworksStore.activeLNStore) {\n      this.lendingNetworksStore.activeLNStore.refreshFromOutside();\n    }\n    await this.manuallyReadAccountData();\n  }\n\n  public async manuallyReadAccountData() {\n    try {\n      await this.refreshDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n        this.systemStore.nativeCoinSymbol,\n        this.lendingNetworksStore.activeLNStore\n      );\n    } catch (e) {\n      this.failLoadingProcess(e);\n      console.error(\n        \"Error in manually reading address data in Account Store\",\n        e\n      );\n    }\n  }\n\n  private async refreshDataForAccount(\n    chainId: number,\n    accountAddress: string,\n    nativeCoinSymbol: string,\n    activeLnStore?: SingleLNStore\n  ) {\n    console.log(\n      `reading data for ${accountAddress} on ${chainId} for ln ${activeLnStore?.id}`\n    );\n    // Clear old data\n    this.clearAllAccountData();\n  }\n\n  private clearAllAccountData() {\n    this.clearTokenBalancesMap();\n  }\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"clearTokenBalancesMap\")\n  private clearTokenBalancesMap() {\n    this.tokensWithBalances.clear();\n  }\n\n  @action(\"replaceTokenBalancesMap\")\n  private replaceTokenBalancesMap(\n    tokensWithBalancesMap: Map<string, TTokenMetaWithBalance>\n  ) {\n    this.tokensWithBalances.replace(tokensWithBalancesMap);\n  }\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\n\nexport type TAssetInMarketParameters = {\n  name: string;\n  symbol: string;\n  address: string;\n  decimals: number;\n  isNativeCoin: boolean;\n};\n\nexport const EMPTY_ASSET_IN_MARKET_PARAMETERS: TAssetInMarketParameters = {\n  address: \"\",\n  symbol: \"\",\n  name: \"\",\n  decimals: 0,\n  isNativeCoin: false,\n};\n\n// \"Parameters\" refers to the unChangeable elements (name, id, tokens, etc..)\n// TODO : Think of a better name\nexport interface ILendingNetworkParameters {\n  id: string;\n  chainId: string;\n  name: string;\n  lnHomePage: string;\n  unitrollerAddress: string;\n  maximillionAddress: string;\n  assets: TAssetInMarketParameters[];\n  distributionAssetParameters: TAssetInMarketParameters;\n}\n\nexport interface ILendingNetworkLiveState {\n  tvl: number;\n  participatingSuppliers: number;\n}\n\nexport interface ILendingNetworkGist\n  extends ILendingNetworkParameters,\n    ILendingNetworkLiveState {}\n\nexport interface ITokenData {\n  cToken: string;\n  cTokenName: string;\n  cTokenSymbol: string;\n  cTokenDecimals: string;\n  exchangeRateCurrent: string;\n  supplyRatePerBlock: string;\n  borrowRatePerBlock: string;\n  reserveFactorMantissa: string;\n  totalBorrows: string;\n  totalReserves: string;\n  totalSupply: string;\n  totalCash: string;\n  isListed: boolean;\n  collateralFactorMantissa: string;\n}\n\nexport interface IUnderlyingMetadata {\n  underlyingAssetAddress: string;\n  underlyingDecimals: string;\n  underlyingName: string;\n  underlyingSymbol: string;\n}\n\nexport interface ITokenUnderlyingPrice {\n  cToken: string;\n  underlyingPrice: string;\n}\n\nexport interface ILendingNetworksService {\n  fetchALlLendingNetworksParameters(): Promise<ILendingNetworkParameters[]>;\n  fetchAllLendingNetworksGists(): Promise<ILendingNetworkGist[]>;\n\n  fetchLendingNetworkLiveState(\n    networkId: string\n  ): Promise<ILendingNetworkLiveState>;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport {\n  ITokenData,\n  ITokenUnderlyingPrice,\n  IUnderlyingMetadata,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport {\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { ethers } from \"ethers\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\n\nexport class SingleCTokenStore {\n  // CToken meta\n  @observable cTokenAddress: string;\n  @observable cTokenName: string;\n  @observable cTokenSymbol: string;\n  @observable cTokenDecimals: BigNumber;\n  @observable exchangeRateCurrent: BigNumber;\n  @observable supplyRatePerBlock: BigNumber;\n  @observable borrowRatePerBlock: BigNumber;\n  @observable private totalBorrows: BigNumber;\n  @observable private totalReserves: BigNumber;\n  @observable private totalSupply: BigNumber;\n  @observable private totalCash: BigNumber;\n  @observable private reserveFactorMantissa: BigNumber;\n  @observable private collateralFactorMantissa: BigNumber;\n  @observable isListed: boolean;\n\n  @observable underlyingAssetAddress: string;\n  @observable underlyingDecimals: number;\n  @observable underlyingName: string;\n  @observable underlyingSymbol: string;\n  // @observable underlyingPrice: BigNumber;\n\n  // CToken balances\n  @observable private balanceOf: BigNumber; // CToken balance for the user\n  @observable private borrowBalanceCurrent: BigNumber; // Underlying borrowed by the user\n  @observable private balanceOfUnderlying: BigNumber; // Balance of underlying for the user in the cToken ( owed to the user, derived from the user's wallet  cToken balance ).\n  @observable private tokenBalance: BigNumber; // Underlying balance for the user in their wallet\n  @observable private tokenAllowance: BigNumber; // Allowance in underlying with cToken as spender\n\n  // CToken underlying price\n  @observable underlyingPrice: BigNumber;\n\n  // Account specific data\n  @observable isCollaterable: boolean;\n\n  @computed get cTokenMeta(): TCTokenMetadata {\n    const cTokenMeta: TCTokenMetadata = {\n      cToken: this.cTokenAddress,\n      cTokenDecimals: this.cTokenDecimals,\n      collateralFactorMantissa: this.collateralFactorMantissa,\n      exchangeRateCurrent: this.exchangeRateCurrent,\n      isListed: this.isListed,\n      reserveFactorMantissa: this.reserveFactorMantissa,\n      totalBorrows: this.totalBorrows,\n      totalReserves: this.totalReserves,\n      totalSupply: this.totalSupply,\n      underlyingAssetAddress: this.underlyingAssetAddress,\n      underlyingDecimals: BigNumber.from(this.underlyingDecimals),\n      borrowRatePerBlock: this.borrowRatePerBlock,\n      supplyRatePerBlock: this.supplyRatePerBlock,\n      totalCash: this.totalCash,\n    };\n\n    return cTokenMeta;\n  }\n\n  constructor(\n    private cryptoWalletConnectionStore: CryptoWalletConnectionStore,\n    assetInMarketParams: TAssetInMarketParameters\n  ) {\n    makeObservable(this);\n    // this.cTokenAddress = tokenData.cToken;\n    // this.cTokenName = tokenData.cTokenName;\n    // this.cTokenSymbol = tokenData.cTokenSymbol;\n    // this.cTokenDecimals = BigNumber.from(tokenData.cTokenDecimals);\n    // this.totalCash = BigNumber.from(tokenData.totalCash);\n    // this.supplyRatePerBlock = BigNumber.from(tokenData.supplyRatePerBlock);\n    // this.borrowRatePerBlock = BigNumber.from(tokenData.borrowRatePerBlock);\n    // this.underlyingAssetAddress = assetInMarketParams.address;\n    // this.underlyingDecimals = assetInMarketParams.underlyingDecimals;\n    // this.underlyingName = underlyingMetadata.underlyingName;\n    // this.underlyingSymbol = underlyingMetadata.underlyingSymbol;\n    // this.underlyingPrice = BigNumber.from(0); // TODO : Figure where to get this from ?\n\n    this.cTokenAddress = \"\";\n    this.cTokenName = \"\";\n    this.cTokenSymbol = \"\";\n    this.cTokenDecimals = BigNumber.from(0);\n    this.exchangeRateCurrent = BigNumber.from(0);\n    this.supplyRatePerBlock = BigNumber.from(0);\n    this.borrowRatePerBlock = BigNumber.from(0);\n    this.totalBorrows = BigNumber.from(0);\n    this.totalReserves = BigNumber.from(0);\n    this.totalSupply = BigNumber.from(0);\n    this.totalCash = BigNumber.from(0);\n    this.reserveFactorMantissa = BigNumber.from(0);\n    this.collateralFactorMantissa = BigNumber.from(0);\n    this.isListed = false;\n\n    this.underlyingAssetAddress = assetInMarketParams.address;\n    this.underlyingDecimals = assetInMarketParams.decimals;\n    this.underlyingName = assetInMarketParams.name;\n    this.underlyingSymbol = assetInMarketParams.symbol;\n\n    // CToken balances\n    this.balanceOf = BigNumber.from(0);\n    this.borrowBalanceCurrent = BigNumber.from(0);\n    this.balanceOfUnderlying = BigNumber.from(0);\n    this.tokenBalance = BigNumber.from(0);\n    this.tokenAllowance = BigNumber.from(0);\n\n    // CToken underlying price\n    this.underlyingPrice = BigNumber.from(0);\n\n    // Account specific data\n    this.isCollaterable = false;\n  }\n\n  // **** State refresh from outside ****\n  public updateWithFreshState(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.batchUpdateFromCTokenMeta(\n      cTokenMeta,\n      cTokenBalances,\n      cTokenUnderlyingPrice\n    );\n  }\n\n  public updateIsInCollaterable(isCollaterable: boolean) {\n    this.setIsCollaterable(isCollaterable);\n  }\n\n  /**\n   * Calculates how much collateral is being generated from this market\n   */\n  @computed public get collateralPotentialInUSD(): number {\n    if (this.isCollaterable && this.accountSupplyInUnits > 0) {\n      console.log(`${this.underlyingSymbol} is collaterable`);\n\n      const fullDepositedValueUsd =\n        this.accountSupplyInUnits * this.underlyingUsdPrice;\n      const collateralPotentialUsd =\n        fullDepositedValueUsd * this.collateralFactorInUnits;\n\n      return collateralPotentialUsd;\n    } else {\n      return 0;\n    }\n  }\n\n  /***\n   * Indicates how many underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalCash, this.underlyingDecimals)\n    );\n  }\n\n  /***\n   * Indicates how many USD worth of underlying units the CToken currently holds\n   */\n  @computed\n  public get cTokenCashInUSD(): number {\n    return this.cTokenCashInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountUnderlyingBalanceInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.tokenBalance, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get totalSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalSupply, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountSupplyInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.balanceOfUnderlying,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get accountSupplyInOTokensRaw(): BigNumber {\n    return this.balanceOf;\n  }\n\n  @computed\n  public get accountSupplyInOTokensUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.accountSupplyInOTokensRaw,\n        this.cTokenDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(this.totalBorrows, this.underlyingDecimals)\n    );\n  }\n\n  @computed\n  public get accountBorrowInUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.borrowBalanceCurrent,\n        this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get underlyingUsdPrice(): number {\n    // DEV_NOTE : This calculation is based on the 'Lens' which returns the price is `36 - asset.decimals'\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.underlyingPrice,\n        36 - this.underlyingDecimals\n      )\n    );\n  }\n\n  @computed\n  public get totalSupplyBalanceUsd(): number {\n    return this.totalSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountSupplyBalanceUsd(): number {\n    return this.accountSupplyInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get totalBorrowBalanceUsd(): number {\n    return this.totalBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  @computed\n  public get accountBorrowBalanceUsd(): number {\n    return this.accountBorrowInUnits * this.underlyingUsdPrice;\n  }\n\n  /**\n   * We assume that if no cToken address has been set, it means that the 'batch update' has not finished.\n   */\n  @computed\n  public get hasBeenInitialized(): boolean {\n    return this.cTokenAddress !== \"\";\n  }\n\n  @computed\n  public get collateralFactorInUnits(): number {\n    const mantissaDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.collateralFactorMantissa, mantissaDecimals)\n    );\n  }\n\n  @computed\n  public get supplyRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.supplyRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  @computed\n  public get borrowRatePerBlockInUnits(): number {\n    const ratePerBlockDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.borrowRatePerBlock, ratePerBlockDecimals)\n    );\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.supplyRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInUnits(): number {\n    const blockPerYear = this.cryptoWalletConnectionStore.blocksPerYear;\n\n    return this.borrowRatePerBlockInUnits * blockPerYear;\n  }\n\n  /***\n   * Supply APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get supplyApyInPercentages(): number {\n    return this.supplyApyInUnits * 100;\n  }\n\n  /***\n   * Borrow APY in units (e.g : 0.57 (%57))\n   */\n  @computed\n  public get borrowApyInPercentages(): number {\n    return this.borrowApyInUnits * 100;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest.\n   */\n  @computed\n  public get totalYearlyGainsUsd(): number {\n    return this.accountSupplyInUnits * this.supplyApyInUnits;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest.\n   */\n  @computed\n  public get totalYearlyLossesUsd(): number {\n    return this.accountBorrowBalanceUsd * this.borrowApyInUnits;\n  }\n\n  /**\n   * The expected change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    return this.totalYearlyGainsUsd - this.totalYearlyLossesUsd;\n  }\n\n  @computed public get hasAnyAllowance(): boolean {\n    return this.tokenAllowance.gt(0);\n  }\n\n  public getUnitsForUsdValue(usdValue: number): number {\n    return usdValue / this.underlyingUsdPrice;\n  }\n\n  // **** Complex setters ****\n\n  @action(\"batchUpdateFromCTokenMeta\")\n  private batchUpdateFromCTokenMeta(\n    cTokenMeta: TCTokenMetadata,\n    cTokenBalances: TCTokenBalances,\n    cTokenUnderlyingPrice: TCTokenUnderlyingPrice\n  ) {\n    this.cTokenAddress = cTokenMeta.cToken;\n    this.cTokenDecimals = cTokenMeta.cTokenDecimals;\n    // this.cTokenName = cTokenMeta.;\n    // this.cTokenSymbol = \"\";\n\n    this.exchangeRateCurrent = cTokenMeta.exchangeRateCurrent;\n    this.supplyRatePerBlock = cTokenMeta.supplyRatePerBlock;\n    this.borrowRatePerBlock = cTokenMeta.borrowRatePerBlock;\n    this.totalBorrows = cTokenMeta.totalBorrows;\n    this.totalReserves = cTokenMeta.totalReserves;\n    this.totalSupply = cTokenMeta.totalSupply;\n    this.totalCash = cTokenMeta.totalCash;\n    this.collateralFactorMantissa = cTokenMeta.collateralFactorMantissa;\n    this.isListed = cTokenMeta.isListed;\n\n    // CToken Balances\n    this.balanceOf = cTokenBalances.balanceOf;\n    this.borrowBalanceCurrent = cTokenBalances.borrowBalanceCurrent;\n    this.balanceOfUnderlying = cTokenBalances.balanceOfUnderlying;\n    this.tokenBalance = cTokenBalances.tokenBalance;\n    this.tokenAllowance = cTokenBalances.tokenAllowance;\n\n    // CToken underlying price\n    this.underlyingPrice = cTokenUnderlyingPrice.underlyingPrice;\n  }\n\n  // **** Action setters ****\n  @action(\"setIsCollaterable\")\n  private setIsCollaterable(isCollaterable: boolean) {\n    this.isCollaterable = isCollaterable;\n\n    if (this.isCollaterable)\n      console.log(\n        `${this.underlyingSymbol} is collaterable with balance of ${this.totalSupplyBalanceUsd}`\n      );\n  }\n}\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  makeObservable,\n  observable,\n  reaction,\n  toJS,\n} from \"mobx\";\nimport {\n  EMPTY_ASSET_IN_MARKET_PARAMETERS,\n  ILendingNetworkGist,\n  ILendingNetworkLiveState,\n  ILendingNetworksService,\n  TAssetInMarketParameters,\n} from \"../../services/lendingNetworksService/ILendingNetworksService\";\nimport { TAssetInMarketGist } from \"../../pages/LendingNetworkPage/MarketsTab/markets/types\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenMetadata,\n} from \"../../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { BigNumber, ContractTransaction, ethers } from \"ethers\";\nimport {\n  NATIVE_COIN_ASSET_ADDRESS,\n  ZERO_ADDRESS,\n} from \"../../constants/constantAddresses\";\nimport { CryptoWalletConnectionStore } from \"../CryptoWalletConnectionStore\";\nimport { IComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"../../services/contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { SingleCTokenStore } from \"./SingleCTokenStore\";\nimport { DAILY_BLOCK_PER_CHAIN } from \"../../constants/supportedTokensPerChain\";\nimport { SystemStore } from \"../SystemStore\";\n\nexport class SingleLNStore {\n  @observable doneLoading: boolean = false;\n  @observable errorLoading: boolean = false;\n\n  @observable id: string;\n  @observable name: string;\n  @observable unitrollerAddress: string;\n  @observable maximillionAddress: string;\n  @observable lnHomePage: string;\n\n  @observable tvl: number;\n  @observable participatingSuppliers: number;\n\n  // DEV_NOTE : Currently they all have 6.\n  @observable private _priceCalculationDecimals: number = 6;\n\n  // Holds the parameters, used for initialization\n  @observable\n  assetsParams: IObservableArray<TAssetInMarketParameters> = observable([]);\n  @observable\n  assetBaseAddressToParams = observable(\n    new Map<string, TAssetInMarketParameters>()\n  );\n\n  // Holds the parameters with the live data\n  // @observable\n  // assetsGists: IObservableArray<TAssetInMarketGist> = observable([]);\n\n  // All cTokens addresses in comptroller\n  @observable allMarkets: IObservableArray<string> = observable([]);\n\n  @observable cTokensStores: IObservableArray<SingleCTokenStore> = observable(\n    []\n  );\n\n  // **** Reward token distribution *****\n  @observable\n  distributionAssetParams: TAssetInMarketParameters = EMPTY_ASSET_IN_MARKET_PARAMETERS;\n  @observable distributionAssetRatePerBlock = 0;\n  @observable public incentiveBalance = observable(BigNumber.from(0));\n  @observable public incentiveAllocated = observable(BigNumber.from(0));\n\n  // **** Account specific data *****\n  @observable public liquidity = observable(BigNumber.from(0));\n  @observable public shortfall = observable(BigNumber.from(0));\n  // TODO : Fix native token wrap base address\n  @observable public marketsUserIsIn: IObservableArray<string> = observable([]);\n\n  @computed get lnGist(): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      chainId: \"\", // TODO : Fill this chain id\n      distributionAssetParameters: EMPTY_ASSET_IN_MARKET_PARAMETERS,\n      unitrollerAddress: this.unitrollerAddress,\n      maximillionAddress: this.maximillionAddress,\n      participatingSuppliers: this.participatingSuppliers,\n      tvl: this.tvl,\n      name: this.name,\n      lnHomePage: this.lnHomePage,\n      assets: this.assetsParams,\n      id: this.id,\n    };\n\n    return gist;\n  }\n\n  // BaseAssetAddress -> CTokenStore\n  @computed get baseAssetsToCTokenStore(): Map<string, SingleCTokenStore> {\n    const map = new Map<string, SingleCTokenStore>();\n    for (let cTokenStore of this.cTokensStores) {\n      map.set(cTokenStore.underlyingAssetAddress, cTokenStore);\n    }\n    return map;\n  }\n\n  @computed\n  public get liquidityUsd(): number {\n    const liquidityDecimals = 18;\n    return parseFloat(\n      ethers.utils.formatUnits(this.liquidity, liquidityDecimals)\n    );\n  }\n\n  @computed\n  public get totalLNSupplyBalanceUsd(): number {\n    let totalSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalSupplyUsd += cTokenStore.totalSupplyBalanceUsd;\n    }\n\n    return totalSupplyUsd;\n  }\n\n  @computed\n  public get totalAccountSupplyBalanceUsd(): number {\n    let totalAccountSupplyUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountSupplyUsd += cTokenStore.accountSupplyBalanceUsd;\n    }\n\n    return totalAccountSupplyUsd;\n  }\n\n  @computed\n  public get totalLNBorrowBalanceUsd(): number {\n    let totalBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalBorrowUsd += cTokenStore.totalBorrowBalanceUsd;\n    }\n\n    return totalBorrowUsd;\n  }\n\n  @computed\n  public get totalAccountBorrowBalanceUsd(): number {\n    let totalAccountBorrowUsd = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalAccountBorrowUsd += cTokenStore.accountBorrowBalanceUsd;\n    }\n\n    return totalAccountBorrowUsd;\n  }\n\n  /**\n   * Expected yearly revenue for supply interest from all markets.\n   */\n  @computed\n  public get totalYearlyGains(): number {\n    let totalYearlyGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalYearlyGains += cTokenStore.totalYearlyGainsUsd;\n    }\n\n    return totalYearlyGains;\n  }\n\n  /**\n   * Expected yearly payment for borrow interest from all markets.\n   */\n  @computed\n  public get totalYearlyLosses(): number {\n    let totalLossesGains = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      totalLossesGains += cTokenStore.totalYearlyLossesUsd;\n    }\n\n    return totalLossesGains;\n  }\n\n  /**\n   * The expected USD change in value in a year.\n   */\n  @computed\n  public get totalYearlyChangeUsd(): number {\n    let totalYearlyChanges = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      // console.log(\n      //   `${cTokenStore.underlyingSymbol} change : ${cTokenStore.totalYearlyChangeUsd}`\n      // );\n      totalYearlyChanges += cTokenStore.totalYearlyChangeUsd;\n    }\n\n    return totalYearlyChanges;\n  }\n\n  @computed\n  public get netApy(): number {\n    // TODO : CRITICAL : Calculate this.\n    // const netSupplyUsd = this.totalAccountSupplyBalanceUsd;\n    // const netBorrowUsd = this.totalAccountBorrowBalanceUsd;\n\n    // Sum up Yearly profit or loss in each market.\n    // Calculate difference\n    const totalYearlyChange = this.totalYearlyChangeUsd;\n\n    // If positive, divide by total-supply-usd\n    // If negative, divide by total-borrow-usd\n    const divider =\n      totalYearlyChange > 0\n        ? this.totalAccountSupplyBalanceUsd\n        : this.totalAccountBorrowBalanceUsd;\n\n    return totalYearlyChange / divider;\n  }\n\n  @computed\n  public get collateralPotentialInUSD(): number {\n    let potentialCollateral = 0;\n\n    for (let cTokenStore of this.cTokensStores) {\n      potentialCollateral += cTokenStore.collateralPotentialInUSD;\n    }\n\n    return potentialCollateral;\n  }\n\n  @computed\n  public get usedBorrowPercentage(): number {\n    return this.usedBorrowFraction * 100;\n  }\n\n  @computed\n  public get usedBorrowFraction(): number {\n    return this.totalAccountBorrowBalanceUsd / this.collateralPotentialInUSD;\n  }\n\n  @computed\n  public get distributionAssetApy(): number {\n    // TODO : CRITICAL : Get the right value\n    const blockPerYear = DAILY_BLOCK_PER_CHAIN[\"1\"];\n    return this.distributionAssetRatePerBlock * blockPerYear;\n  }\n\n  @computed public get compBalanceUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveBalance,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get compAllocatedUnits(): number {\n    return parseFloat(\n      ethers.utils.formatUnits(\n        this.incentiveAllocated,\n        this.distributionAssetParams.decimals\n      )\n    );\n  }\n\n  @computed public get priceCalculationDecimals(): number {\n    return this._priceCalculationDecimals;\n  }\n\n  private addressChangeReaction: IReactionDisposer;\n\n  private comptrollerService: IComptrollerService;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService,\n    lendingNetworkGist: ILendingNetworkGist\n  ) {\n    makeObservable(this);\n    this.id = lendingNetworkGist.id;\n    this.name = lendingNetworkGist.name;\n    this.unitrollerAddress = lendingNetworkGist.unitrollerAddress;\n    this.maximillionAddress = lendingNetworkGist.maximillionAddress;\n    this.lnHomePage = lendingNetworkGist.lnHomePage;\n    // Quick-n-Dirty asset params\n    this.assetsParams.replace(lendingNetworkGist.assets);\n    this.assetBaseAddressToParams.replace(\n      new Map(\n        this.assetsParams.map((assetParam) => [assetParam.address, assetParam])\n      )\n    );\n    this.distributionAssetParams =\n      lendingNetworkGist.distributionAssetParameters;\n    this.tvl = lendingNetworkGist.tvl;\n    this.participatingSuppliers = lendingNetworkGist.participatingSuppliers;\n\n    // Move this to an action\n    // this.assetsGists.replace(\n    //   this.assetsParams.map((asset) => this.buildEmptyAssetInMarketGist(asset))\n    // );\n\n    this.comptrollerService = new ComptrollerService(\n      this.unitrollerAddress,\n      this.cryptoWalletIntegrationStore.signerOrProvider\n    );\n\n    // Create cTokens stores\n    this.cTokensStores.replace(\n      this.assetsParams.map(\n        (assetParam) =>\n          new SingleCTokenStore(cryptoWalletIntegrationStore, assetParam)\n      )\n    );\n\n    // this.cTokensStores.forEach((cTokenStore) =>\n    //   console.log(\n    //     `CTokenStore : ${cTokenStore.underlyingSymbol} ${cTokenStore.underlyingAssetAddress}`\n    //   )\n    // );\n\n    this.addressChangeReaction = reaction(\n      () => [\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress,\n      ],\n      async ([chainId, address]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainOrAddressChanged(\n          // DEV_NOTE : We add 'as' because TS thinks mixes the string and number in the array\n          chainId as number,\n          address as string\n        );\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Current address changed ****\n  private async reactToConnectedChainOrAddressChanged(\n    chainId: number,\n    currentAddress: string\n  ) {\n    if (currentAddress) {\n      try {\n        await this.readDataForAccount(chainId, currentAddress);\n      } catch (e) {\n        this.failLoadingProcess(e);\n        console.error(\n          \"Error in reacting to address change in Orbs Account Store\",\n          e\n        );\n      }\n    }\n  }\n\n  // **** Data reading and setting ****\n\n  /**\n   * Quick-n-Dirty\n   */\n  public async refreshFromOutside() {\n    return this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  private async readDataForAccount(chainId: number, accountAddress: string) {\n    // console.log(\n    //   `SingleLnStore : readDataForAccount : ${chainId} ${accountAddress}`\n    // );\n    // console.log(`reading SINGLE LN data for ${accountAddress} on ${chainId}`);\n    // Clear old data\n    // this.clearAllAccountData();\n    // Refresh LN state\n    this.refreshLNNetworkState().catch((e) =>\n      console.error(`Failed refreshing LN Network state ${e.toString()}`)\n    );\n    // Refresh LN state\n    this.readAndSetCompBalanceMeta(accountAddress).catch((e) =>\n      console.error(`Failed readNSet compBalance ${e.toString()}`)\n    );\n\n    // Refresh cTokens - OLD\n    // this.readMarketsAndCTokensData().catch((e) =>\n    //   console.error(`Failed readNSet markets and ctoken ${e.toString()}`)\n    // );\n\n    await this.readNSetMarkets().catch((e) =>\n      console.error(`Failed readNSet markets ${e.toString()}`)\n    );\n\n    // Refresh cTokens\n    this.batchReadAndUpdateCTokensStores().catch((e) =>\n      console.error(`Failed readNSet batch CTokens state ${e.toString()}`)\n    );\n\n    // Refresh Account details\n    this.readNSetAccountLimits(\n      accountAddress,\n      this.unitrollerAddress\n    ).catch((e) =>\n      console.error(`Failed readNSet accountLimits ${JSON.stringify(e)}`)\n    );\n  }\n\n  /**\n   * Should be called after constructor\n   */\n  public async initialize() {\n    await this.refreshFromOutside();\n  }\n\n  public async refreshLNNetworkState() {\n    const liveState = await this.lendingNetworksService.fetchLendingNetworkLiveState(\n      this.id\n    );\n\n    this.setLiveState(liveState);\n  }\n\n  // **** Contract interactions ****\n  async enterMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.enterMarkets([\n      cTokenStore.cTokenAddress,\n    ]);\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async exitMarketByBaseAsset(baseAssetAddress: string) {\n    const assetToCTokenStore = this.baseAssetsToCTokenStore;\n\n    if (!assetToCTokenStore.has(baseAssetAddress)) {\n      throw new Error(`No CToken Store for ${baseAssetAddress}`);\n    }\n\n    const cTokenStore = assetToCTokenStore.get(\n      baseAssetAddress\n    ) as SingleCTokenStore;\n    const tx = await this.comptrollerService.exitMarket(\n      cTokenStore.cTokenAddress\n    );\n    await tx.wait(1);\n\n    await this.readDataForAccount(\n      this.cryptoWalletIntegrationStore.chainId,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n  }\n\n  async enterMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.enterMarkets([cTokenAddress]);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async exitMarketByCTokenAddress(\n    cTokenAddress: string\n  ): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.exitMarket(cTokenAddress);\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  async claimLnIncentiveToken(): Promise<ContractTransaction> {\n    const tx = await this.comptrollerService.claimIncentiveFromAllMarkets(\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // DEV_NOTE : Refresh data after confirmation without waiting here\n    tx.wait().then(async () => {\n      await this.readDataForAccount(\n        this.cryptoWalletIntegrationStore.chainId,\n        this.cryptoWalletIntegrationStore.mainAddress\n      );\n    });\n\n    return tx;\n  }\n\n  // **** Read&Set ****\n\n  private async readNSetAccountLimits(\n    accountAddress: string,\n    comptrollerProxy: string\n  ) {\n    if (\n      accountAddress &&\n      comptrollerProxy &&\n      comptrollerProxy !== ZERO_ADDRESS &&\n      this.systemStore.compoundLensServiceInitialized\n    ) {\n      const accountLimits = await this.systemStore.compoundLensService.getAccountLimits(\n        comptrollerProxy,\n        accountAddress\n      );\n\n      this.setAccountLimits(accountLimits);\n    } else {\n      console.warn(\"Comptroller proxy address is empty\");\n    }\n  }\n\n  /**\n   * Simply calls 'getAllMarkets'\n   */\n  private async readNSetMarkets() {\n    const markets = await this.comptrollerService.getAllMarkets();\n    // console.log({ markets });\n    this.replaceMarkets(markets);\n  }\n\n  public async readAndSetCompBalanceMeta(account: string) {\n    if (!account || !this.systemStore.compoundLensServiceInitialized) {\n      return;\n    }\n\n    const compBalanceMetadataExt = await this.systemStore.compoundLensService.fetchCompBalanceMetadataExt(\n      this.distributionAssetParams.address,\n      this.unitrollerAddress,\n      account\n    );\n\n    this.setCompBalanceMeta(compBalanceMetadataExt);\n  }\n\n  // public async loadCTokenMetadata(): Promise<void> {\n  //   // this.setTokens(null);\n  //   const [\n  //     allCTokenData,\n  //     allUnderlyingMetadata,\n  //     allCTokenUnderlyingPrice,\n  //   ] = await Promise.all([\n  //     this.lendingNetworksService.fetchCTokenMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.fetchUnderlyingMetadataAll(\n  //       this.unitrollerAddress\n  //     ),\n  //     this.lendingNetworksService.cTokenUnderlyingPriceAll(\n  //       this.unitrollerAddress\n  //     ),\n  //   ]);\n  //\n  //   this.setTokens(\n  //     allCTokenData.map(\n  //       (cTokenData, idx) =>\n  //         new TokenStore(\n  //           cTokenData,\n  //           allUnderlyingMetadata[idx],\n  //           allCTokenUnderlyingPrice[idx]\n  //         )\n  //     )\n  //   );\n  // }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private async batchReadAndUpdateCTokensStores() {\n    const cTokenMarkets = this.allMarkets;\n    // const [first, ...cTokenMarkets] = this.allMarkets;\n    // const cTokenMarkets = [this.allMarkets[1], this.allMarkets[3]];\n    // const cTokenMarkets = [this.allMarkets[1], this.allMarkets[3]];\n    if (!cTokenMarkets || !cTokenMarkets.length) {\n      return console.log(`No markets for cToken batch read and update`);\n    } else if (!this.systemStore.compoundLensServiceInitialized) {\n      return console.log(\"Lens service not yet initialized\");\n    }\n\n    // console.log(`All cToken-markets ${this.allMarkets}`);\n    const cTokenMetas = await this.systemStore.compoundLensService.cTokenMetadataAll(\n      cTokenMarkets\n    );\n    // console.log(`Got metas : ${JSON.stringify(cTokenMetas.length)} `);\n    // console.log(JSON.stringify(cTokenMetas, null, 2));\n    // console.log(\n    //   `cTokenBalances for ${this.cryptoWalletIntegrationStore.mainAddress}`\n    // );\n    const cTokenBalancesAll = await this.systemStore.compoundLensService.cTokenBalancesAll(\n      cTokenMarkets,\n      this.cryptoWalletIntegrationStore.mainAddress\n    );\n\n    // console.log(`Got balances : ${JSON.stringify(cTokenBalancesAll, null, 2)}`);\n    const cTokenUnderlyingPricesAll = await this.systemStore.compoundLensService.cTokenUnderlyingPriceAll(\n      cTokenMarkets\n    );\n    // console.log(`Got prices: ${JSON.stringify(cTokenUnderlyingPricesAll)} `);\n\n    for (let i = 0; i < cTokenMetas.length; i++) {\n      const cTokenMeta = cTokenMetas[i];\n      const cTokenBalances = cTokenBalancesAll[i];\n      const cTokenUnderlyingPrices = cTokenUnderlyingPricesAll[i];\n      let matchingSTokenStore = this.cTokensStores.find(\n        (cTokenStore) =>\n          cTokenStore.underlyingAssetAddress ===\n          cTokenMeta.underlyingAssetAddress\n      );\n\n      // DEV_NOTE : This is a temp solution to handle the fact that the 'Lens' returns 0x000 address for the native coin.\n      if (\n        !matchingSTokenStore &&\n        cTokenMeta.underlyingAssetAddress === ZERO_ADDRESS\n      ) {\n        console.log(\"Looking for native coin cTokenStore\");\n        console.log(\n          `POssible underlyings : ${this.cTokensStores.map(\n            (cTokenStore) => cTokenStore.underlyingAssetAddress\n          )}`\n        );\n        // TODO : CRITICAL : Lock on one standard\n        matchingSTokenStore = this.cTokensStores.find((cTokenStore) =>\n          [NATIVE_COIN_ASSET_ADDRESS, ZERO_ADDRESS].includes(\n            cTokenStore.underlyingAssetAddress\n          )\n        );\n      }\n\n      if (matchingSTokenStore) {\n        matchingSTokenStore.updateWithFreshState(\n          cTokenMeta,\n          cTokenBalances,\n          cTokenUnderlyingPrices\n        );\n\n        const marketIsColleterable = this.marketsUserIsIn.includes(\n          matchingSTokenStore.cTokenAddress\n        );\n        matchingSTokenStore.updateIsInCollaterable(marketIsColleterable);\n      } else {\n        console.log(\n          `No cTokenStore found for meta of ${cTokenMeta.underlyingAssetAddress}`\n        );\n      }\n    }\n  }\n\n  // @action\n  // private setTokens(tokens: TokenStore[] | null): void {\n  //   this.tokens = tokens;\n  // }\n\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setLiveState\")\n  private setLiveState(lnLiveState: ILendingNetworkLiveState) {\n    this.tvl = lnLiveState.tvl;\n    this.participatingSuppliers = lnLiveState.participatingSuppliers;\n  }\n\n  @action(\"setLiveState\")\n  private setCompBalanceMeta(compBalance: TCompBalanceMetadataExt) {\n    this.incentiveBalance = compBalance.balance;\n    this.incentiveAllocated = compBalance.allocated;\n  }\n\n  @action(\"setDistributionAssetRatePerBlock\")\n  private setDistributionAssetRatePerBlock(\n    distributionAssetRatePerBlock: number\n  ) {\n    this.distributionAssetRatePerBlock = distributionAssetRatePerBlock;\n  }\n\n  @action(\"setAccountLimits\")\n  private setAccountLimits(accountLimits: TAccountLimits) {\n    console.log(`New liquidity ${accountLimits.liquidity}`);\n    console.log(`New shortfal ${accountLimits.shortfall}`);\n    this.liquidity = accountLimits.liquidity;\n    this.shortfall = accountLimits.shortfall;\n    this.marketsUserIsIn.replace(accountLimits.marketsIn);\n    console.log(`New markets in ${accountLimits.marketsIn}`);\n  }\n\n  @action(\"replaceMarkets\")\n  private replaceMarkets(newMarkets: string[]) {\n    this.allMarkets.replace(newMarkets);\n  }\n\n  private buildEmptyAssetInMarketGist(\n    assetInMarketParams: TAssetInMarketParameters\n  ): TAssetInMarketGist {\n    const gist: TAssetInMarketGist = {\n      name: assetInMarketParams.name,\n      symbol: assetInMarketParams.symbol,\n      address: assetInMarketParams.address,\n      decimals: assetInMarketParams.decimals,\n      isNativeCoin: assetInMarketParams.isNativeCoin,\n      // amountInWallet: 0,\n      borrowApy: 0,\n      supplyApy: 0,\n      usdLiquidity: 0,\n    };\n\n    return gist;\n  }\n}\n","import {\n  ILendingNetworkGist,\n  ILendingNetworkParameters,\n  ILendingNetworksService,\n} from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { action, computed, makeObservable, observable } from \"mobx\";\nimport { SingleLNStore } from \"./multiInstanceStores/SingleLNStore\";\nimport { IObservableArray } from \"mobx/dist/internal\";\nimport { ICompoundLensService } from \"../services/contractsIntegration/CompoundLensService/ICompoundLensService\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport { SystemStore } from \"./SystemStore\";\n\nexport class LendingNetworksStore {\n  @observable isLoading: boolean = false;\n  @observable\n  lendingNetworkParameters: IObservableArray<ILendingNetworkParameters> = observable(\n    []\n  );\n  @observable\n  lendingNetworkGists: IObservableArray<ILendingNetworkGist> = observable([]);\n  // @observable lendingNetworkLiveState: ILendingNetworkLiveState[] = [];\n  @observable\n  lendingNetworksStores: IObservableArray<SingleLNStore> = observable([]);\n\n  @observable\n  activeLendingNetworkId: string = \"\";\n\n  @computed get allLNGists(): ILendingNetworkGist[] {\n    const gists = this.lendingNetworksStores.map((lnStore) => lnStore.lnGist);\n    return gists;\n  }\n\n  @computed get activeLNStore(): SingleLNStore | undefined {\n    const activeLnStore = this.lendingNetworksStores.find(\n      (lnStore) => lnStore.id === this.activeLendingNetworkId\n    );\n\n    return activeLnStore;\n  }\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore,\n    private systemStore: SystemStore,\n    private lendingNetworksService: ILendingNetworksService\n  ) {\n    makeObservable(this);\n\n    this.initializeStore();\n  }\n\n  public getLendingNetworkStore(networkId: string): SingleLNStore | null {\n    return this.lendingNetworksStores.find((l) => l.id === networkId) ?? null;\n  }\n\n  async initializeStore() {\n    this.setLoadingState(true);\n\n    // Get params for all registered LNs\n    await this.fetchAllLnParameters();\n\n    // Create a store for each LN\n    this.buildStoresForEachLn();\n\n    // Set the current LN as the first (just to initialize it with something)\n    // Initialize each store\n    this.initializeLNStores();\n\n    // this.setLendingNetworksGists(lnParameters);\n    this.setLoadingState(false);\n  }\n\n  private async fetchAllLnParameters() {\n    const lnParameters = await this.lendingNetworksService.fetchALlLendingNetworksParameters();\n    this.setLendingNetworkParameters(lnParameters);\n  }\n\n  private buildStoresForEachLn() {\n    const lnStores = this.lendingNetworkParameters.map((params) =>\n      this.buildLNStore(params)\n    );\n\n    this.setLendingNetworksStores(lnStores);\n  }\n\n  /**\n   * Calls 'initiailize' on each store\n   */\n  private initializeLNStores() {\n    // TODO : Critical : Should not initialize al stores. only the ones that match the network\n    this.lendingNetworksStores.forEach((lnStore) => lnStore.initialize());\n  }\n\n  private buildEmptyLnGist(\n    lnParams: ILendingNetworkParameters\n  ): ILendingNetworkGist {\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    return gist;\n  }\n\n  private buildLNStore(lnParams: ILendingNetworkParameters): SingleLNStore {\n    // Start with an empty gist\n    const gist: ILendingNetworkGist = {\n      ...lnParams,\n      tvl: 0,\n      participatingSuppliers: 0,\n    };\n\n    // Build the store\n    const lnStore = new SingleLNStore(\n      this.cryptoWalletIntegrationStore,\n      this.systemStore,\n      this.lendingNetworksService,\n      // this.compoundLensService,\n      gist\n    );\n\n    return lnStore;\n  }\n\n  // **** Active LN ****\n  public setActiveLn(lnIdAddress: string) {\n    this.setActiveLendingNetworkId(lnIdAddress);\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  // ****  Complex setters ****\n\n  // ****  Observables setter actions ****\n  // @action(\"setLendingNetworksGists\")\n  // private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n  //   this.lendingNetworks = lendingNetworkGists.map(\n  //     (gits) => new SingleLNStore(this.lendingNetworksService, gits)\n  //   );\n  // }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksStores(lendingNetworkStores: SingleLNStore[]) {\n    this.lendingNetworksStores.replace(lendingNetworkStores);\n  }\n\n  @action(\"setLendingNetworksGists\")\n  private setLendingNetworksGists(lendingNetworkGists: ILendingNetworkGist[]) {\n    this.lendingNetworkGists.replace(lendingNetworkGists);\n  }\n\n  @action(\"setLendingNetworkParameters\")\n  private setLendingNetworkParameters(\n    lendingNetworkParameters: ILendingNetworkParameters[]\n  ) {\n    this.lendingNetworkParameters.replace(lendingNetworkParameters);\n  }\n\n  @action(\"setActiveLendingNetworkId\")\n  private setActiveLendingNetworkId(activeLendingNetworkId: string) {\n    this.activeLendingNetworkId = activeLendingNetworkId;\n  }\n\n  @action(\"setLoadingState\")\n  private setLoadingState(isLoading: boolean) {\n    this.isLoading = isLoading;\n  }\n}\n","import { action, computed, makeObservable, observable } from \"mobx\";\n\ntype TModalIds =\n  | \"SUPPLY_MODAL\"\n  | \"BORROW_MODAL\"\n  | \"COLLATERAL_MODAL\"\n  | \"INCENTIVE_MODAL\";\ntype TCurrentModalIds = TModalIds | \"NONE\";\n\nexport class ModalsStore {\n  @observable SUPPLY_MODAL_ID = \"SUPPLY_MODAL\";\n\n  @observable currentModalId: TCurrentModalIds = \"NONE\";\n  @observable assetBaseAddress: string = \"\";\n\n  @computed get isSupplyModalActive(): boolean {\n    return this.currentModalId === \"SUPPLY_MODAL\";\n  }\n\n  @computed get isBorrowModalActive(): boolean {\n    return this.currentModalId === \"BORROW_MODAL\";\n  }\n\n  @computed get isCollateralModalActive(): boolean {\n    return this.currentModalId === \"COLLATERAL_MODAL\";\n  }\n\n  @computed get isInventiveModalActive(): boolean {\n    return this.currentModalId === \"INCENTIVE_MODAL\";\n  }\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  // **** Modal management ****\n\n  public showSupplyModal(supplyAssetBaseAddress: string) {\n    this.showAssetActionModal(\"SUPPLY_MODAL\", supplyAssetBaseAddress);\n  }\n\n  public showBorrowModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"BORROW_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showCollateralModal(borrowAssetBaseAddress: string) {\n    this.showAssetActionModal(\"COLLATERAL_MODAL\", borrowAssetBaseAddress);\n  }\n\n  public showIncentiveModal() {\n    this.setCurrentModalId(\"INCENTIVE_MODAL\");\n  }\n\n  // **** Complex setters ****\n  private showAssetActionModal(\n    supplyModalId: TModalIds,\n    assetBaseAddress: string\n  ) {\n    // DEV_NOTE : Setting the asset before showing the modal to ensure that asset data will be found (no showing \"mid-way\" UI state)\n    this.setAssetBaseAddress(assetBaseAddress);\n    this.setCurrentModalId(supplyModalId);\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'supply'\n   */\n  public hideSupplyModal() {\n    if (this.isSupplyModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'borrow'\n   */\n  public hideBorrowModal() {\n    if (this.isBorrowModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'collateral'\n   */\n  public hideCollateralModal() {\n    if (this.isCollateralModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  /**\n   * Will only have any effect if the current modal is 'incentive'\n   */\n  public hideIncentiveModal() {\n    if (this.isInventiveModalActive) {\n      this.setCurrentModalId(\"NONE\");\n    }\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setCurrentModalId\")\n  private setCurrentModalId(currentModalId: TCurrentModalIds) {\n    console.log(`New current modal id ${currentModalId}`);\n    this.currentModalId = currentModalId;\n  }\n\n  @action(\"setAssetBaseAddress\")\n  private setAssetBaseAddress(assetBaseAddress: string) {\n    this.assetBaseAddress = assetBaseAddress;\n  }\n}\n","import { BigNumber, Contract } from \"ethers\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport CompoundLensJson from \"../../../solidityInterfaces/CompoundLens.json\";\nimport { CompoundLens } from \"../../../solidityInterfaces/CompoundLens\";\nimport {\n  ICompoundLensService,\n  TAccountLimits,\n  TCompBalanceMetadataExt,\n  TCTokenBalances,\n  TCTokenMetadata,\n  TCTokenUnderlyingPrice,\n} from \"./ICompoundLensService\";\nimport { parseEther } from \"ethers/lib/utils\";\nimport { etheresStructResponseToObject } from \"../contractsIntegrationUtils\";\n\nexport class CompoundLensService implements ICompoundLensService {\n  private compoundLensContract: CompoundLens;\n\n  constructor(\n    compoundLensAddress: string,\n    private signerOrProvider: Signer | Provider\n  ) {\n    this.compoundLensContract = new Contract(\n      compoundLensAddress,\n      CompoundLensJson.abi,\n      signerOrProvider\n    ) as CompoundLens;\n  }\n\n  public updateCompoundLensAddress(newCompoundLensAddress: string) {\n    console.log(`Updating compoundLens address to ${newCompoundLensAddress}`);\n    if (newCompoundLensAddress === \"\") {\n      console.log(\"Got an empty compound lens address\");\n    }\n\n    this.compoundLensContract = new Contract(\n      newCompoundLensAddress,\n      CompoundLensJson.abi,\n      this.signerOrProvider\n    ) as CompoundLens;\n  }\n\n  async cTokenMetadata(cTokenAddress: string): Promise<TCTokenMetadata> {\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n    }\n    return etheresStructResponseToObject(\n      await this.compoundLensContract.callStatic.cTokenMetadata(cTokenAddress)\n    );\n  }\n\n  async cTokenMetadataAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenMetadata[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenMetadataAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenMetadataAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenBalancesAll(\n    cTokenAddresses: string[],\n    account: string\n  ): Promise<TCTokenBalances[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenBalancesAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenBalancesAll(\n      cTokenAddresses,\n      account\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async cTokenUnderlyingPriceAll(\n    cTokenAddresses: string[]\n  ): Promise<TCTokenUnderlyingPrice[]> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : cTokenUnderlyingPriceAll\");\n      return [];\n    }\n    const rawMetas = await this.compoundLensContract.callStatic.cTokenUnderlyingPriceAll(\n      cTokenAddresses\n    );\n\n    return rawMetas.map((rawMeta) => etheresStructResponseToObject(rawMeta));\n  }\n\n  async getAccountLimits(\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TAccountLimits> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : getAccountLimits\");\n      return {\n        shortfall: BigNumber.from(0),\n        liquidity: BigNumber.from(0),\n        marketsIn: [],\n      };\n    }\n    const rawAccountLimits = await this.compoundLensContract.getAccountLimits(\n      comptrollerAddress,\n      account\n    );\n    const [marketsIn, liquidity, shortfall] = rawAccountLimits;\n\n    return {\n      marketsIn,\n      liquidity,\n      shortfall,\n    };\n  }\n\n  async fetchCompBalanceMetadataExt(\n    compToken: string,\n    comptrollerAddress: string,\n    account: string\n  ): Promise<TCompBalanceMetadataExt> {\n    // this.safeAddress();\n    if (!this.isInitialized()) {\n      console.log(\"NotInitialized for : fetchCompBalanceMetadataExt\");\n      return {\n        balance: BigNumber.from(0),\n        allocated: BigNumber.from(0),\n        votes: BigNumber.from(0),\n      };\n    }\n\n    console.log(`Fetching comp-balance-metadata-ext for inventive`);\n    console.log({ compToken });\n    console.log({ comptrollerAddress });\n    console.log({ account });\n\n    const rawCompBalanceMetaExt = await this.compoundLensContract.callStatic.getCompBalanceMetadataExt(\n      compToken,\n      comptrollerAddress,\n      account\n    );\n\n    return rawCompBalanceMetaExt;\n  }\n\n  private isInitialized(): boolean {\n    console.log(\n      `Compound lens contract : ${this.compoundLensContract.address}`\n    );\n    return this.compoundLensContract.address !== \"\";\n  }\n\n  private safeAddress() {\n    if (!this.isInitialized) {\n      throw new Error(`Compound lens address not initialized`);\n    }\n  }\n}\n","export const CHAIN_ID_LOCALHOST = 1337;\nexport const CHAIN_ID_HARDHAT = 31337;\nexport const CHAIN_ID_ETHEREUM_ROPSTEN = 3;\nexport const CHAIN_ID_FUSE = 122;\n\nexport type TLocalChainIds =\n  | typeof CHAIN_ID_LOCALHOST\n  | typeof CHAIN_ID_HARDHAT;\nexport type TLiveChainIds =\n  | typeof CHAIN_ID_ETHEREUM_ROPSTEN\n  | typeof CHAIN_ID_FUSE;\nexport type TChainIds = TLiveChainIds | TLocalChainIds;\n\nexport const LOCAL_CHAINS: TChainIds[] = [1337, 31337];\nexport const LIVE_CHAINS: TChainIds[] = [\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  CHAIN_ID_FUSE,\n];\n\n// DEV_NOTE : Hard-coded quick-n-dirty solution for explorer urls\nexport type TChainExplorerBaseUrls = {\n  explorerName: string;\n  baseUrl: string;\n  txUrlBase: string;\n  blockUrlBase: string;\n  addressUrlBase: string;\n};\n\nexport type TChainConstants = {\n  id: TChainIds;\n  compoundLensAddress: string;\n  explorerUrls: TChainExplorerBaseUrls;\n};\n\nexport const LIVE_CHAIN_CONSTANTS: Record<TLiveChainIds, TChainConstants> = {\n  // Ropsten\n  \"3\": {\n    compoundLensAddress: \"0x2290026fa95CBcD6a567A0f245A2C50A7DcB6Dd2\",\n    id: 3,\n    explorerUrls: {\n      explorerName: \"Etherscan\",\n      baseUrl: \"https://ropsten.etherscan.io/\",\n      blockUrlBase: \"https://ropsten.etherscan.io/block\",\n      addressUrlBase: \"https://ropsten.etherscan.io/address\",\n      txUrlBase: \"https://ropsten.etherscan.io/tx/\",\n    },\n  },\n  // Ropsten\n  \"122\": {\n    compoundLensAddress: \"0x8494e2680159520d515Db4b30135B0eeAc6245C3\",\n    id: 122,\n    explorerUrls: {\n      explorerName: \"Fuse explorer\",\n      baseUrl: \"https://explorer.fuse.io/\",\n      blockUrlBase: \"https://explorer.fuse.io/blocks\",\n      addressUrlBase: \"https://explorer.fuse.io/address\",\n      txUrlBase: \"https://explorer.fuse.io/tx\",\n    },\n  },\n};\n","import {\n  action,\n  computed,\n  IReactionDisposer,\n  observable,\n  reaction,\n} from \"mobx\";\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\nimport { NATIVE_COIN_DETAILS_PER_CHAIN } from \"../constants/supportedTokensPerChain\";\nimport { TErc20Meta } from \"../services/contractsIntegration/TokensLensService/ITokensLensService\";\nimport { BigNumber } from \"ethers\";\nimport ChainAddresses from \"../solidityInterfaces/addresses.json\";\nimport { CompoundLensService } from \"../services/contractsIntegration/CompoundLensService/CompoundLensService\";\nimport {\n  CHAIN_ID_ETHEREUM_ROPSTEN,\n  LIVE_CHAIN_CONSTANTS,\n  LIVE_CHAINS,\n  LOCAL_CHAINS,\n  TChainExplorerBaseUrls,\n  TChainIds,\n  TLiveChainIds,\n} from \"../constants/chainConstants\";\n\nexport type TTokenMetaWithBalance = TErc20Meta & {\n  balance: BigNumber;\n  name: string;\n  balanceInUnits: number;\n};\n\nexport type TAssetAmount = {\n  rawAmount: BigNumber;\n  amountInUnits: number;\n};\n\n// TODO : Consider splitting some properties here to a standalone 'chainStore'\nexport class SystemStore {\n  @observable public contractParametersDoneLoading = false;\n  @observable public contractParametersErrorLoading = false;\n  @observable public doneLoading = false;\n  @observable public errorLoading = false;\n\n  @observable public nativeCoinSymbol = \"ETH\";\n  @observable public nativeCoinName = \"Ether\";\n  @observable public nativeCoinDecimals = 18;\n  @observable public compoundLensAddress = \"\";\n  @observable public explorerName = \"\";\n  @observable public explorerBaseUrl = \"\";\n  @observable public explorerBaseTxUrl = \"\";\n  @observable public explorerBaseBlockUrl = \"\";\n  @observable public explorerBaseAddressUrl = \"\";\n\n  // TODO : Move tx's state to a different store\n  @observable\n  public txPending = false;\n  @observable public txHadError = false;\n  @observable public txCanceled = false;\n\n  @computed\n  public get compoundLensServiceInitialized(): boolean {\n    return this.compoundLensAddress !== \"\";\n  }\n\n  @computed\n  public get compoundLensService(): CompoundLensService {\n    if (this.compoundLensServiceInitialized) {\n      return new CompoundLensService(\n        this.compoundLensAddress,\n        this.cryptoWalletIntegrationStore.signerOrProvider\n      );\n    } else {\n      // @ts-ignore : We should always check for 'compoundLensServiceInitialized' before calling\n      return null;\n    }\n  }\n\n  private chainIdChangeReaction: IReactionDisposer;\n\n  constructor(\n    private cryptoWalletIntegrationStore: CryptoWalletConnectionStore\n  ) {\n    this.chainIdChangeReaction = reaction(\n      () => [this.cryptoWalletIntegrationStore.chainId],\n      async ([chainId]) => {\n        this.setDoneLoading(false);\n        await this.reactToConnectedChainChanged(chainId as TChainIds);\n        this.setDoneLoading(true);\n      },\n      {\n        fireImmediately: true,\n      }\n    );\n  }\n\n  // **** Computed values ****\n\n  // **** Contract interactions ****\n\n  // **** Current address changed ****\n\n  private async reactToConnectedChainChanged(chainId: TChainIds) {\n    console.log(`Chain ID ${chainId}`);\n    // @ts-ignore\n    console.log(\n      `Native coin ${NATIVE_COIN_DETAILS_PER_CHAIN[chainId]?.symbol}`\n    );\n\n    // Update compound lens address\n    // DEV_NOTE : This will not cause a re-render, but any call to the service will be to the right address\n    // this.compoundLensServiceInstance.updateCompoundLensAddress(\n    //   this.getChainCompoundLensAddress(chainId)\n    // );\n\n    // Compound lens address\n    const chainCompoundLensAddress = this.getChainCompoundLensAddress(chainId);\n    this.setCompoundLensAddress(chainCompoundLensAddress);\n\n    // Chain explorer urls\n    const chainExplorerBaseUrls = this.getChainExplorerUrls(chainId);\n    this.setExplorerAddresses(chainExplorerBaseUrls);\n\n    // Chain native coin\n    const nativeCoinSymbol =\n      NATIVE_COIN_DETAILS_PER_CHAIN[chainId]?.symbol || \"ETH\";\n    const nativeCoinName =\n      NATIVE_COIN_DETAILS_PER_CHAIN[chainId]?.name || \"Ether\";\n    const nativeCoinDecimals =\n      NATIVE_COIN_DETAILS_PER_CHAIN[chainId]?.decimals || 18;\n\n    // @ts-ignore\n    this.setNativeCoinDetails(\n      nativeCoinSymbol,\n      nativeCoinName,\n      nativeCoinDecimals\n    );\n  }\n\n  // **** Data reading and setting ****\n\n  // **** Read and Set ****\n\n  // ****  Subscriptions ****\n\n  private async refreshAccountListeners(accountAddress: string) {\n    this.cancelAllCurrentSubscriptions();\n  }\n\n  private cancelAllCurrentSubscriptions() {}\n\n  private getChainCompoundLensAddress(chainId: TChainIds): string {\n    console.log(`ChainId-lensAddress: ${chainId}`);\n    if (LOCAL_CHAINS.includes(chainId)) {\n      return ChainAddresses.CompoundLens;\n    } else if (LIVE_CHAINS.includes(chainId)) {\n      return LIVE_CHAIN_CONSTANTS[chainId as TLiveChainIds].compoundLensAddress;\n    } else if ((chainId as number) === -1) {\n      // DEV_NOTE : The initial value, not yet initialized.\n      return \"\";\n    } else {\n      console.error(`Unsupported chain id of ${chainId} (${typeof chainId})`);\n      return \"\";\n    }\n  }\n\n  private getChainExplorerUrls(chainId: TChainIds): TChainExplorerBaseUrls {\n    console.log(`ChainId-explorerAddress: ${chainId}`);\n    const chainExplorerBaseUrls: TChainExplorerBaseUrls = {\n      explorerName: \"\",\n      addressUrlBase: \"\",\n      baseUrl: \"\",\n      blockUrlBase: \"\",\n      txUrlBase: \"\",\n    };\n\n    if (LOCAL_CHAINS.includes(chainId)) {\n      // DEV_NOTE : WE will returns the 'ropsten' urls here for dev purposes\n      return LIVE_CHAIN_CONSTANTS[CHAIN_ID_ETHEREUM_ROPSTEN].explorerUrls;\n    } else if (LIVE_CHAINS.includes(chainId)) {\n      return LIVE_CHAIN_CONSTANTS[chainId as TLiveChainIds].explorerUrls;\n    } else if ((chainId as number) === -1) {\n      // DEV_NOTE : The initial value, not yet initialized.\n      return chainExplorerBaseUrls;\n    } else {\n      console.error(`Unsupported chain id of ${chainId} (${typeof chainId})`);\n      return chainExplorerBaseUrls;\n    }\n  }\n\n  // ****  Complex setters ****\n  private failLoadingProcess(error: Error) {\n    this.setErrorLoading(true);\n    this.setDoneLoading(true);\n  }\n\n  private resetTxIndicators() {\n    this.setTxPending(false);\n    this.setTxHadError(false);\n    this.setTxCanceled(false);\n  }\n\n  // ****  Observables setter actions ****\n  @action(\"setDoneLoading\")\n  private setDoneLoading(doneLoading: boolean) {\n    this.doneLoading = doneLoading;\n  }\n\n  @action(\"setErrorLoading\")\n  private setErrorLoading(errorLoading: boolean) {\n    this.errorLoading = errorLoading;\n  }\n\n  @action(\"setTxPending\")\n  private setTxPending(txPending: boolean) {\n    this.txPending = txPending;\n  }\n\n  @action(\"setTxCanceled\")\n  private setTxCanceled(txCanceled: boolean) {\n    this.txCanceled = txCanceled;\n  }\n\n  @action(\"setTxHadError\")\n  private setTxHadError(txHadError: boolean) {\n    this.txHadError = txHadError;\n  }\n\n  @action(\"setNativeCoinDetails\")\n  private setNativeCoinDetails(\n    nativeCoinSymbol: string,\n    nativeCoinName: string,\n    nativeCoinDecimals: number\n  ) {\n    console.log(`Native coin symbol ${nativeCoinSymbol} - ${nativeCoinName}`);\n    this.nativeCoinSymbol = nativeCoinSymbol;\n    this.nativeCoinName = nativeCoinName;\n    this.nativeCoinDecimals = nativeCoinDecimals;\n  }\n\n  @action(\"setCompoundLensAddress\")\n  private setCompoundLensAddress(compoundLensAddress: string) {\n    console.log(`Setting compoundLensAddress ${compoundLensAddress}`);\n    this.compoundLensAddress = compoundLensAddress;\n  }\n\n  @action(\"setExplorerAddresses\")\n  private setExplorerAddresses(explorerAddresses: TChainExplorerBaseUrls) {\n    console.log({ explorerAddresses });\n\n    this.explorerName = explorerAddresses.explorerName;\n    this.explorerBaseUrl = explorerAddresses.baseUrl;\n    this.explorerBaseTxUrl = explorerAddresses.txUrlBase;\n    this.explorerBaseAddressUrl = explorerAddresses.addressUrlBase;\n    this.explorerBaseBlockUrl = explorerAddresses.blockUrlBase;\n  }\n}\n","import { configure } from \"mobx\";\nimport { IStores } from \"./stores\";\n\nimport { CryptoWalletConnectionStore } from \"./CryptoWalletConnectionStore\";\n\n// This import ensures mobx batching\n// TODO : Check if still relevant to mobx6\n// import \"mobx-react-lite/batchingForReactDom\";\nimport { ICryptoWalletConnectionService } from \"../services/cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"../services/lendingNetworksService/ILendingNetworksService\";\nimport { AccountStore } from \"./AccountStore\";\nimport { LendingNetworksStore } from \"./LendingNetworksStore\";\nimport { ModalsStore } from \"./ModalsStore\";\nimport { IErc20BuilderService } from \"../services/contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { ICTokensBuilderService } from \"../services/contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { SystemStore } from \"./SystemStore\";\n\n/**\n * Builds and initializes all of the stores\n */\nexport function getStores(\n  cryptoWalletConnectionService: ICryptoWalletConnectionService,\n  lendingNetworksService: ILendingNetworksService,\n  erc20BuilderService: IErc20BuilderService,\n  cTokensBuilderService: ICTokensBuilderService\n): IStores {\n  // Create stores instances + Hydrate the stores\n  const cryptoWalletIntegrationStore = new CryptoWalletConnectionStore(\n    cryptoWalletConnectionService\n  );\n\n  const systemStore = new SystemStore(cryptoWalletIntegrationStore);\n\n  const lendingNetworksStore = new LendingNetworksStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksService\n  );\n\n  const accountStore = new AccountStore(\n    cryptoWalletIntegrationStore,\n    systemStore,\n    lendingNetworksStore,\n    erc20BuilderService,\n    cTokensBuilderService\n  );\n\n  const stores: IStores = {\n    cryptoWalletIntegrationStore,\n    accountStore,\n    lendingNetworksStore,\n    systemStore,\n    modalsStore: new ModalsStore(),\n  };\n\n  return stores;\n}\n\n// TODO : Check if this is still relevant to mobx6\n/**\n * Configures the mobx library. Should get called at App's initialization.\n */\nexport function configureMobx() {\n  configure({\n    enforceActions: \"observed\",\n  });\n}\n","import { StylesProvider, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport { App } from \"./App\";\nimport { baseTheme } from \"./theme/Theme\";\nimport { buildLNServices, buildServices } from \"./services/Services\";\nimport { configureMobx, getStores } from \"./store/storesInitialization\";\nimport { Provider } from \"mobx-react\";\nimport { ZERO_ADDRESS } from \"./constants/constantAddresses\";\n\ninterface IProps {}\n\nconfigureMobx();\n\n// TODO : Move this to a better place\nconst ethereumProvider = (window as any).ethereum;\nconst services = buildServices(ethereumProvider);\nconst lnServices = buildLNServices(ethereumProvider, {\n  unitrollerAddress: ZERO_ADDRESS,\n});\n// process.env.NODE_ENV === \"production\"\n//   ? buildServices(ethereumProvider)\n//   : buildMockServices(ethereumProvider);\nconst stores = getStores(\n  services.cryptoWalletIntegrationService,\n  services.lendingNetworksService,\n  services.erc20ServiceBuilder,\n  services.cTokenServiceBuilder\n);\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  return (\n    <Provider {...stores} {...services} {...lnServices}>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={baseTheme}>\n          <App />\n        </ThemeProvider>\n      </StylesProvider>\n    </Provider>\n  );\n});\n","import { ICryptoWalletConnectionService } from \"./cryptoWalletConnectionService/ICryptoWalletConnectionService\";\nimport { IEthereumProvider } from \"./cryptoWalletConnectionService/IEthereumProvider\";\nimport { CryptoWalletConnectionService } from \"./cryptoWalletConnectionService/CryptoWalletConnectionService\";\nimport { ILendingNetworksService } from \"./lendingNetworksService/ILendingNetworksService\";\nimport { LendingNetworksService } from \"./lendingNetworksService/LendingNetworksService\";\nimport { UniswapAnchoredViewService } from \"./contractsIntegration/UniswapAnchoredView/UniswapAnchoredViewService\";\n\nimport contractsAddresses from \"../solidityInterfaces/addresses.json\";\nimport { getSignerOrProvider } from \"../ethereumConnection/ethereumConnection\";\nimport { IComptrollerService } from \"./contractsIntegration/ComptrollerService/IComptrollerService\";\nimport { ComptrollerService } from \"./contractsIntegration/ComptrollerService/ComptrollerService\";\nimport { IErc20BuilderService } from \"./contractsIntegration/erc20Service/IErc20BuilderService\";\nimport { Erc20BuilderService } from \"./contractsIntegration/erc20Service/Erc20BuilderService\";\nimport { ICTokensBuilderService } from \"./contractsIntegration/cTokensService/ICTokensBuilderService\";\nimport { CTokensBuilderService } from \"./contractsIntegration/cTokensService/CTokensBuilderService\";\n\nexport interface IServices {\n  cryptoWalletIntegrationService: ICryptoWalletConnectionService;\n  lendingNetworksService: ILendingNetworksService;\n  // DEV_NOTE : Seems no one is using this service\n  uniswapAnchoredViewService: UniswapAnchoredViewService;\n\n  // Service builders\n  erc20ServiceBuilder: IErc20BuilderService;\n  cTokenServiceBuilder: ICTokensBuilderService;\n}\n\nexport type TLNContractsAddresses = {\n  unitrollerAddress: string;\n};\n\n/**\n * Services that are LN specific and should be refreshed/replaced when switching a LN.\n */\nexport interface ILNServices {\n  comptrollerLiveService: IComptrollerService;\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildServices(ethereumProvider: IEthereumProvider): IServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n  const addresses = getContractsAddresses();\n\n  return {\n    cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n      ethereumProvider\n    ),\n    lendingNetworksService: new LendingNetworksService(),\n    uniswapAnchoredViewService: new UniswapAnchoredViewService(\n      addresses.UniswapAnchoredView,\n      signerOrProvider\n    ),\n\n    // Service builders\n    erc20ServiceBuilder: new Erc20BuilderService(signerOrProvider),\n    cTokenServiceBuilder: new CTokensBuilderService(signerOrProvider),\n  };\n}\n\n// DEV_NOTE : For simplicity of early stage dev, we assume that we have ethereum provider, if not, we will not initialize the services.\nexport function buildLNServices(\n  ethereumProvider: IEthereumProvider,\n  contractsAddresses: TLNContractsAddresses\n): ILNServices {\n  const signerOrProvider = getSignerOrProvider(ethereumProvider);\n\n  return {\n    comptrollerLiveService: new ComptrollerService(\n      contractsAddresses.unitrollerAddress,\n      signerOrProvider\n    ),\n  };\n}\n\n// export function buildMockServices(\n//   ethereumProvider: IEthereumProvider\n// ): IServices {\n//   const signerOrProvider = getSignerOrProvider(ethereumProvider);\n//   const addresses = getContractsAddresses();\n//\n//   return {\n//     cryptoWalletIntegrationService: new CryptoWalletConnectionService(\n//       ethereumProvider\n//     ),\n//     lendingNetworksService: new LendingNetworksServiceMock(),\n//     uniswapAnchoredViewService: new UniswapAnchoredViewService(\n//       addresses.UniswapAnchoredView,\n//       signerOrProvider\n//     ),\n//     tokensLensService: new\n//   };\n// }\n\n// TODO : Add addresses by network\nexport function getContractsAddresses() {\n  return contractsAddresses;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppWrapper } from \"./AppWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}